{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "AnalysisType": {
            "description": "The types of analysis that can be used to establish success criteria.",
            "enum": [
                "THERMAL_HYDRAULIC",
                "STRUCTURAL",
                "NEUTRONIC",
                "RADIATION_TRANSPORT",
                "OTHER"
            ],
            "type": "string"
        },
        "AnalystQualification": {
            "description": "Interface for analyst qualifications.",
            "properties": {
                "analystName": {
                    "description": "Analyst name",
                    "type": "string"
                },
                "codeTraining": {
                    "description": "Training on computer codes used",
                    "items": {
                        "properties": {
                            "codeName": {
                                "description": "Code name",
                                "type": "string"
                            },
                            "trainingDate": {
                                "description": "Date of training",
                                "type": "string"
                            },
                            "trainingDescription": {
                                "description": "Training description",
                                "type": "string"
                            }
                        },
                        "required": [
                            "codeName",
                            "trainingDate",
                            "trainingDescription"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "qualifications": {
                    "description": "Qualifications",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "relevantExperience": {
                    "description": "Experience with relevant analyses",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "analystName",
                "qualifications",
                "relevantExperience",
                "uuid"
            ],
            "type": "object"
        },
        "Assumption": {
            "description": "Interface representing an assumption made during the analysis.",
            "properties": {
                "impact": {
                    "description": "The potential impact of this assumption on the analysis results.",
                    "type": "string"
                },
                "statement": {
                    "description": "The statement of the assumption.",
                    "type": "string"
                }
            },
            "required": [
                "statement"
            ],
            "type": "object"
        },
        "Assumption_1": {
            "description": "Interface representing an assumption and its context",
            "properties": {
                "addressingPlans": {
                    "description": "Plans to address or validate the assumption",
                    "type": "string"
                },
                "closureCriteria": {
                    "description": "Criteria or information required to close this assumption",
                    "type": "string"
                },
                "context": {
                    "description": "The context or type of the assumption (e.g., \"General\", \"Value-specific\")",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the assumption",
                    "type": "string"
                },
                "impact": {
                    "description": "Impact of the assumption on the analysis",
                    "type": "string"
                },
                "impactedParameters": {
                    "description": "Parameters or basic events impacted by this assumption",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "isPreOperational": {
                    "description": "Whether this is a pre-operational assumption (due to lack of as-built/as-operated details)",
                    "type": "boolean"
                },
                "limitations": {
                    "description": "Limitations imposed by this assumption",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rationale": {
                    "description": "Justification or rationale for the assumption",
                    "type": "string"
                },
                "references": {
                    "description": "References to supporting documentation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "status": {
                    "description": "Current status of the assumption",
                    "enum": [
                        "CLOSED",
                        "IN_PROGRESS",
                        "OPEN"
                    ],
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "description",
                "uuid"
            ],
            "type": "object"
        },
        "Assumption_2": {
            "description": "Interface representing an assumption made in the event sequence analysis.",
            "properties": {
                "addressingPlans": {
                    "description": "Plans to address or validate the assumption",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the assumption",
                    "type": "string"
                },
                "impact": {
                    "description": "Impact of the assumption on the analysis",
                    "type": "string"
                },
                "isPreOperational": {
                    "description": "Whether this is a pre-operational assumption (due to lack of as-built/as-operated details)",
                    "type": "boolean"
                },
                "limitations": {
                    "description": "Limitations imposed by this assumption",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rationale": {
                    "description": "Justification or rationale for the assumption",
                    "type": "string"
                },
                "references": {
                    "description": "References to supporting documentation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "status": {
                    "description": "Current status of the assumption",
                    "enum": [
                        "CLOSED",
                        "IN_PROGRESS",
                        "OPEN"
                    ],
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "description",
                "uuid"
            ],
            "type": "object"
        },
        "AssumptionsLackOfDetail": {
            "description": "Assumptions made due to lack of as-built and as-operated details",
            "properties": {
                "affectedPOSIds": {
                    "description": "Affected plant operating states",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the assumption made",
                    "type": "string"
                },
                "influence": {
                    "description": "Influences of plant operating state definitions",
                    "type": "string"
                },
                "justification": {
                    "description": "Justification for the assumption",
                    "type": "string"
                },
                "plannedActions": {
                    "description": "Planned actions to validate or refine this assumption",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "potentialAlternatives": {
                    "description": "Potential alternatives to this assumption",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "riskImpact": {
                    "$ref": "#/definitions/ImportanceLevel",
                    "description": "Impact assessment of this assumption on risk"
                },
                "sensitivityAnalysis": {
                    "description": "Sensitivity analysis results, if performed",
                    "type": "string"
                }
            },
            "required": [
                "description",
                "influence",
                "riskImpact"
            ],
            "type": "object"
        },
        "AtmosphericDispersionAnalysis": {
            "description": "Represents the analysis of atmospheric transport and dispersion of radioactive materials.",
            "properties": {
                "buildingWakeEffectsConsideration": {
                    "description": "Considerations for building wake effects on plume dispersion.\nRelevant to **RCAD-A7**.",
                    "type": "string"
                },
                "depositionModeling": {
                    "description": "Description of deposition modeling for radionuclide particles.\nRequired by **HLR-RCAD-E**.",
                    "type": "string"
                },
                "dispersionModel": {
                    "description": "The selected atmospheric dispersion model(s).\nRequired by **RCAD-A2**.",
                    "type": "string"
                },
                "dispersionModelJustification": {
                    "description": "Justification for the appropriateness of the selected dispersion model(s) for the source term and meteorological conditions.\nRequired by **RCAD-A2** (implicitly).",
                    "type": "string"
                },
                "dispersionUncertainty": {
                    "description": "Sources of model uncertainty, related assumptions, and reasonable alternatives for atmospheric dispersion.\nRequired by **RCAD-C6**.",
                    "properties": {
                        "alternatives": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "assumptions": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "sources": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "alternatives",
                        "assumptions",
                        "sources"
                    ],
                    "type": "object"
                },
                "dryDepositionParameters": {
                    "description": "Dry deposition parameters.",
                    "properties": {
                        "depositionVelocities": {
                            "$ref": "#/definitions/Record<string,number>"
                        },
                        "particleSizeDistribution": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "meteorologicalDataSpecification": {
                    "description": "Specifies the meteorological data used for the atmospheric dispersion calculations.",
                    "type": "string"
                },
                "modelLimitations": {
                    "description": "Addresses any limitations of the atmospheric dispersion models used.",
                    "type": "string"
                },
                "plumeRiseConsideration": {
                    "description": "Considerations for plume rise due to thermal buoyancy and/or momentum effects.\nRelevant to **RCAD-A4**.",
                    "type": "string"
                },
                "receptorLocationsSpecification": {
                    "description": "Specifies the grid or receptor locations used for calculating off-site concentrations and deposition.",
                    "type": "string"
                },
                "siteCharacteristicsConsidered": {
                    "description": "Describes how site-specific characteristics (e.g., topography, nearby structures) are considered in the atmospheric dispersion analysis.",
                    "type": "string"
                },
                "supportingDocumentationReferences": {
                    "description": "References to documentation of the input data, models, and results of the atmospheric transport and dispersion analysis.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "terrainEffectsConsideration": {
                    "description": "Considerations for the effects of complex terrain on plume transport and dispersion.\nRelevant to **RCAD-A8**.",
                    "type": "string"
                },
                "uncertaintyAnalysisDescription": {
                    "description": "Describes the uncertainty analysis performed for the atmospheric transport and dispersion calculations.",
                    "type": "string"
                },
                "wetDepositionParameters": {
                    "description": "Wet deposition parameters.",
                    "properties": {
                        "precipitationData": {
                            "type": "string"
                        },
                        "washoutCoefficients": {
                            "$ref": "#/definitions/Record<string,number>"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "dispersionModel",
                "dispersionModelJustification",
                "dispersionUncertainty"
            ],
            "type": "object"
        },
        "BarrierStatus": {
            "description": "Enum representing the status of a radionuclide barrier.\nUsed to indicate the current state of barriers that prevent the release of radioactive materials.",
            "enum": [
                "INTACT",
                "BREACHED",
                "DEGRADED",
                "BYPASSED",
                "OPEN"
            ],
            "type": "string"
        },
        "BaseAssumption": {
            "description": "Base interface for assumptions across technical elements.\nProvides a consistent structure for documenting assumptions.",
            "properties": {
                "addressingPlans": {
                    "description": "Plans to address or validate the assumption",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the assumption",
                    "type": "string"
                },
                "impact": {
                    "description": "Impact of the assumption on the analysis",
                    "type": "string"
                },
                "isPreOperational": {
                    "description": "Whether this is a pre-operational assumption (due to lack of as-built/as-operated details)",
                    "type": "boolean"
                },
                "limitations": {
                    "description": "Limitations imposed by this assumption",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rationale": {
                    "description": "Justification or rationale for the assumption",
                    "type": "string"
                },
                "references": {
                    "description": "References to supporting documentation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "status": {
                    "description": "Current status of the assumption",
                    "enum": [
                        "CLOSED",
                        "IN_PROGRESS",
                        "OPEN"
                    ],
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "description",
                "uuid"
            ],
            "type": "object"
        },
        "BaseDataAnalysisParameter": {
            "description": "Base Data Analysis Parameter - parent of all data analysis parameters\n\nThis interface implements several PRA standard requirements:\n- DA-A4: IDENTIFY the parameter to be estimated\n- DA-A5: IDENTIFY the sources of model uncertainty, related assumptions\n- DA-A6: IDENTIFY assumptions made due to lack of as-built details",
            "properties": {
                "assumptions": {
                    "description": "All assumptions made in the analysis, including both general and specific assumptions.",
                    "items": {
                        "$ref": "#/definitions/Assumption_1"
                    },
                    "type": "array"
                },
                "data_sources": {
                    "description": "All data sources used in the analysis, including both general and specific sources.",
                    "items": {
                        "$ref": "#/definitions/DataSource"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Detailed description of the parameter",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parameterType": {
                    "$ref": "#/definitions/ParameterType",
                    "description": "The type of parameter being analyzed."
                },
                "uncertainty": {
                    "$ref": "#/definitions/Uncertainty",
                    "description": "Uncertainty information for the parameter."
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "name",
                "parameterType",
                "uuid"
            ],
            "type": "object"
        },
        "BaseDesignInformation": {
            "description": "Base interface for design information sources and their traceability\n\nThis interface provides a structured way to reference design documents that inform \ntechnical element development, particularly important for:\n- Success criteria bases\n- Deterministic analyses\n- Technical basis for barrier treatment\n- Pre-operational PRA assumptions and their resolution",
            "properties": {
                "date": {
                    "description": "Date of the source document",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the design information",
                    "type": "string"
                },
                "requirementId": {
                    "description": "Requirement identifier for traceability",
                    "type": "string"
                },
                "revision": {
                    "description": "Document revision identifier",
                    "type": "string"
                },
                "sourceId": {
                    "description": "Identifier for the design source document",
                    "type": "string"
                },
                "sourceType": {
                    "description": "Type of source document (e.g., \"drawing\", \"calculation\", \"specification\")",
                    "type": "string"
                },
                "standardSection": {
                    "description": "Section number in relevant standard (e.g., NRC RG 1.247)",
                    "type": "string"
                }
            },
            "required": [
                "sourceId",
                "sourceType"
            ],
            "type": "object"
        },
        "BaseEvent": {
            "description": "Base Event - parent of all events",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "BaseModelUncertaintyDocumentation": {
            "description": "Base interface for model uncertainty documentation across technical elements.\nProvides a consistent structure for documenting uncertainties and assumptions.",
            "properties": {
                "name": {
                    "type": "string"
                },
                "reasonableAlternatives": {
                    "description": "Reasonable alternatives considered",
                    "items": {
                        "properties": {
                            "alternative": {
                                "description": "Alternative description",
                                "type": "string"
                            },
                            "applicableElements": {
                                "description": "Applicable elements",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "reasonNotSelected": {
                                "description": "Reason not selected",
                                "type": "string"
                            }
                        },
                        "required": [
                            "alternative",
                            "reasonNotSelected"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "relatedAssumptions": {
                    "description": "Related assumptions",
                    "items": {
                        "properties": {
                            "applicableElements": {
                                "description": "Applicable elements",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "assumption": {
                                "description": "Assumption description",
                                "type": "string"
                            },
                            "basis": {
                                "description": "Basis for assumption",
                                "type": "string"
                            }
                        },
                        "required": [
                            "assumption",
                            "basis"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "requirementReference": {
                    "description": "Reference to requirement",
                    "type": "string"
                },
                "uncertaintySources": {
                    "description": "Sources of model uncertainty",
                    "items": {
                        "properties": {
                            "applicableElements": {
                                "description": "Applicable elements",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "impact": {
                                "description": "Impact on analysis",
                                "type": "string"
                            },
                            "source": {
                                "description": "Source description",
                                "type": "string"
                            }
                        },
                        "required": [
                            "impact",
                            "source"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "name",
                "reasonableAlternatives",
                "relatedAssumptions",
                "uncertaintySources",
                "uuid"
            ],
            "type": "object"
        },
        "BasePeerReviewDocumentation": {
            "description": "Base interface for peer review documentation across technical elements.\nProvides a consistent structure for documenting peer reviews.",
            "properties": {
                "findingsAndObservations": {
                    "description": "Findings and observations",
                    "items": {
                        "properties": {
                            "associatedRequirements": {
                                "description": "Associated requirements",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "description": {
                                "description": "Description of the finding",
                                "type": "string"
                            },
                            "id": {
                                "description": "Finding ID",
                                "type": "string"
                            },
                            "resolutionActions": {
                                "description": "Resolution actions",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "resolutionStatus": {
                                "description": "Resolution status",
                                "enum": [
                                    "CLOSED",
                                    "IN_PROGRESS",
                                    "OPEN"
                                ],
                                "type": "string"
                            },
                            "significance": {
                                "$ref": "#/definitions/ImportanceLevel",
                                "description": "Significance of the finding"
                            }
                        },
                        "required": [
                            "description",
                            "id",
                            "resolutionStatus",
                            "significance"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "methodology": {
                    "description": "Review methodology",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "reportReference": {
                    "description": "Review report reference",
                    "type": "string"
                },
                "reviewDate": {
                    "description": "Review date",
                    "type": "string"
                },
                "reviewers": {
                    "description": "Review team members",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "scope": {
                    "description": "Scope of the review",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "findingsAndObservations",
                "methodology",
                "name",
                "reviewDate",
                "reviewers",
                "scope",
                "uuid"
            ],
            "type": "object"
        },
        "BasePreOperationalAssumptionsDocumentation": {
            "description": "Base interface for pre-operational assumptions documentation across technical elements.\nProvides a consistent structure for documenting assumptions made before operation.",
            "properties": {
                "assumptions": {
                    "description": "Assumptions due to lack of as-built, as-operated details",
                    "items": {
                        "$ref": "#/definitions/PreOperationalAssumption"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "supportingDocumentationReferences": {
                    "description": "References to supporting documentation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "validationPhase": {
                    "description": "Plant construction or operational phase when assumption can be validated",
                    "type": "string"
                }
            },
            "required": [
                "assumptions",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "BaseProcessDocumentation": {
            "description": "Base interface for process documentation across technical elements.\nProvides a consistent structure for documenting analysis processes.",
            "properties": {
                "designInformation": {
                    "description": "Design information sources used in the analysis",
                    "items": {
                        "$ref": "#/definitions/BaseDesignInformation"
                    },
                    "type": "array"
                },
                "inputsDescription": {
                    "description": "Description of inputs used in the analysis",
                    "type": "string"
                },
                "methodsDescription": {
                    "description": "Description of methods applied in the analysis",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "processDescription": {
                    "description": "Description of the overall process used",
                    "type": "string"
                },
                "requirementReferences": {
                    "description": "Traceability to requirements",
                    "items": {
                        "properties": {
                            "implementation": {
                                "description": "How the requirement is addressed",
                                "type": "string"
                            },
                            "requirementId": {
                                "description": "Requirement identifier",
                                "type": "string"
                            }
                        },
                        "required": [
                            "implementation",
                            "requirementId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "resultsDescription": {
                    "description": "Description of the results of the analysis",
                    "type": "string"
                },
                "supportingDocumentationReferences": {
                    "description": "References to supporting documentation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "name",
                "processDescription",
                "uuid"
            ],
            "type": "object"
        },
        "BaseTraceabilityDocumentation": {
            "description": "Base interface for traceability documentation across technical elements.\nProvides a consistent structure for documenting traceability of work.\n\nThis interface supports HLR-ES-D and similar requirements across technical elements\nby providing a structured way to document decisions, data sources, and changes.",
            "properties": {
                "analysisFlowDiagram": {
                    "description": "Reference to a diagram showing the analysis flow",
                    "type": "string"
                },
                "changeLog": {
                    "description": "Log of changes to the analysis",
                    "items": {
                        "properties": {
                            "analyst": {
                                "description": "Person who made the changes",
                                "type": "string"
                            },
                            "changes": {
                                "description": "Description of changes made",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "date": {
                                "description": "Date of change",
                                "type": "string"
                            },
                            "version": {
                                "description": "Version identifier",
                                "type": "string"
                            }
                        },
                        "required": [
                            "analyst",
                            "changes",
                            "date",
                            "version"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "crossReferences": {
                    "description": "Cross-references to other technical elements",
                    "items": {
                        "properties": {
                            "description": {
                                "description": "Description of the relationship",
                                "type": "string"
                            },
                            "elementId": {
                                "description": "ID of the referenced element",
                                "type": "string"
                            },
                            "relationship": {
                                "description": "Type of relationship",
                                "type": "string"
                            },
                            "technicalElement": {
                                "description": "Technical element type",
                                "type": "string"
                            }
                        },
                        "required": [
                            "elementId",
                            "relationship",
                            "technicalElement"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "dataSourceReferences": {
                    "$ref": "#/definitions/Record<string,string[]>",
                    "description": "References to data sources used in the analysis"
                },
                "modelingDecisions": {
                    "$ref": "#/definitions/Record<string,string>",
                    "description": "Key modeling decisions and their justifications"
                },
                "name": {
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "BaseUncertaintyAnalysis": {
            "description": "Base interface for uncertainty analysis across technical elements.\n\nThis interface provides a consistent structure for documenting uncertainty \npropagation methods and model uncertainties across different technical elements.",
            "properties": {
                "modelUncertainties": {
                    "description": "Model uncertainties considered \nThe concept of identifying, describing, and defining the treatment approach\nfor model uncertainties is relevant across various technical elements of a PRA.",
                    "items": {
                        "properties": {
                            "description": {
                                "description": "Description of the uncertainty",
                                "type": "string"
                            },
                            "impact": {
                                "description": "Impact on the model",
                                "type": "string"
                            },
                            "isQuantified": {
                                "description": "Whether the uncertainty is quantified",
                                "type": "boolean"
                            },
                            "treatmentApproach": {
                                "description": "How the uncertainty is addressed",
                                "type": "string"
                            },
                            "uncertaintyId": {
                                "description": "Uncertainty ID",
                                "type": "string"
                            }
                        },
                        "required": [
                            "description",
                            "impact",
                            "isQuantified",
                            "treatmentApproach",
                            "uncertaintyId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "numberOfSamples": {
                    "description": "Number of samples if using simulation \nSpecific to simulation-based propagation methods (like Monte Carlo and Latin Hypercube)\nand is a general parameter for such methods.",
                    "type": "number"
                },
                "propagationMethod": {
                    "description": "Uncertainty propagation method \nDefines the method used to propagate uncertainty, which is a general concept\napplicable across different types of uncertainty analysis within a PRA.",
                    "enum": [
                        "ANALYTICAL",
                        "LATIN_HYPERCUBE",
                        "MONTE_CARLO",
                        "OTHER"
                    ],
                    "type": "string"
                },
                "randomSeed": {
                    "description": "Seed value for random number generator if using simulation \nUsed in simulation-based uncertainty propagation to ensure reproducibility\nor to control the random number generation process.",
                    "type": "number"
                },
                "sensitivityStudies": {
                    "description": "Sensitivity studies for unquantified uncertainties \nSensitivity analysis is a general technique used to assess the impact\nof parameter variations or uncertainties on the results of an analysis.",
                    "items": {
                        "$ref": "#/definitions/SensitivityStudy"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "modelUncertainties",
                "propagationMethod",
                "uuid"
            ],
            "type": "object"
        },
        "BasicEvent": {
            "description": "Basic Event type",
            "properties": {
                "description": {
                    "type": "string"
                },
                "eventType": {
                    "const": "BASIC",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "eventType",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "BasicEventBoundary": {
            "description": "This interface defines boundaries for basic events that are used in data analysis.\nIt references the core BasicEvent type from the upstream core/events.ts module.\nThe BasicEvent type is the most upstream definition and is used across multiple modules.",
            "properties": {
                "basicEventId": {
                    "description": "Basic event identifier - references a BasicEvent from the core events module\nThis establishes a link to the upstream BasicEvent definition",
                    "type": "string"
                },
                "boundaryBasis": {
                    "description": "Basis for boundary definition",
                    "type": "string"
                },
                "description": {
                    "description": "Boundary description",
                    "type": "string"
                },
                "excludedConditions": {
                    "description": "Conditions excluded from the boundary",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "includedConditions": {
                    "description": "Conditions included in the boundary",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "referenceDocuments": {
                    "description": "Reference documents defining the boundary",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "systemReference": {
                    "description": "Reference to the system where this basic event is used\nThis creates a link to the SystemBasicEvent in the systems-analysis module",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "basicEventId",
                "boundaryBasis",
                "description",
                "includedConditions",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "BayesianUpdate": {
            "description": "Interface representing a Bayesian update process for parameter estimation.\nThis is used to combine prior information with new data to produce an updated posterior distribution.",
            "properties": {
                "convergence_criteria": {
                    "description": "Convergence criteria used for numerical methods (if applicable)",
                    "type": "number"
                },
                "method": {
                    "description": "The method used for the Bayesian update (e.g., \"Conjugate prior\", \"MCMC\")",
                    "type": "string"
                },
                "performed": {
                    "description": "Whether a Bayesian update was performed",
                    "type": "boolean"
                },
                "posterior": {
                    "description": "Posterior distribution information after update",
                    "properties": {
                        "distribution": {
                            "$ref": "#/definitions/DistributionType",
                            "description": "The distribution type of the posterior"
                        },
                        "parameters": {
                            "$ref": "#/definitions/Record<string,number>",
                            "description": "Parameters of the posterior distribution"
                        }
                    },
                    "required": [
                        "distribution",
                        "parameters"
                    ],
                    "type": "object"
                },
                "prior": {
                    "description": "Prior distribution information",
                    "properties": {
                        "distribution": {
                            "$ref": "#/definitions/DistributionType",
                            "description": "The distribution type of the prior"
                        },
                        "parameters": {
                            "$ref": "#/definitions/Record<string,number>",
                            "description": "Parameters of the prior distribution"
                        },
                        "source": {
                            "description": "Source of the prior information",
                            "type": "string"
                        }
                    },
                    "required": [
                        "distribution",
                        "parameters"
                    ],
                    "type": "object"
                },
                "validation": {
                    "description": "Validation of the update process",
                    "properties": {
                        "issues": {
                            "description": "Any issues identified",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "method": {
                            "description": "Method used for validation",
                            "type": "string"
                        },
                        "results": {
                            "description": "Results of validation",
                            "type": "string"
                        }
                    },
                    "required": [
                        "method",
                        "results"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "method",
                "performed"
            ],
            "type": "object"
        },
        "BoundingSite": {
            "description": "Represents a bounding site with relevant characteristics for consequence analysis.",
            "properties": {
                "boundedSites": {
                    "description": "List of sites that are bounded by this site.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "boundingJustification": {
                    "description": "Detailed justification explaining how this site bounds all sites in the scope of the PRA.\nRequired by **RCRE-A1**.",
                    "type": "string"
                },
                "characteristics": {
                    "additionalProperties": {},
                    "description": "Key characteristics of the bounding site relevant to consequence analysis.",
                    "properties": {
                        "populationCentreDistance": {
                            "description": "Distance to the nearest population centre in km.",
                            "type": "number"
                        },
                        "siteBoundaryDistance": {
                            "description": "Distance to the site boundary in km.",
                            "type": "number"
                        },
                        "terrain": {
                            "description": "Description of the terrain around the site.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "description": {
                    "description": "Description of the bounding site.",
                    "type": "string"
                },
                "justification": {
                    "description": "Justification for why this site bounds other sites in the scope of the PRA.",
                    "type": "string"
                }
            },
            "required": [
                "boundingJustification",
                "characteristics",
                "description",
                "justification"
            ],
            "type": "object"
        },
        "CircularLogic": {
            "description": "Representation of a circular logic situation in the event sequence model",
            "properties": {
                "description": {
                    "description": "Description of the circular logic",
                    "type": "string"
                },
                "detectionMethod": {
                    "description": "How the circular logic was detected",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for this circular logic",
                    "type": "string"
                },
                "involvedElementIds": {
                    "description": "IDs of the events or systems involved in the circular logic",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "resolutionDescription": {
                    "description": "Description of how the circular logic was resolved",
                    "type": "string"
                },
                "resolutionImpact": {
                    "description": "Impact of the resolution on the results",
                    "type": "string"
                },
                "resolutionMethod": {
                    "$ref": "#/definitions/CircularLogicResolutionMethod",
                    "description": "Method used to resolve the circular logic"
                }
            },
            "required": [
                "description",
                "detectionMethod",
                "id",
                "involvedElementIds",
                "resolutionDescription",
                "resolutionMethod"
            ],
            "type": "object"
        },
        "CircularLogicResolutionMethod": {
            "description": "Enum representing the circular logic resolution methods",
            "enum": [
                "CONDITIONAL_SPLIT_FRACTIONS",
                "TRANSFER_GATES",
                "ITERATIVE_CONVERGENCE",
                "LOGIC_TRANSFORMATION"
            ],
            "type": "string"
        },
        "CommonCauseFailureGroup": {
            "description": "Interface for a common cause failure group.",
            "properties": {
                "affectedComponents": {
                    "description": "Components affected by this CCF group.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "affectedSystems": {
                    "description": "Systems affected by this CCF group.",
                    "items": {
                        "$ref": "#/definitions/SystemReference"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the common cause failure group.",
                    "type": "string"
                },
                "modelParameters": {
                    "$ref": "#/definitions/Record<string,number>",
                    "description": "Parameters of the CCF model (reference to Data Analysis parameters)."
                },
                "modelType": {
                    "description": "The common cause model used (reference to Data Analysis).",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "riskSignificanceJustification": {
                    "description": "Justification for why this CCF is or is not risk-significant.",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "affectedComponents",
                "affectedSystems",
                "description",
                "modelType",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "Component": {
            "description": "Base interface for components",
            "properties": {
                "description": {
                    "description": "Description of the component",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "systemId": {
                    "description": "System this component belongs to",
                    "type": "string"
                },
                "type": {
                    "description": "Type of component",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "name",
                "systemId",
                "type",
                "uuid"
            ],
            "type": "object"
        },
        "ComponentBoundary": {
            "description": "Interface representing system or component boundaries for parameter estimation",
            "properties": {
                "boundaries": {
                    "description": "Boundaries array - directly maps to SystemDefinition.boundaries when \nreferencing a system",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "boundaryBasis": {
                    "description": "Basis for boundary definition",
                    "type": "string"
                },
                "componentId": {
                    "$ref": "#/definitions/ComponentReference",
                    "description": "Component identifier - references a component within SystemDefinition.modeledComponentsAndFailures"
                },
                "description": {
                    "description": "Boundary description",
                    "type": "string"
                },
                "excludedItems": {
                    "description": "Items excluded from the boundary",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "includedItems": {
                    "description": "Items included in the boundary - more detailed than boundaries",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "referenceDocuments": {
                    "description": "Reference documents defining the boundary",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "systemId": {
                    "description": "System identifier - references SystemDefinition",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "boundaries",
                "boundaryBasis",
                "description",
                "includedItems",
                "name",
                "systemId",
                "uuid"
            ],
            "type": "object"
        },
        "ComponentDependency": {
            "description": "Interface for a dependency between components within a system.",
            "properties": {
                "componentA": {
                    "description": "The first component in the dependency relationship.",
                    "type": "string"
                },
                "componentB": {
                    "description": "The second component in the dependency relationship.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the dependency.",
                    "type": "string"
                },
                "details": {
                    "description": "Additional details about the dependency.",
                    "type": "string"
                },
                "impact": {
                    "description": "The impact of this dependency on component performance.",
                    "type": "string"
                },
                "system": {
                    "$ref": "#/definitions/SystemReference",
                    "description": "The system this dependency exists within."
                },
                "type": {
                    "description": "The type of dependency.",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "componentA",
                "componentB",
                "system",
                "type",
                "uuid"
            ],
            "type": "object"
        },
        "ComponentGrouping": {
            "description": "Interface representing grouping rationale for components",
            "properties": {
                "componentIds": {
                    "description": "Component IDs in this group - references components within SystemDefinition.modeledComponentsAndFailures\nThese components should have their componentGroup field set to this group's groupId",
                    "items": {
                        "$ref": "#/definitions/ComponentReference"
                    },
                    "type": "array"
                },
                "designCharacteristics": {
                    "description": "Design characteristics considered for grouping",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "environmentalConditions": {
                    "description": "Environmental conditions considered for grouping",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "excludedOutliers": {
                    "description": "Components explicitly excluded from this group as outliers",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "groupId": {
                    "description": "Group identifier",
                    "type": "string"
                },
                "groupingJustification": {
                    "description": "Justification for the grouping",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "operationalConditions": {
                    "description": "Operational conditions considered for grouping",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "outlierIdentificationCriteria": {
                    "description": "Criteria used to identify outliers for this group",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "referenceDocuments": {
                    "description": "References to supporting documents",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "serviceConditions": {
                    "description": "Service conditions considered for grouping",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "systemId": {
                    "description": "System identifier - references SystemDefinition",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "componentIds",
                "designCharacteristics",
                "environmentalConditions",
                "groupId",
                "groupingJustification",
                "name",
                "serviceConditions",
                "systemId",
                "uuid"
            ],
            "type": "object"
        },
        "ComponentMissionTimeDefinition": {
            "description": "Interface representing component mission time information.",
            "properties": {
                "analysisReferences": {
                    "description": "References to supporting analyses",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "componentId": {
                    "$ref": "#/definitions/ComponentReference",
                    "description": "Component identifier"
                },
                "eventSequenceReference": {
                    "description": "Reference to the event sequence",
                    "type": "string"
                },
                "missionTimeHours": {
                    "allOf": [
                        {
                            "properties": {
                                "typia.tag": {
                                    "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                    "properties": {
                                        "exclusive": {
                                            "items": [
                                                {
                                                    "const": "minimum",
                                                    "type": "string"
                                                },
                                                {
                                                    "const": "exclusiveMinimum",
                                                    "type": "string"
                                                }
                                            ],
                                            "maxItems": 2,
                                            "minItems": 2,
                                            "type": "array"
                                        },
                                        "kind": {
                                            "const": "minimum",
                                            "type": "string"
                                        },
                                        "schema": {
                                            "properties": {
                                                "minimum": {
                                                    "const": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "minimum"
                                            ],
                                            "type": "object"
                                        },
                                        "target": {
                                            "const": "number",
                                            "type": "string"
                                        },
                                        "validate": {
                                            "const": "0 <= $input",
                                            "type": "string"
                                        },
                                        "value": {
                                            "const": 0,
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "exclusive",
                                        "kind",
                                        "schema",
                                        "target",
                                        "validate",
                                        "value"
                                    ],
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "description": "Mission time in hours"
                },
                "shorterMissionTimeJustification": {
                    "description": "Justification if component mission time is shorter than sequence mission time\nRequired if component mission time < sequence mission time",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "analysisReferences",
                "componentId",
                "eventSequenceReference",
                "missionTimeHours",
                "uuid"
            ],
            "type": "object"
        },
        "ComponentReference": {
            "allOf": [
                {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "pattern",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "pattern": {
                                            "const": "^CMP-[A-Za-z0-9_-]+$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "pattern"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "RegExp(\"^CMP-[A-Za-z0-9_-]+$\").test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "^CMP-[A-Za-z0-9_-]+$",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ],
            "description": "Type representing a component reference"
        },
        "ComponentRegistry": {
            "description": "Interface representing a component registry",
            "properties": {
                "components": {
                    "$ref": "#/definitions/Record<ComponentReference,Component>",
                    "description": "Map of component IDs to components"
                },
                "description": {
                    "description": "Description of this registry",
                    "type": "string"
                },
                "lastUpdated": {
                    "description": "Last updated timestamp",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "version": {
                    "description": "Version of this registry",
                    "type": "string"
                }
            },
            "required": [
                "components",
                "lastUpdated",
                "uuid",
                "version"
            ],
            "type": "object"
        },
        "ComponentScreeningJustification": {
            "description": "Interface for documenting component screening justifications",
            "properties": {
                "componentId": {
                    "$ref": "#/definitions/ComponentReference",
                    "description": "Component that was screened out"
                },
                "failureModes": {
                    "description": "Failure modes that were screened out",
                    "items": {
                        "$ref": "#/definitions/FailureModeType"
                    },
                    "type": "array"
                },
                "quantitativeJustification": {
                    "description": "Quantitative justification for screening",
                    "type": "string"
                },
                "screeningCriterion": {
                    "description": "Screening criterion used (a or b from SY-A20)",
                    "enum": [
                        "a",
                        "b"
                    ],
                    "type": "string"
                },
                "systemReference": {
                    "$ref": "#/definitions/SystemReference",
                    "description": "Reference to the system"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "componentId",
                "quantitativeJustification",
                "screeningCriterion",
                "systemReference",
                "uuid"
            ],
            "type": "object"
        },
        "ComponentState": {
            "description": "Possible states a component can be in during operation",
            "enum": [
                "degraded",
                "failed",
                "maintenance",
                "operational",
                "recovering"
            ],
            "type": "string"
        },
        "ComponentSuccessCriteriaDefinition": {
            "description": "Represents component-level success criteria.",
            "properties": {
                "analysisReferences": {
                    "description": "References to supporting analyses",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "componentId": {
                    "$ref": "#/definitions/ComponentReference",
                    "description": "Component identifier"
                },
                "description": {
                    "description": "Component description",
                    "type": "string"
                },
                "requiredPerformance": {
                    "description": "Required performance for success",
                    "type": "string"
                },
                "systemId": {
                    "description": "Reference to the system this component is part of",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "analysisReferences",
                "componentId",
                "description",
                "requiredPerformance",
                "systemId",
                "uuid"
            ],
            "type": "object"
        },
        "ComponentSuccessCriterion": {
            "description": "Represents a component-level success criterion.",
            "properties": {
                "componentReference": {
                    "description": "Reference to the component this criterion applies to",
                    "type": "string"
                },
                "criteriaText": {
                    "description": "The actual criteria statements",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Detailed description of the success criterion",
                    "type": "string"
                },
                "endState": {
                    "description": "The defined end state if applicable to this criterion",
                    "type": "string"
                },
                "engineeringBasisReferences": {
                    "description": "References to the engineering basis supporting this criterion",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "initiatingEventReferences": {
                    "description": "Links to related initiating events",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "performanceRequirements": {
                    "description": "Component performance requirements",
                    "type": "string"
                },
                "plantOperatingStateReferences": {
                    "description": "Links to related plant operating states",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "componentReference",
                "criteriaText",
                "engineeringBasisReferences",
                "name",
                "performanceRequirements",
                "uuid"
            ],
            "type": "object"
        },
        "ComponentTimeline": {
            "description": "Interface representing a component's behavior over time.\nTracks changes in state, applicable failure modes, and resource consumption.",
            "properties": {
                "applicablePOSs": {
                    "description": "Applicable plant operating states for this timeline",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "componentId": {
                    "$ref": "#/definitions/ComponentReference",
                    "description": "Component identifier within the system"
                },
                "depletionModelId": {
                    "description": "Reference to applicable depletion model, if any",
                    "type": "string"
                },
                "description": {
                    "description": "Description of this timeline",
                    "type": "string"
                },
                "phases": {
                    "description": "Temporal phases making up this timeline",
                    "items": {
                        "$ref": "#/definitions/TemporalPhase"
                    },
                    "type": "array"
                },
                "systemReference": {
                    "$ref": "#/definitions/SystemReference",
                    "description": "Reference to the system this component belongs to"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "componentId",
                "phases",
                "systemReference",
                "uuid"
            ],
            "type": "object"
        },
        "ComputerCodeValidation": {
            "description": "Interface for computer code verification and validation.",
            "properties": {
                "codeVersion": {
                    "description": "Code version",
                    "type": "string"
                },
                "computerCode": {
                    "description": "Computer code name",
                    "type": "string"
                },
                "experimentalValidation": {
                    "description": "Validation against experimental data",
                    "items": {
                        "properties": {
                            "experimentDescription": {
                                "description": "Experiment description",
                                "type": "string"
                            },
                            "reference": {
                                "description": "Reference to validation documentation",
                                "type": "string"
                            },
                            "validationResults": {
                                "description": "Validation results",
                                "type": "string"
                            }
                        },
                        "required": [
                            "experimentDescription",
                            "reference",
                            "validationResults"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "limitations": {
                    "description": "Code limitations",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "phenomenaValidation": {
                    "description": "Validation for specific physical phenomena",
                    "items": {
                        "properties": {
                            "phenomenonDescription": {
                                "description": "Phenomenon description",
                                "type": "string"
                            },
                            "reference": {
                                "description": "Reference to validation documentation",
                                "type": "string"
                            },
                            "validationResults": {
                                "description": "Validation results",
                                "type": "string"
                            }
                        },
                        "required": [
                            "phenomenonDescription",
                            "reference",
                            "validationResults"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "plantSpecificValidation": {
                    "description": "Validation against plant-specific benchmarks",
                    "items": {
                        "properties": {
                            "benchmarkDescription": {
                                "description": "Benchmark description",
                                "type": "string"
                            },
                            "reference": {
                                "description": "Reference to validation documentation",
                                "type": "string"
                            },
                            "validationResults": {
                                "description": "Validation results",
                                "type": "string"
                            }
                        },
                        "required": [
                            "benchmarkDescription",
                            "reference",
                            "validationResults"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "verificationDocumentation": {
                    "description": "Verification documentation",
                    "type": "string"
                }
            },
            "required": [
                "codeVersion",
                "computerCode",
                "limitations",
                "name",
                "phenomenaValidation",
                "uuid",
                "verificationDocumentation"
            ],
            "type": "object"
        },
        "ConsequenceQuantificationAnalysis": {
            "description": "Represents the quantification of radiological consequences.",
            "properties": {
                "consequenceCodesUsed": {
                    "description": "Models and computer codes used to perform the radiological consequence analysis.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "economicFactorsConsidered": {
                    "description": "Economic factors considered in the consequence analysis.\nSupports **RCQ-A1**.",
                    "properties": {
                        "costCategories": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "timeHorizon": {
                            "type": "string"
                        },
                        "valuationApproach": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "eventSequenceConsequences": {
                    "description": "List of event sequence families and their associated radiological consequences.\nRequired by **RCQ-A3**.",
                    "items": {
                        "properties": {
                            "consequenceMetric": {
                                "type": "string"
                            },
                            "consequences": {
                                "$ref": "#/definitions/Record<string,number>"
                            },
                            "eventSequenceFamily": {
                                "$ref": "#/definitions/EventSequenceFamilyReference"
                            },
                            "meanValue": {
                                "type": "number"
                            },
                            "releaseCategoryReference": {
                                "$ref": "#/definitions/ReleaseCategoryReference_1",
                                "description": "Reference to the release category associated with this event sequence family.\nThis provides a link to the mechanistic source term analysis."
                            },
                            "riskIntegrationInsights": {
                                "description": "Insights from risk integration, if available.\nThis may be populated based on feedback from risk integration.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "riskSignificance": {
                                "description": "Risk significance level determined by risk integration, if available.\nThis may be populated based on feedback from risk integration.",
                                "enum": [
                                    "HIGH",
                                    "LOW",
                                    "MEDIUM"
                                ],
                                "type": "string"
                            },
                            "sourceTermReference": {
                                "$ref": "#/definitions/SourceTermDefinitionReference",
                                "description": "Reference to the source term definition associated with this event sequence family.\nThis provides a link to the mechanistic source term analysis."
                            },
                            "uncertainty": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "consequences",
                            "eventSequenceFamily"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "healthEffectsConsidered": {
                    "description": "Health effects considered in the consequence analysis.\nSupports **RCRE-A2(c)** and **RCRE-B2**.",
                    "properties": {
                        "doseResponseApproach": {
                            "type": "string"
                        },
                        "earlyEffects": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "latentEffects": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "modelAndCodeLimitations": {
                    "description": "Features and limitations of the models and codes used for consequence analysis that could impact the results.\nRequired by **RCQ-A2**.",
                    "items": {
                        "properties": {
                            "code": {
                                "type": "string"
                            },
                            "feature": {
                                "type": "string"
                            },
                            "justification": {
                                "type": "string"
                            },
                            "limitation": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "feature",
                            "limitation"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "riskIntegrationFeedback": {
                    "description": "Feedback received from risk integration.\nThis field contains feedback from risk integration that should be considered\nin future revisions of the radiological consequence analysis.",
                    "properties": {
                        "analysisId": {
                            "description": "ID of the risk integration analysis that provided the feedback",
                            "type": "string"
                        },
                        "feedbackDate": {
                            "description": "Date the feedback was received",
                            "type": "string"
                        },
                        "generalFeedback": {
                            "description": "General feedback on the consequence analysis",
                            "type": "string"
                        },
                        "metricFeedback": {
                            "description": "Feedback on consequence metrics",
                            "items": {
                                "properties": {
                                    "insights": {
                                        "description": "Insights from risk integration",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "metric": {
                                        "description": "Consequence metric",
                                        "type": "string"
                                    },
                                    "recommendations": {
                                        "description": "Recommendations for improving the consequence metric",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "riskSignificance": {
                                        "description": "Risk significance level determined by risk integration",
                                        "enum": [
                                            "HIGH",
                                            "LOW",
                                            "MEDIUM"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "metric"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "response": {
                            "description": "Response to the feedback",
                            "properties": {
                                "changes": {
                                    "description": "Changes made or planned in response to the feedback",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "description": {
                                    "description": "Description of how the feedback was or will be addressed",
                                    "type": "string"
                                },
                                "status": {
                                    "description": "Status of the response",
                                    "enum": [
                                        "COMPLETED",
                                        "IN_PROGRESS",
                                        "PENDING"
                                    ],
                                    "type": "string"
                                }
                            },
                            "required": [
                                "description",
                                "status"
                            ],
                            "type": "object"
                        }
                    },
                    "required": [
                        "analysisId"
                    ],
                    "type": "object"
                },
                "riskMetricMapping": {
                    "description": "Mapping between consequence metrics and risk metrics used in risk integration.\nThis provides a direct link between radiological consequence analysis and risk integration.",
                    "items": {
                        "properties": {
                            "consequenceMetric": {
                                "description": "Consequence metric from this analysis",
                                "type": "string"
                            },
                            "mappingDescription": {
                                "description": "Description of how the consequence metric is used in risk integration",
                                "type": "string"
                            },
                            "riskMetric": {
                                "description": "Corresponding risk metric in risk integration",
                                "type": "string"
                            },
                            "transformations": {
                                "description": "Any transformations or adjustments applied to the consequence metric\nwhen used in risk integration",
                                "type": "string"
                            }
                        },
                        "required": [
                            "consequenceMetric",
                            "mappingDescription",
                            "riskMetric"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "selectedMetrics": {
                    "description": "Selected consequence metrics for the analysis.\nRequired by **RCQ-A1**.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "supportingDocumentationReferences": {
                    "description": "References to documentation of the input data, models, assumptions, and results of the Consequence Quantification analysis.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uncertaintyCharacterization": {
                    "description": "Characterization of uncertainties in the Radiological Consequence Analysis.",
                    "type": "string"
                }
            },
            "required": [
                "consequenceCodesUsed",
                "eventSequenceConsequences",
                "modelAndCodeLimitations",
                "selectedMetrics"
            ],
            "type": "object"
        },
        "ConsistencyVerification": {
            "description": "Interface representing consistency verification with plant design and operation.",
            "properties": {
                "designBasesVerification": {
                    "description": "Verification against design bases",
                    "properties": {
                        "description": {
                            "description": "Description of consistency or inconsistencies",
                            "type": "string"
                        },
                        "isConsistent": {
                            "description": "Is consistent with design bases",
                            "type": "boolean"
                        },
                        "references": {
                            "description": "References to design bases documents",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "description",
                        "isConsistent",
                        "references"
                    ],
                    "type": "object"
                },
                "licensingBasesVerification": {
                    "description": "Verification against licensing bases",
                    "properties": {
                        "description": {
                            "description": "Description of consistency or inconsistencies",
                            "type": "string"
                        },
                        "isConsistent": {
                            "description": "Is consistent with licensing bases",
                            "type": "boolean"
                        },
                        "references": {
                            "description": "References to licensing bases documents",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "description",
                        "isConsistent",
                        "references"
                    ],
                    "type": "object"
                },
                "operationalPracticesVerification": {
                    "description": "Verification against operational practices",
                    "properties": {
                        "description": {
                            "description": "Description of consistency or inconsistencies",
                            "type": "string"
                        },
                        "isConsistent": {
                            "description": "Is consistent with operational practices",
                            "type": "boolean"
                        },
                        "references": {
                            "description": "References to operational procedures",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "description",
                        "isConsistent",
                        "references"
                    ],
                    "type": "object"
                },
                "successCriteriaId": {
                    "$ref": "#/definitions/SuccessCriteriaId",
                    "description": "Success criteria being verified"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "designBasesVerification",
                "licensingBasesVerification",
                "operationalPracticesVerification",
                "successCriteriaId",
                "uuid"
            ],
            "type": "object"
        },
        "ConvergenceAnalysis": {
            "description": "Convergence analysis for event sequence quantification",
            "properties": {
                "basisForSelection": {
                    "description": "Basis for selecting the final truncation value",
                    "type": "string"
                },
                "convergenceDemonstration": {
                    "description": "Demonstration of convergence",
                    "type": "string"
                },
                "finalTruncationValue": {
                    "description": "Final truncation value used",
                    "type": "number"
                },
                "frequencyAtTruncation": {
                    "additionalProperties": false,
                    "description": "Total frequency at each truncation level",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "percentageChangeAtTruncation": {
                    "additionalProperties": false,
                    "description": "Percentage change between truncation levels",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "truncationMethod": {
                    "$ref": "#/definitions/TruncationMethod",
                    "description": "Method used for truncation"
                },
                "truncationProgression": {
                    "description": "Progression of truncation values tested",
                    "items": {
                        "type": "number"
                    },
                    "type": "array"
                },
                "truncationSensitivity": {
                    "description": "Sensitivity of results to truncation value",
                    "type": "string"
                }
            },
            "required": [
                "basisForSelection",
                "convergenceDemonstration",
                "finalTruncationValue",
                "frequencyAtTruncation",
                "percentageChangeAtTruncation",
                "truncationMethod",
                "truncationProgression"
            ],
            "type": "object"
        },
        "DataAnalysis": {
            "description": "Interface representing the main Data Analysis container\n\nThe objectives of Data Analysis ensure that:\n- (a) parameter boundaries are defined;\n- (b) components are appropriately grouped;\n- (c) parameter data are consistent with parameter definitions;\n- (d) relevant generic industry and plant-specific evidence are represented in the parameter estimation, including addressing uncertainties;\n- (e) the Data Analysis is documented to provide traceability of the work.",
            "properties": {
                "additionalMetadata": {
                    "description": "Additional metadata specific to Data Analysis",
                    "properties": {
                        "assumptions": {
                            "description": "Data analysis specific assumptions",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "limitations": {
                            "description": "Data analysis specific limitations",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "commonAssumptions": {
                    "description": "Common assumptions that apply across this technical element\nUsing the standardized BaseAssumption interface",
                    "items": {
                        "$ref": "#/definitions/BaseAssumption"
                    },
                    "type": "array"
                },
                "componentGroupings": {
                    "description": "Component groupings for homogeneous populations",
                    "items": {
                        "$ref": "#/definitions/ComponentGrouping"
                    },
                    "type": "array"
                },
                "created": {
                    "description": "The date the technical element was created",
                    "type": "string"
                },
                "dataConsistencyChecks": {
                    "description": "Data consistency checks performed",
                    "items": {
                        "$ref": "#/definitions/DataConsistencyCheck"
                    },
                    "type": "array"
                },
                "data_parameters": {
                    "description": "Array of data analysis parameters that are part of this analysis.\nEach parameter represents a specific data point or measurement being analyzed.",
                    "items": {
                        "$ref": "#/definitions/DataAnalysisParameter"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "The description of the technical element",
                    "type": "string"
                },
                "documentation": {
                    "description": "Detailed documentation of the data analysis process",
                    "properties": {
                        "modelUncertainty": {
                            "$ref": "#/definitions/ModelUncertaintyDocumentation_2",
                            "description": "Model uncertainty documentation"
                        },
                        "peerReview": {
                            "$ref": "#/definitions/PeerReviewDocumentation_1",
                            "description": "Peer review documentation"
                        },
                        "preOperationalAssumptions": {
                            "$ref": "#/definitions/PreOperationalAssumptionsDocumentation_1",
                            "description": "Pre-operational assumptions"
                        },
                        "processDocumentation": {
                            "$ref": "#/definitions/DataAnalysisDocumentation",
                            "description": "Process and results documentation"
                        }
                    },
                    "type": "object"
                },
                "exportImportConfig": {
                    "$ref": "#/definitions/DataAnalysisExportImport",
                    "description": "Export/import configuration"
                },
                "externalDataSources": {
                    "description": "External data sources used in the analysis",
                    "items": {
                        "$ref": "#/definitions/ExternalDataSource"
                    },
                    "type": "array"
                },
                "modified": {
                    "description": "The date the technical element was last modified",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "outlierComponents": {
                    "description": "Components identified as outliers and excluded from groupings",
                    "items": {
                        "$ref": "#/definitions/OutlierComponent"
                    },
                    "type": "array"
                },
                "owner": {
                    "description": "The owner of the technical element",
                    "type": "string"
                },
                "references": {
                    "description": "References to other technical elements",
                    "items": {
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "technicalElementId": {
                                "type": "string"
                            },
                            "technicalElementType": {
                                "$ref": "#/definitions/TechnicalElementTypes"
                            }
                        },
                        "required": [
                            "description",
                            "technicalElementId",
                            "technicalElementType"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "sensitivityStudies": {
                    "description": "Sensitivity studies performed as part of this analysis",
                    "items": {
                        "$ref": "#/definitions/SensitivityStudy"
                    },
                    "type": "array"
                },
                "status": {
                    "description": "The status of the technical element",
                    "enum": [
                        "APPROVED",
                        "DEPRECATED",
                        "DRAFT",
                        "REVIEW"
                    ],
                    "type": "string"
                },
                "tags": {
                    "description": "Tags associated with the technical element",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "const": "data-analysis",
                    "description": "The type of technical element",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "validationRules": {
                    "$ref": "#/definitions/ParameterValidationRules",
                    "description": "Validation rules for parameters"
                },
                "version": {
                    "description": "The version of the technical element",
                    "type": "string"
                }
            },
            "required": [
                "created",
                "data_parameters",
                "modified",
                "name",
                "type",
                "uuid",
                "version"
            ],
            "type": "object"
        },
        "DataAnalysisDocumentation": {
            "description": "Interface representing detailed documentation of the data analysis process.\nThis directly implements DA-E1 requirements (a)-(k).",
            "properties": {
                "basicEventProbabilityModels": {
                    "description": "Models used to evaluate basic event probabilities",
                    "items": {
                        "properties": {
                            "basicEventId": {
                                "description": "Basic event ID",
                                "type": "string"
                            },
                            "justification": {
                                "description": "Justification for model selection",
                                "type": "string"
                            },
                            "model": {
                                "description": "Probability model used",
                                "type": "string"
                            }
                        },
                        "required": [
                            "basicEventId",
                            "model"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "bayesianPriorRationales": {
                    "description": "Rationale for prior distributions in Bayesian updates",
                    "items": {
                        "properties": {
                            "parameterId": {
                                "description": "Parameter ID",
                                "type": "string"
                            },
                            "priorDistribution": {
                                "description": "Prior distribution",
                                "type": "string"
                            },
                            "rationale": {
                                "description": "Rationale",
                                "type": "string"
                            }
                        },
                        "required": [
                            "parameterId",
                            "priorDistribution",
                            "rationale"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "ccfProbabilityBasis": {
                    "description": "Basis for CCF probability estimates",
                    "items": {
                        "properties": {
                            "ccfParameterId": {
                                "description": "CCF parameter ID",
                                "type": "string"
                            },
                            "estimationMethod": {
                                "description": "Estimation method",
                                "type": "string"
                            },
                            "mappingJustification": {
                                "description": "Justification for data mapping",
                                "type": "string"
                            }
                        },
                        "required": [
                            "ccfParameterId",
                            "estimationMethod"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "componentGroupingDocumentation": {
                    "description": "Documentation of component grouping and outlier handling",
                    "items": {
                        "properties": {
                            "groupId": {
                                "description": "Group ID",
                                "type": "string"
                            },
                            "groupingCriteria": {
                                "description": "Grouping criteria description",
                                "type": "string"
                            },
                            "outlierExclusionJustifications": {
                                "description": "Justification for outlier exclusions",
                                "items": {
                                    "properties": {
                                        "alternativeTreatment": {
                                            "description": "Alternative treatment in the analysis",
                                            "type": "string"
                                        },
                                        "componentId": {
                                            "description": "Component ID - references a component within SystemDefinition.modeledComponentsAndFailures",
                                            "type": "string"
                                        },
                                        "detailedJustification": {
                                            "description": "Detailed justification",
                                            "type": "string"
                                        },
                                        "exclusionReason": {
                                            "description": "Reason for exclusion",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "alternativeTreatment",
                                        "componentId",
                                        "detailedJustification",
                                        "exclusionReason"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "outlierIdentificationMethodology": {
                                "description": "Outlier identification methodology",
                                "type": "string"
                            },
                            "supportingAnalyses": {
                                "description": "References to supporting analyses",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "groupId",
                            "groupingCriteria",
                            "outlierExclusionJustifications",
                            "outlierIdentificationMethodology"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "dataCollectionPeriods": {
                    "description": "Time periods for plant-specific data collection",
                    "items": {
                        "properties": {
                            "censoringJustification": {
                                "description": "Justification for censoring",
                                "type": "string"
                            },
                            "endDate": {
                                "description": "End date",
                                "type": "string"
                            },
                            "parameterId": {
                                "description": "Parameter ID",
                                "type": "string"
                            },
                            "startDate": {
                                "description": "Start date",
                                "type": "string"
                            }
                        },
                        "required": [
                            "endDate",
                            "parameterId",
                            "startDate"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "dataExclusionJustifications": {
                    "description": "Justification for exclusion of any data",
                    "items": {
                        "properties": {
                            "excludedData": {
                                "description": "Excluded data description",
                                "type": "string"
                            },
                            "justification": {
                                "description": "Justification for exclusion",
                                "type": "string"
                            },
                            "parameterId": {
                                "description": "Parameter ID",
                                "type": "string"
                            }
                        },
                        "required": [
                            "excludedData",
                            "justification",
                            "parameterId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "genericParameterRationales": {
                    "description": "Rationale for using generic parameter estimates",
                    "items": {
                        "properties": {
                            "operatingStates": {
                                "description": "Operating state(s)",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "parameterId": {
                                "description": "Parameter ID",
                                "type": "string"
                            },
                            "rationale": {
                                "description": "Rationale",
                                "type": "string"
                            }
                        },
                        "required": [
                            "operatingStates",
                            "parameterId",
                            "rationale"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "genericParameterSources": {
                    "description": "Sources for generic parameter estimates",
                    "items": {
                        "properties": {
                            "parameterId": {
                                "description": "Parameter ID",
                                "type": "string"
                            },
                            "reference": {
                                "description": "Reference",
                                "type": "string"
                            },
                            "source": {
                                "description": "Data source",
                                "type": "string"
                            }
                        },
                        "required": [
                            "parameterId",
                            "source"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "operatingStateDataJustifications": {
                    "description": "Justification for full power or other plant operating state data",
                    "items": {
                        "properties": {
                            "justification": {
                                "description": "Justification",
                                "type": "string"
                            },
                            "operatingState": {
                                "description": "Operating state",
                                "type": "string"
                            },
                            "parameterId": {
                                "description": "Parameter ID",
                                "type": "string"
                            }
                        },
                        "required": [
                            "justification",
                            "operatingState",
                            "parameterId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "parameterEstimates": {
                    "description": "Parameter estimates with uncertainty characterization",
                    "items": {
                        "properties": {
                            "estimate": {
                                "description": "Estimate value",
                                "type": "number"
                            },
                            "parameterId": {
                                "description": "Parameter ID",
                                "type": "string"
                            },
                            "uncertaintyCharacterization": {
                                "description": "Uncertainty characterization",
                                "type": "string"
                            }
                        },
                        "required": [
                            "estimate",
                            "parameterId",
                            "uncertaintyCharacterization"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "plantSpecificDataSources": {
                    "description": "Plant-specific and operating state-specific data sources",
                    "items": {
                        "properties": {
                            "operatingState": {
                                "description": "Operating state(s)",
                                "type": "string"
                            },
                            "parameterId": {
                                "description": "Parameter ID",
                                "type": "string"
                            },
                            "source": {
                                "description": "Data source",
                                "type": "string"
                            },
                            "timePeriod": {
                                "description": "Time period",
                                "type": "string"
                            }
                        },
                        "required": [
                            "parameterId",
                            "source"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "processDescription": {
                    "description": "Description of the data analysis process\nSpecifies inputs, methods, and results",
                    "type": "string"
                },
                "systemComponentBoundaries": {
                    "description": "System and component boundaries used",
                    "items": {
                        "properties": {
                            "boundaries": {
                                "description": "Boundaries array - directly maps to SystemDefinition.boundaries when \nreferencing a system",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "boundaryDescription": {
                                "description": "Boundary description - should align with SystemDefinition.boundaries \nwhen referencing a system, or with specific component boundaries",
                                "type": "string"
                            },
                            "componentId": {
                                "description": "Component ID - references a component within SystemDefinition.modeledComponentsAndFailures",
                                "type": "string"
                            },
                            "references": {
                                "description": "Reference documents",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "systemId": {
                                "description": "System ID - references SystemDefinition",
                                "type": "string"
                            }
                        },
                        "required": [
                            "boundaries",
                            "boundaryDescription",
                            "systemId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "basicEventProbabilityModels",
                "bayesianPriorRationales",
                "ccfProbabilityBasis",
                "dataCollectionPeriods",
                "dataExclusionJustifications",
                "genericParameterRationales",
                "genericParameterSources",
                "name",
                "operatingStateDataJustifications",
                "parameterEstimates",
                "plantSpecificDataSources",
                "processDescription",
                "systemComponentBoundaries",
                "uuid"
            ],
            "type": "object"
        },
        "DataAnalysisExportImport": {
            "description": "Interface for export/import of data analysis parameters",
            "properties": {
                "exportConfig": {
                    "description": "Export configuration",
                    "properties": {
                        "includeDocumentation": {
                            "description": "Include documentation references",
                            "type": "boolean"
                        },
                        "includeSourceData": {
                            "description": "Include source data",
                            "type": "boolean"
                        },
                        "includeUncertainty": {
                            "description": "Include uncertainty information",
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "includeDocumentation",
                        "includeSourceData",
                        "includeUncertainty"
                    ],
                    "type": "object"
                },
                "exportFormat": {
                    "description": "Export format specification",
                    "enum": [
                        "CSV",
                        "JSON",
                        "XML"
                    ],
                    "type": "string"
                },
                "externalSourceMapping": {
                    "description": "Mapping for external data sources",
                    "items": {
                        "properties": {
                            "sourceField": {
                                "description": "Source field",
                                "type": "string"
                            },
                            "targetField": {
                                "description": "Target field",
                                "type": "string"
                            },
                            "transformation": {
                                "description": "Transformation logic",
                                "type": "string"
                            }
                        },
                        "required": [
                            "sourceField",
                            "targetField"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "importValidation": {
                    "description": "Import validation rules",
                    "properties": {
                        "errorHandling": {
                            "description": "Error handling approach",
                            "enum": [
                                "LENIENT",
                                "STRICT"
                            ],
                            "type": "string"
                        },
                        "requiredFields": {
                            "description": "Required fields",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "validationChecks": {
                            "description": "Validation checks",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "errorHandling",
                        "requiredFields",
                        "validationChecks"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "exportConfig",
                "exportFormat",
                "externalSourceMapping",
                "importValidation"
            ],
            "type": "object"
        },
        "DataAnalysisParameter": {
            "description": "Data Analysis parameter with specific requirements\n\nThis interface implements several PRA standard requirements:\n- DA-A2: DEFINE failure modes and success criteria\n- DA-A3: USE an appropriate probability model for each basic event\n- HLR-DA-B: Grouping components into a homogeneous population",
            "properties": {
                "alternatives": {
                    "description": "Alternative approaches or parameters that could be used.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "assumptions": {
                    "description": "All assumptions made in the analysis, including both general and specific assumptions.",
                    "items": {
                        "$ref": "#/definitions/Assumption_1"
                    },
                    "type": "array"
                },
                "basicEventId": {
                    "description": "Links to basic event this parameter is associated with",
                    "type": "string"
                },
                "componentBoundaries": {
                    "description": "Specific component boundaries for this parameter",
                    "properties": {
                        "boundaries": {
                            "description": "Boundaries array - directly maps to SystemDefinition.boundaries when \nreferencing a system",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "componentId": {
                            "description": "Component ID - references a component within SystemDefinition.modeledComponentsAndFailures",
                            "type": "string"
                        },
                        "description": {
                            "description": "Boundary description",
                            "type": "string"
                        },
                        "excludedParts": {
                            "description": "Parts excluded from the boundary",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "includedParts": {
                            "description": "Parts included within the boundary - more detailed than boundaries",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "systemId": {
                            "description": "System ID - references SystemDefinition",
                            "type": "string"
                        }
                    },
                    "required": [
                        "boundaries",
                        "description",
                        "includedParts",
                        "systemId"
                    ],
                    "type": "object"
                },
                "data_sources": {
                    "description": "All data sources used in the analysis, including both general and specific sources.",
                    "items": {
                        "$ref": "#/definitions/DataSource"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Detailed description of the parameter",
                    "type": "string"
                },
                "failureMode": {
                    "description": "Defines how the component can fail.",
                    "type": "string"
                },
                "logicModelInfo": {
                    "description": "Logic model information",
                    "properties": {
                        "basicEventBoundary": {
                            "description": "The basic event boundary",
                            "type": "string"
                        },
                        "evaluationModel": {
                            "description": "The model used for evaluation",
                            "type": "string"
                        },
                        "modelType": {
                            "description": "The logic model type",
                            "type": "string"
                        }
                    },
                    "required": [
                        "basicEventBoundary",
                        "evaluationModel",
                        "modelType"
                    ],
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "parameterType": {
                    "$ref": "#/definitions/ParameterType",
                    "description": "The type of parameter being analyzed."
                },
                "plant_operating_state": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/PlantOperatingStatesTable"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Represents the plant operating state for which the parameter applies.\nThis can be either a reference to a specific plant operating state by ID,\nor a complete plant operating states table."
                },
                "probability_model": {
                    "description": "The probability model used to evaluate event probability.",
                    "enum": [
                        "beta",
                        "binomial",
                        "exponential",
                        "gamma",
                        "lognormal",
                        "normal",
                        "point_estimate",
                        "poisson",
                        "uniform",
                        "weibull"
                    ],
                    "type": "string"
                },
                "successCriteria": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "$ref": "#/definitions/SuccessCriteriaId",
                            "description": "Type for success criteria IDs.\nFormat: SC-[SYSTEM]-[NUMBER]\nExample: SC-RCIC-001"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Defines the criteria for success."
                },
                "systemDefinitionId": {
                    "description": "Reference to the system definition this parameter is associated with.\nThis provides access to the component's boundary and grouping information.",
                    "type": "string"
                },
                "testMaintenanceId": {
                    "description": "Links to test/maintenance information this parameter is associated with",
                    "type": "string"
                },
                "uncertainty": {
                    "$ref": "#/definitions/Uncertainty",
                    "description": "Uncertainty information for the parameter."
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "value": {
                    "allOf": [
                        {
                            "properties": {
                                "typia.tag": {
                                    "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                    "properties": {
                                        "exclusive": {
                                            "items": [
                                                {
                                                    "const": "minimum",
                                                    "type": "string"
                                                },
                                                {
                                                    "const": "exclusiveMinimum",
                                                    "type": "string"
                                                }
                                            ],
                                            "maxItems": 2,
                                            "minItems": 2,
                                            "type": "array"
                                        },
                                        "kind": {
                                            "const": "minimum",
                                            "type": "string"
                                        },
                                        "schema": {
                                            "properties": {
                                                "minimum": {
                                                    "const": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "minimum"
                                            ],
                                            "type": "object"
                                        },
                                        "target": {
                                            "const": "number",
                                            "type": "string"
                                        },
                                        "validate": {
                                            "const": "0 <= $input",
                                            "type": "string"
                                        },
                                        "value": {
                                            "const": 0,
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "exclusive",
                                        "kind",
                                        "schema",
                                        "target",
                                        "validate",
                                        "value"
                                    ],
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "description": "The estimated value for the parameter"
                }
            },
            "required": [
                "name",
                "parameterType",
                "uuid",
                "value"
            ],
            "type": "object"
        },
        "DataConsistencyCheck": {
            "description": "Interface for data consistency verification",
            "properties": {
                "consistencyAssessment": {
                    "description": "Consistency assessment",
                    "enum": [
                        "CONSISTENT",
                        "INCONSISTENT",
                        "PARTIALLY_CONSISTENT"
                    ],
                    "type": "string"
                },
                "dataSourceId": {
                    "description": "Data source being checked against",
                    "type": "string"
                },
                "discrepancies": {
                    "description": "Discrepancies found",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "parameterId": {
                    "description": "Parameter ID being checked",
                    "type": "string"
                },
                "resolutionActions": {
                    "description": "Resolution actions for discrepancies",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "verificationDate": {
                    "description": "Verification date",
                    "type": "string"
                },
                "verificationMethod": {
                    "description": "Verification method",
                    "type": "string"
                },
                "verifierId": {
                    "description": "Verifier name or ID",
                    "type": "string"
                }
            },
            "required": [
                "consistencyAssessment",
                "dataSourceId",
                "parameterId",
                "uuid",
                "verificationDate",
                "verificationMethod",
                "verifierId"
            ],
            "type": "object"
        },
        "DataSource": {
            "description": "Interface representing data sources and their context",
            "properties": {
                "applicabilityAssessment": {
                    "description": "Applicability assessment of this data source to the parameter",
                    "type": "string"
                },
                "context": {
                    "description": "The context or type of the data source (e.g., \"Industry standard\", \"Plant specific\")",
                    "type": "string"
                },
                "documentationReferences": {
                    "description": "Reference to supporting documentation, technical reports or standards",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "notes": {
                    "description": "Any additional notes about the data source",
                    "type": "string"
                },
                "source": {
                    "description": "The source of the data (e.g., \"Plant maintenance records 2020-2023\")",
                    "type": "string"
                },
                "sourceType": {
                    "description": "Type of source (Generic industry, Plant-specific, Expert judgment)",
                    "enum": [
                        "EXPERT_JUDGMENT",
                        "GENERIC_INDUSTRY",
                        "PLANT_SPECIFIC"
                    ],
                    "type": "string"
                },
                "timePeriod": {
                    "description": "Time period covered by the data",
                    "properties": {
                        "endDate": {
                            "type": "string"
                        },
                        "startDate": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "endDate",
                        "startDate"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "source"
            ],
            "type": "object"
        },
        "DecayHeatRemovalSystems": {
            "description": "Interface representing decay heat removal systems.",
            "properties": {
                "primaryCoolingSystems": {
                    "$ref": "#/definitions/Record<string,SystemStatus>",
                    "description": "Primary cooling systems available"
                },
                "secondaryCoolingSystems": {
                    "$ref": "#/definitions/Record<string,SystemStatus>",
                    "description": "Secondary cooling systems available"
                }
            },
            "required": [
                "primaryCoolingSystems",
                "secondaryCoolingSystems"
            ],
            "type": "object"
        },
        "Dependency": {
            "description": "Interface representing a dependency between systems, components, or operator actions.\nUsed to define the relationships and dependencies in event sequences.",
            "properties": {
                "applicableInitiatingEvents": {
                    "description": "Applicable initiating events",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "applicablePlantOperatingStates": {
                    "description": "Applicable plant operating states",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "basis": {
                    "description": "Basis for the dependency",
                    "type": "string"
                },
                "dependedUponElement": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/SystemReference_1",
                            "description": "Type for system references.\nFormat: SYS-[NAME]\nExample: SYS-RCIC"
                        },
                        {
                            "$ref": "#/definitions/HumanActionReference_1",
                            "description": "Type for human action references.\nFormat: HRA-[NUMBER]\nExample: HRA-001"
                        }
                    ],
                    "description": "Element that is depended upon"
                },
                "dependencyType": {
                    "$ref": "#/definitions/DependencyType_1",
                    "description": "Type of dependency"
                },
                "dependentElement": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/SystemReference_1",
                            "description": "Type for system references.\nFormat: SYS-[NAME]\nExample: SYS-RCIC"
                        },
                        {
                            "$ref": "#/definitions/HumanActionReference_1",
                            "description": "Type for human action references.\nFormat: HRA-[NUMBER]\nExample: HRA-001"
                        }
                    ],
                    "description": "Element that depends on another element"
                },
                "description": {
                    "description": "Description of the dependency",
                    "type": "string"
                },
                "importanceLevel": {
                    "description": "Importance level of the dependency",
                    "enum": [
                        "HIGH",
                        "LOW",
                        "MEDIUM"
                    ],
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "dependedUponElement",
                "dependencyType",
                "dependentElement",
                "description",
                "uuid"
            ],
            "type": "object"
        },
        "DependencyRepresentation": {
            "description": "Representation of dependencies in event sequence quantification",
            "properties": {
                "commonCauseFailures": {
                    "description": "Treatment of common cause failures",
                    "properties": {
                        "ccfGroupsModeled": {
                            "description": "CCF groups modeled",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "modelingApproach": {
                            "description": "CCF modeling approach",
                            "type": "string"
                        },
                        "parameterBasis": {
                            "description": "CCF parameter basis",
                            "type": "string"
                        }
                    },
                    "required": [
                        "ccfGroupsModeled",
                        "modelingApproach",
                        "parameterBasis"
                    ],
                    "type": "object"
                },
                "dependenciesByType": {
                    "$ref": "#/definitions/Record<DependencyType,{treatmentDescription:string;modelingMethod:string;examples:string[];}>",
                    "description": "Dependencies by type"
                },
                "equipmentSurvivabilityAssessment": {
                    "$ref": "#/definitions/EquipmentSurvivabilityAssessment",
                    "description": "Assessment of equipment survivability under adverse conditions"
                },
                "humanFailureEventDependencies": {
                    "description": "Detailed human failure event dependencies in cutsets",
                    "items": {
                        "$ref": "#/definitions/HumanFailureEventDependency"
                    },
                    "type": "array"
                },
                "phenomenologicalDependencies": {
                    "description": "Dependencies in accident progression phenomena",
                    "properties": {
                        "basisForApproach": {
                            "description": "Basis for the approach",
                            "type": "string"
                        },
                        "modelingApproach": {
                            "description": "Modeling approach",
                            "type": "string"
                        },
                        "phenomenaConsidered": {
                            "description": "Phenomena considered",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "basisForApproach",
                        "modelingApproach",
                        "phenomenaConsidered"
                    ],
                    "type": "object"
                },
                "postInitiatorHFEDependencies": {
                    "description": "Treatment of post-initiator human error dependencies",
                    "properties": {
                        "dependencyMethod": {
                            "description": "Method for addressing dependencies",
                            "type": "string"
                        },
                        "dependentHFEExamples": {
                            "description": "Examples of dependent HFEs",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "methodBasis": {
                            "description": "Basis for the method",
                            "type": "string"
                        }
                    },
                    "required": [
                        "dependencyMethod",
                        "dependentHFEExamples",
                        "methodBasis"
                    ],
                    "type": "object"
                },
                "recoveryActionDependencies": {
                    "description": "Dependencies in recovery actions",
                    "properties": {
                        "dependenciesConsidered": {
                            "description": "Dependencies considered",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "modelingApproach": {
                            "description": "Modeling approach",
                            "type": "string"
                        },
                        "recoveryActionsModeled": {
                            "description": "Recovery actions modeled",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "dependenciesConsidered",
                        "modelingApproach",
                        "recoveryActionsModeled"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "commonCauseFailures",
                "dependenciesByType",
                "phenomenologicalDependencies",
                "postInitiatorHFEDependencies",
                "recoveryActionDependencies"
            ],
            "type": "object"
        },
        "DependencySearchMethodology": {
            "description": "Interface for systematic dependency search methodology.",
            "properties": {
                "dependencyTables": {
                    "description": "Dependency tables or matrices used in the analysis.",
                    "items": {
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "reference": {
                                "type": "string"
                            },
                            "tableId": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "description",
                            "tableId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the methodology used to search for dependencies.",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "reference": {
                    "description": "Reference to documentation of the search methodology.",
                    "type": "string"
                },
                "systemsAnalyzed": {
                    "description": "Systems analyzed for dependencies.",
                    "items": {
                        "$ref": "#/definitions/SystemReference"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "description",
                "name",
                "reference",
                "systemsAnalyzed",
                "uuid"
            ],
            "type": "object"
        },
        "DependencyType": {
            "description": "The types of system dependencies.",
            "enum": [
                "FUNCTIONAL",
                "SPATIAL",
                "ENVIRONMENTAL",
                "HUMAN",
                "OTHER"
            ],
            "type": "string"
        },
        "DependencyType_1": {
            "description": "The types of dependencies that can exist between systems, components, or operator actions.",
            "enum": [
                "FUNCTIONAL",
                "PHYSICAL",
                "HUMAN",
                "OPERATIONAL",
                "PHENOMENOLOGICAL",
                "COMMON_CAUSE"
            ],
            "type": "string"
        },
        "DepletionModel": {
            "description": "Interface for modeling resource depletion over time.\nUsed to track consumable resources that impact system availability.",
            "properties": {
                "associatedSystem": {
                    "$ref": "#/definitions/SystemReference",
                    "description": "Component or system using this resource"
                },
                "consumptionRate": {
                    "description": "Rate at which the resource is consumed",
                    "type": "number"
                },
                "depletionImpact": {
                    "description": "Whether depletion leads to immediate failure or degraded operation",
                    "enum": [
                        "degraded-operation",
                        "immediate-failure"
                    ],
                    "type": "string"
                },
                "description": {
                    "description": "Description of the resource",
                    "type": "string"
                },
                "initialQuantity": {
                    "description": "Initial quantity available",
                    "type": "number"
                },
                "resourceType": {
                    "description": "Type of resource being depleted",
                    "enum": [
                        "battery",
                        "coolant",
                        "fuel",
                        "other"
                    ],
                    "type": "string"
                },
                "units": {
                    "description": "Units of measurement for consumption rate",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "consumptionRate",
                "initialQuantity",
                "resourceType",
                "units",
                "uuid"
            ],
            "type": "object"
        },
        "DigitalInstrumentationAndControl": {
            "description": "Interface for digital instrumentation and control systems modeling.",
            "properties": {
                "assumptions": {
                    "description": "Assumptions made in modeling the digital I&C system.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the digital I&C system.",
                    "type": "string"
                },
                "failureModes": {
                    "description": "Failure modes considered for the digital I&C system.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "methodology": {
                    "description": "Methodology used for modeling the digital I&C system.",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "specialConsiderations": {
                    "description": "Specific concerns for digital I&C systems (e.g., software validation).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "systemReference": {
                    "$ref": "#/definitions/SystemReference",
                    "description": "System reference this digital I&C is associated with."
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "description",
                "methodology",
                "name",
                "systemReference",
                "uuid"
            ],
            "type": "object"
        },
        "DistributionType": {
            "description": "Enum representing the types of probability models used in data analysis.",
            "enum": [
                "exponential",
                "binomial",
                "normal",
                "lognormal",
                "weibull",
                "poisson",
                "uniform",
                "beta",
                "gamma",
                "point_estimate"
            ],
            "type": "string"
        },
        "DosimetryAnalysis": {
            "description": "Represents the analysis of radiation doses to individuals and populations.",
            "properties": {
                "dcfParameterUncertaintyCharacterisation": {
                    "description": "Characterisation of the uncertainty distribution of DCF parameters.\nRequired by **RCDO-C2**.",
                    "type": "string"
                },
                "dcfSource": {
                    "description": "The recognized source(s) used for Dose Conversion Factors (DCFs).\nRequired by **RCDO-A2**.",
                    "type": "string"
                },
                "dcfUncertainty": {
                    "description": "Sources of model uncertainty, related assumptions, and reasonable alternatives for DCFs.\nRequired by **RCDO-A10**.",
                    "properties": {
                        "alternatives": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "assumptions": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "sources": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "alternatives",
                        "assumptions",
                        "sources"
                    ],
                    "type": "object"
                },
                "doseAggregationMethod": {
                    "description": "Describes how organ doses are calculated and aggregated to determine effective dose or other relevant dose metrics.",
                    "type": "string"
                },
                "doseIntegrationPeriods": {
                    "description": "Specifies the time periods over which doses are integrated.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "dosimetryModelsUsed": {
                    "description": "The dosimetry models used in the analysis.",
                    "type": "string"
                },
                "exposurePathways": {
                    "description": "Identified exposure pathways considered in the analysis.\nRequired by **RCDO-A1**.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "occupancyConsiderations": {
                    "description": "Considerations for occupancy factors appropriate for receptor locations and activities.\nRelevant to **RCDO-A3**.",
                    "type": "string"
                },
                "radionuclideDecayConsideration": {
                    "description": "Describes how the dosimetry analysis accounts for the physical and radiological decay of radionuclides.",
                    "type": "string"
                },
                "receptorTypes": {
                    "description": "Identifies the age groups or receptor types for which doses are calculated.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "shieldingConsiderations": {
                    "description": "Considerations for shielding factors appropriate for receptor locations and activities.\nRelevant to **RCDO-A3**.",
                    "type": "string"
                }
            },
            "required": [
                "dcfSource",
                "dcfUncertainty",
                "exposurePathways"
            ],
            "type": "object"
        },
        "EndState": {
            "description": "The possible end states for an event sequence.\nThese represent the final outcome of an event sequence progression.",
            "enum": [
                "SUCCESSFUL_MITIGATION",
                "RADIONUCLIDE_RELEASE"
            ],
            "type": "string"
        },
        "EngineeringAnalysis": {
            "description": "Interface for engineering analysis used to establish success criteria.",
            "properties": {
                "analysisId": {
                    "description": "Analysis identifier",
                    "type": "string"
                },
                "analysisType": {
                    "$ref": "#/definitions/AnalysisType",
                    "description": "Type of analysis"
                },
                "analyst": {
                    "description": "Personnel who performed the analysis",
                    "type": "string"
                },
                "applicabilityToPlantConditions": {
                    "description": "Applicability to plant conditions",
                    "type": "string"
                },
                "codeVersion": {
                    "description": "Code version",
                    "type": "string"
                },
                "computerCode": {
                    "description": "Computer code used (if applicable)",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the analysis",
                    "type": "string"
                },
                "keyParametersAndResults": {
                    "$ref": "#/definitions/Record<string,string>",
                    "description": "Key parameters and results"
                },
                "limitations": {
                    "description": "Limitations of the analysis",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "referenceDocuments": {
                    "description": "Reference documents",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "supportedSuccessCriteria": {
                    "description": "Success criteria supported by this analysis",
                    "items": {
                        "$ref": "#/definitions/SuccessCriteriaId"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "validationVerificationBasis": {
                    "description": "Validation and verification basis",
                    "type": "string"
                }
            },
            "required": [
                "analysisId",
                "analysisType",
                "applicabilityToPlantConditions",
                "description",
                "keyParametersAndResults",
                "supportedSuccessCriteria",
                "uuid"
            ],
            "type": "object"
        },
        "EnvironmentalDesignBasisConsideration": {
            "description": "Minimal interface for environmental design basis considerations",
            "properties": {
                "components": {
                    "description": "Components that may operate beyond environmental design basis",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "environmentalConditions": {
                    "description": "Environmental conditions beyond design basis",
                    "type": "string"
                },
                "eventSequences": {
                    "description": "Event sequences where this may occur",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "systemReference": {
                    "$ref": "#/definitions/SystemReference",
                    "description": "Reference to the system"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "components",
                "environmentalConditions",
                "eventSequences",
                "systemReference",
                "uuid"
            ],
            "type": "object"
        },
        "EquipmentSurvivabilityAssessment": {
            "description": "Assessment of equipment survivability under adverse environmental conditions",
            "properties": {
                "assessmentResults": {
                    "description": "Results of the survivability assessment",
                    "items": {
                        "properties": {
                            "basis": {
                                "description": "Basis for the survivability determination",
                                "type": "string"
                            },
                            "equipmentId": {
                                "description": "Equipment identifier",
                                "type": "string"
                            },
                            "survives": {
                                "description": "Whether the equipment is expected to survive",
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "basis",
                            "equipmentId",
                            "survives"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "environmentalConditions": {
                    "description": "Environmental conditions considered in the assessment",
                    "items": {
                        "properties": {
                            "severity": {
                                "description": "Severity or range of the condition",
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of environmental condition (e.g., temperature, pressure, radiation)",
                                "type": "string"
                            }
                        },
                        "required": [
                            "severity",
                            "type"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "equipmentIds": {
                    "description": "Equipment identifiers for which survivability is assessed",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "survivabilityCriteria": {
                    "description": "Criteria used to determine survivability",
                    "type": "string"
                }
            },
            "required": [
                "assessmentResults",
                "environmentalConditions",
                "equipmentIds",
                "survivabilityCriteria"
            ],
            "type": "object"
        },
        "EventQuantUncertaintyAnalysis": {
            "description": "Comprehensive uncertainty analysis for event sequence quantification",
            "properties": {
                "correlations": {
                    "description": "Correlation between uncertainties, if modeled",
                    "items": {
                        "properties": {
                            "basis": {
                                "description": "Basis for the correlation",
                                "type": "string"
                            },
                            "correlationCoefficient": {
                                "description": "Correlation coefficient",
                                "type": "number"
                            },
                            "parameterIds": {
                                "description": "IDs of the correlated parameters",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "basis",
                            "correlationCoefficient",
                            "parameterIds"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "modelUncertainties": {
                    "description": "Model uncertainties considered \nThe concept of identifying, describing, and defining the treatment approach\nfor model uncertainties is relevant across various technical elements of a PRA.",
                    "items": {
                        "properties": {
                            "description": {
                                "description": "Description of the uncertainty",
                                "type": "string"
                            },
                            "impact": {
                                "description": "Impact on the model",
                                "type": "string"
                            },
                            "isQuantified": {
                                "description": "Whether the uncertainty is quantified",
                                "type": "boolean"
                            },
                            "treatmentApproach": {
                                "description": "How the uncertainty is addressed",
                                "type": "string"
                            },
                            "uncertaintyId": {
                                "description": "Uncertainty ID",
                                "type": "string"
                            }
                        },
                        "required": [
                            "description",
                            "impact",
                            "isQuantified",
                            "treatmentApproach",
                            "uncertaintyId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "numberOfSamples": {
                    "description": "Number of samples if using simulation \nSpecific to simulation-based propagation methods (like Monte Carlo and Latin Hypercube)\nand is a general parameter for such methods.",
                    "type": "number"
                },
                "parameterUncertainties": {
                    "description": "Parameter uncertainties considered",
                    "items": {
                        "properties": {
                            "basis": {
                                "description": "Basis for the distribution",
                                "type": "string"
                            },
                            "distributionParameters": {
                                "$ref": "#/definitions/Record<string,number>",
                                "description": "Distribution parameters"
                            },
                            "distributionType": {
                                "$ref": "#/definitions/DistributionType",
                                "description": "Distribution type"
                            },
                            "parameterId": {
                                "description": "Parameter name or ID",
                                "type": "string"
                            }
                        },
                        "required": [
                            "basis",
                            "distributionParameters",
                            "distributionType",
                            "parameterId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "propagationMethod": {
                    "description": "Uncertainty propagation method \nDefines the method used to propagate uncertainty, which is a general concept\napplicable across different types of uncertainty analysis within a PRA.",
                    "enum": [
                        "ANALYTICAL",
                        "LATIN_HYPERCUBE",
                        "MONTE_CARLO",
                        "OTHER"
                    ],
                    "type": "string"
                },
                "randomSeed": {
                    "description": "Seed value for random number generator if using simulation \nUsed in simulation-based uncertainty propagation to ensure reproducibility\nor to control the random number generation process.",
                    "type": "number"
                },
                "sensitivityStudies": {
                    "description": "Sensitivity studies for unquantified uncertainties \nSensitivity analysis is a general technique used to assess the impact\nof parameter variations or uncertainties on the results of an analysis.",
                    "items": {
                        "$ref": "#/definitions/SensitivityStudy"
                    },
                    "type": "array"
                },
                "stateOfKnowledgeCorrelation": {
                    "description": "State-of-knowledge correlation handling",
                    "properties": {
                        "correlatedParameters": {
                            "description": "Parameters for which state-of-knowledge correlation is considered",
                            "items": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "type": "array"
                        },
                        "handlingDescription": {
                            "description": "Description of how state-of-knowledge correlation is handled",
                            "type": "string"
                        },
                        "handlingMethod": {
                            "description": "Method used to account for state-of-knowledge correlation",
                            "enum": [
                                "EXPLICIT_CORRELATION_MATRIX",
                                "OTHER",
                                "PARAMETER_GROUPING",
                                "SAME_RANDOM_SEED"
                            ],
                            "type": "string"
                        },
                        "impactAssessment": {
                            "description": "Assessment of the impact of state-of-knowledge correlation on results",
                            "type": "string"
                        },
                        "isConsidered": {
                            "description": "Whether state-of-knowledge correlation is considered",
                            "type": "boolean"
                        },
                        "justificationIfNotConsidered": {
                            "description": "Justification if state-of-knowledge correlation is not considered",
                            "type": "string"
                        }
                    },
                    "required": [
                        "isConsidered"
                    ],
                    "type": "object"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "modelUncertainties",
                "parameterUncertainties",
                "propagationMethod",
                "stateOfKnowledgeCorrelation",
                "uuid"
            ],
            "type": "object"
        },
        "EventSequence": {
            "description": "Interface representing an event sequence.\nAn event sequence is a chronological progression of events from the initiating event\nto a specified end state.",
            "properties": {
                "dependencies": {
                    "description": "Dependencies between systems and operator actions in this sequence",
                    "items": {
                        "$ref": "#/definitions/Dependency"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the event sequence",
                    "type": "string"
                },
                "designInformation": {
                    "description": "Design information supporting this event sequence",
                    "items": {
                        "$ref": "#/definitions/EventSequenceDesignInformation"
                    },
                    "type": "array"
                },
                "endState": {
                    "$ref": "#/definitions/EndState",
                    "description": "End state of the sequence"
                },
                "frequency": {
                    "description": "Frequency of the sequence (per unit time)",
                    "properties": {
                        "distribution": {
                            "description": "Statistical distribution of the frequency",
                            "enum": [
                                "beta",
                                "binomial",
                                "exponential",
                                "gamma",
                                "lognormal",
                                "normal",
                                "point_estimate",
                                "poisson",
                                "uniform",
                                "weibull"
                            ],
                            "type": "string"
                        },
                        "distributionParameters": {
                            "$ref": "#/definitions/Record<string,number>",
                            "description": "Parameters of the distribution"
                        },
                        "mean": {
                            "$ref": "#/definitions/Frequency",
                            "description": "Mean value of the frequency"
                        },
                        "units": {
                            "$ref": "#/definitions/FrequencyUnit",
                            "description": "Units of the frequency"
                        }
                    },
                    "required": [
                        "mean",
                        "units"
                    ],
                    "type": "object"
                },
                "initiatingEventId": {
                    "description": "Reference to the initiating event that starts this sequence",
                    "type": "string"
                },
                "intermediateEndStates": {
                    "description": "Intermediate end states in this sequence",
                    "items": {
                        "$ref": "#/definitions/IntermediateEndState"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "operatorActions": {
                    "description": "Operator actions involved in the sequence",
                    "items": {
                        "$ref": "#/definitions/HumanActionReference_1"
                    },
                    "type": "array"
                },
                "phenomenologicalImpacts": {
                    "description": "Phenomenological impacts in this sequence",
                    "items": {
                        "$ref": "#/definitions/PhenomenologicalImpact"
                    },
                    "type": "array"
                },
                "plantOperatingStateId": {
                    "description": "Reference to the plant operating state in which this sequence occurs",
                    "type": "string"
                },
                "progression": {
                    "description": "Chronological progression of events in the sequence",
                    "type": "string"
                },
                "releaseCategoryId": {
                    "$ref": "#/definitions/ReleaseCategoryReference",
                    "description": "Reference to the release category if the end state is radionuclide release"
                },
                "screening": {
                    "description": "Screening status of the sequence",
                    "properties": {
                        "screeningBasis": {
                            "description": "Basis for screening decision",
                            "type": "string"
                        },
                        "screeningJustification": {
                            "description": "Justification for screening decision",
                            "type": "string"
                        },
                        "status": {
                            "$ref": "#/definitions/ScreeningStatus",
                            "description": "Screening status of the sequence"
                        }
                    },
                    "required": [
                        "status"
                    ],
                    "type": "object"
                },
                "sequenceFamilyId": {
                    "$ref": "#/definitions/EventSequenceFamilyReference",
                    "description": "Reference to the event sequence family this sequence belongs to"
                },
                "sequenceSpecificAssumptions": {
                    "description": "Assumptions specific to this sequence",
                    "items": {
                        "$ref": "#/definitions/Assumption_2"
                    },
                    "type": "array"
                },
                "successCriteriaIds": {
                    "description": "Success criteria applicable to this sequence",
                    "items": {
                        "$ref": "#/definitions/SuccessCriteriaId"
                    },
                    "type": "array"
                },
                "systemResponses": {
                    "$ref": "#/definitions/Record<SystemReference,SystemStatus>",
                    "description": "Systems involved in the sequence and their status"
                },
                "timing": {
                    "description": "Timing information for key events in the sequence",
                    "items": {
                        "$ref": "#/definitions/SequenceTiming"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "endState",
                "initiatingEventId",
                "name",
                "plantOperatingStateId",
                "uuid"
            ],
            "type": "object"
        },
        "EventSequenceAnalysis": {
            "description": "Interface representing the main Event Sequence Analysis container.\n\nThe objectives of Event Sequence Analysis ensure that:\n- (a) the sources of radioactive material, the barriers to radionuclide release, and the safety \n      functions necessary to protect each barrier for each source within the scope of the PRA \n      model are defined as a basis for the event sequence model development and described for \n      each plant operating state;\n- (b) plant-, design- and site-specific dependencies that impact significant event sequences \n      are represented in the event sequence structure;\n- (c) individual function successes, mission times, and time windows for operator actions for \n      each reactor-specific safety function and release phenomenon modeled in the event \n      sequences are accounted for;\n- (d) the Event Sequence Analysis is documented to provide traceability of the work.",
            "properties": {
                "additionalMetadata": {
                    "description": "Additional metadata specific to Event Sequence Analysis",
                    "properties": {
                        "traceability": {
                            "description": "Traceability information",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "commonAssumptions": {
                    "description": "Common assumptions that apply across this technical element\nUsing the standardized BaseAssumption interface",
                    "items": {
                        "$ref": "#/definitions/BaseAssumption"
                    },
                    "type": "array"
                },
                "created": {
                    "description": "The date the technical element was created",
                    "type": "string"
                },
                "dependencyModels": {
                    "description": "Dependency models used in the analysis",
                    "properties": {
                        "functionalDependencies": {
                            "description": "Functional dependency models",
                            "items": {
                                "$ref": "#/definitions/FunctionalDependencyModel"
                            },
                            "type": "array"
                        },
                        "humanDependencies": {
                            "description": "Human dependency models",
                            "items": {
                                "$ref": "#/definitions/HumanDependencyModel"
                            },
                            "type": "array"
                        },
                        "operationalDependencies": {
                            "description": "Operational dependency models",
                            "items": {
                                "$ref": "#/definitions/OperationalDependencyModel"
                            },
                            "type": "array"
                        },
                        "phenomenologicalDependencies": {
                            "description": "Phenomenological dependency models",
                            "items": {
                                "$ref": "#/definitions/PhenomenologicalDependencyModel"
                            },
                            "type": "array"
                        },
                        "systemInterfaces": {
                            "description": "System interface dependencies",
                            "items": {
                                "$ref": "#/definitions/SystemInterfaceDependency"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "description": {
                    "description": "The description of the technical element",
                    "type": "string"
                },
                "documentation": {
                    "description": "Documentation of the analysis",
                    "properties": {
                        "modelUncertaintyDocumentation": {
                            "$ref": "#/definitions/ModelUncertaintyDocumentation_3",
                            "description": "Model uncertainty documentation"
                        },
                        "peerReviewDocumentation": {
                            "$ref": "#/definitions/PeerReviewDocumentation_3",
                            "description": "Peer review documentation"
                        },
                        "preOperationalAssumptionsDocumentation": {
                            "$ref": "#/definitions/PreOperationalAssumptionsDocumentation_2",
                            "description": "Pre-operational assumptions documentation"
                        },
                        "processDocumentation": {
                            "$ref": "#/definitions/ProcessDocumentation_2",
                            "description": "Process documentation"
                        },
                        "traceabilityDocumentation": {
                            "$ref": "#/definitions/BaseTraceabilityDocumentation",
                            "description": "Traceability documentation"
                        }
                    },
                    "type": "object"
                },
                "eventSequenceFamilies": {
                    "$ref": "#/definitions/Record<EventSequenceFamilyReference,EventSequenceFamily>",
                    "description": "Event sequence families defined"
                },
                "eventSequences": {
                    "$ref": "#/definitions/Record<EventSequenceReference,EventSequence>",
                    "description": "Event sequences analyzed"
                },
                "intermediateEndStates": {
                    "$ref": "#/definitions/Record<string,IntermediateEndState>",
                    "description": "Intermediate end states used in the analysis"
                },
                "keySafetyFunctions": {
                    "description": "Key safety functions that form the basis for event sequence development",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "modelUncertainties": {
                    "description": "Sources of model uncertainty and related assumptions",
                    "items": {
                        "$ref": "#/definitions/ModelUncertainty_1"
                    },
                    "type": "array"
                },
                "modified": {
                    "description": "The date the technical element was last modified",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "description": "The owner of the technical element",
                    "type": "string"
                },
                "plantResponseAnalysisReferences": {
                    "description": "References to supporting plant response analyses",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "preOperationalAssumptions": {
                    "description": "Assumptions made due to lack of as-built, as-operated details",
                    "items": {
                        "$ref": "#/definitions/Assumption_2"
                    },
                    "type": "array"
                },
                "references": {
                    "description": "References to other technical elements",
                    "items": {
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "technicalElementId": {
                                "type": "string"
                            },
                            "technicalElementType": {
                                "$ref": "#/definitions/TechnicalElementTypes"
                            }
                        },
                        "required": [
                            "description",
                            "technicalElementId",
                            "technicalElementType"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "releaseCategoryMappings": {
                    "description": "Mappings of event sequences to release categories",
                    "items": {
                        "$ref": "#/definitions/ReleaseCategoryMapping"
                    },
                    "type": "array"
                },
                "scopeDefinition": {
                    "description": "Definition of the scope of the analysis",
                    "properties": {
                        "initiatingEventIds": {
                            "description": "Initiating events included in the analysis",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "plantOperatingStateIds": {
                            "description": "Plant operating states included in the analysis",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "radioactiveMaterialSources": {
                            "description": "Sources of radioactive material within scope",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "radionuclideBarriers": {
                            "description": "Barriers to radionuclide release",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "initiatingEventIds",
                        "plantOperatingStateIds",
                        "radioactiveMaterialSources",
                        "radionuclideBarriers"
                    ],
                    "type": "object"
                },
                "screening_criteria": {
                    "$ref": "#/definitions/EventSequenceScreeningCriteria",
                    "description": "Screening criteria used to exclude event sequences"
                },
                "sensitivityStudies": {
                    "description": "Sensitivity studies for uncertainty assessment",
                    "items": {
                        "$ref": "#/definitions/SensitivityStudy"
                    },
                    "type": "array"
                },
                "sequenceDesignators": {
                    "$ref": "#/definitions/Record<string,SequenceDesignator>",
                    "description": "Sequence designators for referencing specific paths through event sequences"
                },
                "status": {
                    "description": "The status of the technical element",
                    "enum": [
                        "APPROVED",
                        "DEPRECATED",
                        "DRAFT",
                        "REVIEW"
                    ],
                    "type": "string"
                },
                "tags": {
                    "description": "Tags associated with the technical element",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "const": "event-sequence-analysis",
                    "description": "The type of technical element",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "validationRules": {
                    "$ref": "#/definitions/EventSequenceValidationRules",
                    "description": "Validation rules for the analysis"
                },
                "version": {
                    "description": "The version of the technical element",
                    "type": "string"
                }
            },
            "required": [
                "created",
                "eventSequenceFamilies",
                "eventSequences",
                "keySafetyFunctions",
                "modified",
                "name",
                "scopeDefinition",
                "type",
                "uuid",
                "version"
            ],
            "type": "object"
        },
        "EventSequenceDesignInformation": {
            "description": "Interface representing design information specific to event sequences.\nUsed to document the design basis and technical information supporting event sequence development.",
            "properties": {
                "applicationInSequence": {
                    "description": "How this design information was used in developing the event sequence.\nDescribes the specific application and relevance of the design information.",
                    "type": "string"
                },
                "assumptions": {
                    "description": "Any assumptions or limitations in applying this design information.\nDocuments important considerations when using this design information.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "date": {
                    "description": "Date of the source document",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the design information",
                    "type": "string"
                },
                "requirementId": {
                    "description": "Requirement identifier for traceability",
                    "type": "string"
                },
                "revision": {
                    "description": "Document revision identifier",
                    "type": "string"
                },
                "sourceId": {
                    "description": "Identifier for the design source document",
                    "type": "string"
                },
                "sourceType": {
                    "description": "Type of source document (e.g., \"drawing\", \"calculation\", \"specification\")",
                    "type": "string"
                },
                "standardSection": {
                    "description": "Section number in relevant standard (e.g., NRC RG 1.247)",
                    "type": "string"
                },
                "supportedAspects": {
                    "description": "Specific aspects of the event sequence supported by this design information.\nIndicates which parts of the event sequence this design information is used to support.",
                    "properties": {
                        "operatorActions": {
                            "description": "Whether this supports operator actions (e.g., access paths, control locations)",
                            "type": "boolean"
                        },
                        "phenomenologicalImpacts": {
                            "description": "Whether this supports phenomenological impacts (e.g., environmental conditions, physical phenomena)",
                            "type": "boolean"
                        },
                        "successCriteria": {
                            "description": "Whether this supports success criteria (e.g., system capabilities, performance requirements)",
                            "type": "boolean"
                        },
                        "systemDependencies": {
                            "description": "Whether this supports system dependencies (e.g., physical connections, shared components)",
                            "type": "boolean"
                        },
                        "timing": {
                            "description": "Whether this supports sequence timing (e.g., system response times, mission times)",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "applicationInSequence",
                "sourceId",
                "sourceType",
                "supportedAspects"
            ],
            "type": "object"
        },
        "EventSequenceFamily": {
            "description": "Interface representing an event sequence family.\nAn event sequence family is a group of event sequences with similar characteristics.",
            "properties": {
                "description": {
                    "description": "Description of the event sequence family",
                    "type": "string"
                },
                "endState": {
                    "$ref": "#/definitions/EndState",
                    "description": "End state of the sequence family"
                },
                "familySpecificAssumptions": {
                    "description": "Assumptions specific to this family",
                    "items": {
                        "$ref": "#/definitions/Assumption_2"
                    },
                    "type": "array"
                },
                "frequency": {
                    "description": "Mean frequency of the event sequence family",
                    "properties": {
                        "distribution": {
                            "description": "Statistical distribution of the frequency",
                            "enum": [
                                "beta",
                                "binomial",
                                "exponential",
                                "gamma",
                                "lognormal",
                                "normal",
                                "point_estimate",
                                "poisson",
                                "uniform",
                                "weibull"
                            ],
                            "type": "string"
                        },
                        "distributionParameters": {
                            "$ref": "#/definitions/Record<string,number>",
                            "description": "Parameters of the distribution"
                        },
                        "mean": {
                            "$ref": "#/definitions/Frequency",
                            "description": "Mean value of the frequency"
                        },
                        "units": {
                            "$ref": "#/definitions/FrequencyUnit",
                            "description": "Units of the frequency"
                        }
                    },
                    "required": [
                        "mean",
                        "units"
                    ],
                    "type": "object"
                },
                "groupingCriteriaId": {
                    "description": "Criteria used for grouping sequences into this family",
                    "type": "string"
                },
                "memberSequenceIds": {
                    "description": "IDs of event sequences that belong to this family",
                    "items": {
                        "$ref": "#/definitions/EventSequenceReference"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "releaseCategoryIds": {
                    "description": "References to release categories associated with this family",
                    "items": {
                        "$ref": "#/definitions/ReleaseCategoryReference"
                    },
                    "type": "array"
                },
                "representativeInitiatingEventId": {
                    "description": "Representative initiating event for the family",
                    "type": "string"
                },
                "representativePlantOperatingStateId": {
                    "description": "Representative plant operating state for the family",
                    "type": "string"
                },
                "representativePlantResponse": {
                    "description": "Representative plant response characteristics",
                    "type": "string"
                },
                "representativeSourceTermId": {
                    "$ref": "#/definitions/SourceTermReference",
                    "description": "Reference to the representative source term"
                },
                "similarityBasis": {
                    "description": "Basis for considering these sequences similar",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "endState",
                "groupingCriteriaId",
                "memberSequenceIds",
                "name",
                "representativeInitiatingEventId",
                "representativePlantOperatingStateId",
                "representativePlantResponse",
                "uuid"
            ],
            "type": "object"
        },
        "EventSequenceFamilyQuantification": {
            "description": "Detailed representation of an event sequence family for quantification purposes",
            "properties": {
                "dependenciesConsideredInGrouping": {
                    "description": "Flag indicating whether dependencies were considered in grouping",
                    "type": "boolean"
                },
                "description": {
                    "description": "Optional detailed description of the family",
                    "type": "string"
                },
                "familyId": {
                    "description": "Family identifier",
                    "type": "string"
                },
                "groupingCriteriaId": {
                    "description": "ID of the criteria used for grouping event sequences into this family",
                    "type": "string"
                },
                "memberSequenceIds": {
                    "description": "IDs of the event sequences that are members of this family",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "representativeInitiatingEventId": {
                    "description": "ID of the representative initiating event for this family",
                    "type": "string"
                },
                "representativePlantOperatingStateId": {
                    "description": "ID of the representative plant operating state for the family",
                    "type": "string"
                },
                "representativePlantResponse": {
                    "description": "Description of the representative plant response for this family",
                    "type": "string"
                },
                "representativeSequenceId": {
                    "description": "ID of the representative event sequence for this family",
                    "type": "string"
                },
                "representativeSequenceSelectionBasis": {
                    "description": "Basis for selecting the representative sequence",
                    "type": "string"
                },
                "representativeSourceId": {
                    "description": "ID of the representative source of radioactive material for the family",
                    "type": "string"
                },
                "representativeSourceTermId": {
                    "description": "ID of the representative source term for this family (optional as not all sequences have releases)",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "familyId",
                "groupingCriteriaId",
                "memberSequenceIds",
                "name",
                "representativeInitiatingEventId",
                "representativePlantOperatingStateId",
                "representativePlantResponse",
                "representativeSequenceId",
                "representativeSourceId",
                "uuid"
            ],
            "type": "object"
        },
        "EventSequenceFamilyReference": {
            "allOf": [
                {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "pattern",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "pattern": {
                                            "const": "^ESF-[0-9]+$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "pattern"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "RegExp(\"^ESF-[0-9]+$\").test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "^ESF-[0-9]+$",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ],
            "description": "Type for event sequence family references.\nFormat: ESF-[NUMBER]\nExample: ESF-001"
        },
        "EventSequenceFrequencyEstimate": {
            "description": "Frequency and uncertainty estimates for an event sequence",
            "properties": {
                "confidenceIntervals": {
                    "description": "Confidence intervals",
                    "properties": {
                        "percentile05": {
                            "description": "5th percentile",
                            "type": "number"
                        },
                        "percentile50": {
                            "description": "50th percentile (median)",
                            "type": "number"
                        },
                        "percentile95": {
                            "description": "95th percentile",
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "meanFrequency": {
                    "$ref": "#/definitions/FrequencyQuantification_1",
                    "description": "Mean frequency estimate"
                },
                "sensitivityResults": {
                    "description": "Sensitivity analysis results specific to this sequence",
                    "items": {
                        "properties": {
                            "frequencyEffect": {
                                "description": "Effect on frequency",
                                "items": [
                                    {
                                        "type": "number"
                                    },
                                    {
                                        "type": "number"
                                    }
                                ],
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array"
                            },
                            "parameter": {
                                "description": "Parameter or assumption varied",
                                "type": "string"
                            },
                            "range": {
                                "description": "Range of variation",
                                "items": [
                                    {
                                        "type": "number"
                                    },
                                    {
                                        "type": "number"
                                    }
                                ],
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array"
                            }
                        },
                        "required": [
                            "frequencyEffect",
                            "parameter",
                            "range"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "sequenceId": {
                    "description": "ID of the event sequence or family",
                    "type": "string"
                },
                "sequenceType": {
                    "description": "Type of sequence (individual or family)",
                    "enum": [
                        "FAMILY",
                        "INDIVIDUAL"
                    ],
                    "type": "string"
                },
                "significantUncertaintySources": {
                    "description": "Sources of uncertainty that significantly impact this sequence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uncertaintyDistribution": {
                    "description": "Uncertainty distribution",
                    "properties": {
                        "parameters": {
                            "$ref": "#/definitions/Record<string,number>",
                            "description": "Parameters of the distribution (specific to distribution type)"
                        },
                        "type": {
                            "$ref": "#/definitions/DistributionType",
                            "description": "Type of distribution"
                        }
                    },
                    "required": [
                        "parameters",
                        "type"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "meanFrequency",
                "sequenceId",
                "sequenceType",
                "uncertaintyDistribution"
            ],
            "type": "object"
        },
        "EventSequenceQuantification": {
            "properties": {
                "barrierTreatment": {
                    "$ref": "#/definitions/RadionuclideBarrierTreatment",
                    "description": "Treatment of radionuclide barriers."
                },
                "commonAssumptions": {
                    "description": "Common assumptions that apply across this technical element\nUsing the standardized BaseAssumption interface",
                    "items": {
                        "$ref": "#/definitions/BaseAssumption"
                    },
                    "type": "array"
                },
                "created": {
                    "description": "The date the technical element was created",
                    "type": "string"
                },
                "dependencyTreatment": {
                    "$ref": "#/definitions/DependencyRepresentation",
                    "description": "Treatment of dependencies in quantification."
                },
                "description": {
                    "description": "The description of the technical element",
                    "type": "string"
                },
                "documentation": {
                    "$ref": "#/definitions/EventSequenceQuantificationDocumentation",
                    "description": "Documentation of the Event Sequence Quantification process."
                },
                "eventSequenceFamilies": {
                    "$ref": "#/definitions/Record<string,EventSequenceFamilyQuantification>",
                    "description": "Event sequence families defined for quantification."
                },
                "importanceAnalysis": {
                    "$ref": "#/definitions/Record<string,ImportanceAnalysis>",
                    "description": "Importance analysis of contributors."
                },
                "limitationsDocumentation": {
                    "$ref": "#/definitions/EventSequenceQuantificationLimitationsDocumentation",
                    "description": "Documentation of quantification limitations."
                },
                "logicalChallenges": {
                    "description": "Handling of circular logic and mutually exclusive events.",
                    "properties": {
                        "circularLogic": {
                            "$ref": "#/definitions/Record<string,CircularLogic>",
                            "description": "Circular logic situations and their resolutions"
                        },
                        "flagEvents": {
                            "$ref": "#/definitions/Record<string,FlagEvent>",
                            "description": "Flag events used in quantification"
                        },
                        "mutuallyExclusiveEvents": {
                            "$ref": "#/definitions/Record<string,MutuallyExclusiveEvents>",
                            "description": "Mutually exclusive events and their treatment"
                        },
                        "systemSuccessTreatment": {
                            "$ref": "#/definitions/SystemSuccessTreatment",
                            "description": "Treatment of system successes"
                        }
                    },
                    "required": [
                        "circularLogic",
                        "mutuallyExclusiveEvents",
                        "systemSuccessTreatment"
                    ],
                    "type": "object"
                },
                "mechanisticSourceTermAnalysisReferences": {
                    "description": "References to the Mechanistic Source Term Analysis.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "metadata": {
                    "description": "Additional metadata specific to Event Sequence Quantification.",
                    "properties": {
                        "analysisDate": {
                            "type": "string"
                        },
                        "analyst": {
                            "type": "string"
                        },
                        "approvalStatus": {
                            "type": "string"
                        },
                        "assumptions": {
                            "items": {
                                "$ref": "#/definitions/BaseAssumption"
                            },
                            "type": "array"
                        },
                        "limitations": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "reviewer": {
                            "type": "string"
                        },
                        "scope": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "version": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "analysisDate",
                        "analyst",
                        "version"
                    ],
                    "type": "object"
                },
                "modelIntegration": {
                    "$ref": "#/definitions/ModelIntegration",
                    "description": "Integration of models from various technical elements."
                },
                "modified": {
                    "description": "The date the technical element was last modified",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "description": "The owner of the technical element",
                    "type": "string"
                },
                "peerReviewDocumentation": {
                    "$ref": "#/definitions/EventSequenceQuantificationPeerReviewDocumentation",
                    "description": "Peer review documentation."
                },
                "preOperationalDocumentation": {
                    "$ref": "#/definitions/EventSequenceQuantificationPreOperationalDocumentation",
                    "description": "Documentation of pre-operational assumptions and limitations."
                },
                "quantificationMethods": {
                    "description": "Details of the quantification methods used.",
                    "properties": {
                        "approach": {
                            "$ref": "#/definitions/QuantificationApproach",
                            "description": "Quantification approach used"
                        },
                        "computerCodes": {
                            "description": "Computer codes used",
                            "items": {
                                "properties": {
                                    "name": {
                                        "description": "Name of the code",
                                        "type": "string"
                                    },
                                    "validationDocumentation": {
                                        "description": "Validation documentation - confirms the code is suitable for the application \nRequired to address ESQ-B1 validation requirements",
                                        "type": "string"
                                    },
                                    "validationReference": {
                                        "description": "Reference to code validation",
                                        "type": "string"
                                    },
                                    "verificationDocumentation": {
                                        "description": "Verification documentation - confirms the code correctly implements the intended algorithms \nRequired to address ESQ-B1 verification requirements",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "Version of the code",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name",
                                    "validationDocumentation",
                                    "verificationDocumentation",
                                    "version"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "postInitiatorHFEHandling": {
                            "description": "Handling of post-initiator human failure events",
                            "type": "string"
                        },
                        "recoveryActionTreatment": {
                            "$ref": "#/definitions/RecoveryActionTreatment",
                            "description": "Treatment of recovery actions"
                        },
                        "truncation": {
                            "$ref": "#/definitions/ConvergenceAnalysis",
                            "description": "Truncation details"
                        }
                    },
                    "required": [
                        "approach",
                        "computerCodes",
                        "truncation"
                    ],
                    "type": "object"
                },
                "quantificationResults": {
                    "$ref": "#/definitions/Record<string,EventSequenceFrequencyEstimate>",
                    "description": "Quantification results for each event sequence and family."
                },
                "quantificationReview": {
                    "$ref": "#/definitions/QuantificationReviewProcess",
                    "description": "Review process for quantification results."
                },
                "references": {
                    "description": "References to other technical elements",
                    "items": {
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "technicalElementId": {
                                "type": "string"
                            },
                            "technicalElementType": {
                                "$ref": "#/definitions/TechnicalElementTypes"
                            }
                        },
                        "required": [
                            "description",
                            "technicalElementId",
                            "technicalElementType"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "status": {
                    "description": "The status of the technical element",
                    "enum": [
                        "APPROVED",
                        "DEPRECATED",
                        "DRAFT",
                        "REVIEW"
                    ],
                    "type": "string"
                },
                "tags": {
                    "description": "Tags associated with the technical element",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "const": "event-sequence-quantification",
                    "description": "The type of technical element",
                    "type": "string"
                },
                "uncertaintyAnalysis": {
                    "$ref": "#/definitions/EventQuantUncertaintyAnalysis",
                    "description": "Uncertainty and sensitivity analyses."
                },
                "uncertaintyDocumentation": {
                    "$ref": "#/definitions/EventSequenceQuantificationUncertaintyDocumentation",
                    "description": "Documentation of model uncertainties."
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "version": {
                    "description": "The version of the technical element",
                    "type": "string"
                }
            },
            "required": [
                "barrierTreatment",
                "created",
                "dependencyTreatment",
                "documentation",
                "eventSequenceFamilies",
                "importanceAnalysis",
                "limitationsDocumentation",
                "logicalChallenges",
                "metadata",
                "modelIntegration",
                "modified",
                "name",
                "quantificationMethods",
                "quantificationResults",
                "type",
                "uncertaintyAnalysis",
                "uncertaintyDocumentation",
                "uuid",
                "version"
            ],
            "type": "object"
        },
        "EventSequenceQuantificationDocumentation": {
            "additionalProperties": {},
            "description": "Documentation of the Event Sequence Quantification process",
            "properties": {
                "appliedMethods": {
                    "description": "Methods applied",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "asymmetriesInModeling": {
                    "description": "Asymmetries in quantitative modeling",
                    "type": "string"
                },
                "comparisonToSimilarPlants": {
                    "description": "Comparison to similar plants",
                    "type": "string"
                },
                "computerCodeUsed": {
                    "description": "Computer code used",
                    "type": "string"
                },
                "cutsetReviewProcess": {
                    "description": "Cutset review process",
                    "type": "string"
                },
                "dependenciesTreatment": {
                    "description": "Treatment of dependencies",
                    "type": "string"
                },
                "designInformation": {
                    "description": "Design information sources used in the analysis",
                    "items": {
                        "$ref": "#/definitions/BaseDesignInformation"
                    },
                    "type": "array"
                },
                "eventSequencesAndBinning": {
                    "description": "Event sequences and binning method",
                    "type": "string"
                },
                "familyFrequencies": {
                    "description": "Event sequence family frequencies with structured data\nProvides a detailed representation of family frequencies with traceability",
                    "items": {
                        "properties": {
                            "distributionType": {
                                "description": "Uncertainty distribution type, if available",
                                "enum": [
                                    "beta",
                                    "binomial",
                                    "exponential",
                                    "gamma",
                                    "lognormal",
                                    "normal",
                                    "point_estimate",
                                    "poisson",
                                    "uniform",
                                    "weibull"
                                ],
                                "type": "string"
                            },
                            "familyId": {
                                "description": "ID of the event sequence family",
                                "type": "string"
                            },
                            "keyContributors": {
                                "description": "Key contributors to this family's frequency",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "meanFrequency": {
                                "description": "Mean frequency value",
                                "type": "number"
                            },
                            "quantificationResultReference": {
                                "description": "Reference to the detailed quantification result",
                                "type": "string"
                            },
                            "units": {
                                "$ref": "#/definitions/FrequencyUnit",
                                "description": "Frequency units"
                            }
                        },
                        "required": [
                            "familyId",
                            "meanFrequency",
                            "units"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "inputs": {
                    "description": "Inputs used",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "inputsDescription": {
                    "description": "Description of inputs used in the analysis",
                    "type": "string"
                },
                "intermediateStatesApproach": {
                    "description": "Approach to intermediate states",
                    "type": "string"
                },
                "methodsDescription": {
                    "description": "Description of methods applied in the analysis",
                    "type": "string"
                },
                "mutuallyExclusiveEventsTreatment": {
                    "description": "Mutually exclusive events treatment",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nonRecoveryTermsProcess": {
                    "description": "Process for adding non-recovery terms",
                    "type": "string"
                },
                "parameterEstimatesNotDocumented": {
                    "description": "Parameter estimates not documented elsewhere",
                    "type": "string"
                },
                "processDescription": {
                    "description": "Process description",
                    "type": "string"
                },
                "quantificationProcess": {
                    "description": "Quantification process",
                    "type": "string"
                },
                "radionuclideBarrierTreatment": {
                    "description": "Radionuclide barrier treatment",
                    "type": "string"
                },
                "requirementReferences": {
                    "description": "Traceability to requirements",
                    "items": {
                        "properties": {
                            "implementation": {
                                "description": "How the requirement is addressed",
                                "type": "string"
                            },
                            "requirementId": {
                                "description": "Requirement identifier",
                                "type": "string"
                            }
                        },
                        "required": [
                            "implementation",
                            "requirementId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "resultsDescription": {
                    "description": "Description of the results of the analysis",
                    "type": "string"
                },
                "resultsSummary": {
                    "description": "Summary of results",
                    "type": "string"
                },
                "riskInsights": {
                    "description": "Risk insights",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "riskSignificanceDrivers": {
                    "description": "Risk significance drivers",
                    "type": "string"
                },
                "supportingDocumentationReferences": {
                    "description": "References to supporting documentation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "truncationProcess": {
                    "description": "Truncation process and values",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "appliedMethods",
                "computerCodeUsed",
                "dependenciesTreatment",
                "eventSequencesAndBinning",
                "familyFrequencies",
                "inputs",
                "mutuallyExclusiveEventsTreatment",
                "name",
                "processDescription",
                "quantificationProcess",
                "radionuclideBarrierTreatment",
                "resultsSummary",
                "riskInsights",
                "truncationProcess",
                "uuid"
            ],
            "type": "object"
        },
        "EventSequenceQuantificationLimitationsDocumentation": {
            "description": "Documentation of limitations in the Event Sequence Quantification",
            "properties": {
                "dataLimitations": {
                    "description": "Data limitations",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "modelIntegrationLimitations": {
                    "description": "Model integration limitations",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "otherLimitations": {
                    "description": "Other limitations",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "quantificationLimitations": {
                    "description": "Limitations in the quantification process",
                    "items": {
                        "properties": {
                            "applicationImpact": {
                                "description": "Impact on applications",
                                "type": "string"
                            },
                            "description": {
                                "description": "Description of the limitation",
                                "type": "string"
                            },
                            "limitationId": {
                                "description": "Limitation ID",
                                "type": "string"
                            },
                            "potentialWorkarounds": {
                                "description": "Potential workarounds",
                                "type": "string"
                            }
                        },
                        "required": [
                            "applicationImpact",
                            "description",
                            "limitationId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "validationLimitations": {
                    "description": "Validation scope limitations",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "quantificationLimitations"
            ],
            "type": "object"
        },
        "EventSequenceQuantificationPeerReviewDocumentation": {
            "description": "Peer review documentation for Event Sequence Quantification",
            "properties": {
                "conclusions": {
                    "description": "Review conclusions",
                    "type": "string"
                },
                "findings": {
                    "description": "Review findings",
                    "items": {
                        "properties": {
                            "associatedRequirement": {
                                "description": "Associated requirement",
                                "type": "string"
                            },
                            "description": {
                                "description": "Finding description",
                                "type": "string"
                            },
                            "findingId": {
                                "description": "Finding ID",
                                "type": "string"
                            },
                            "resolution": {
                                "description": "Finding resolution",
                                "type": "string"
                            },
                            "significance": {
                                "description": "Finding significance",
                                "enum": [
                                    "HIGH",
                                    "LOW",
                                    "MEDIUM"
                                ],
                                "type": "string"
                            },
                            "status": {
                                "description": "Finding status",
                                "enum": [
                                    "CLOSED",
                                    "IN_PROGRESS",
                                    "OPEN"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "description",
                            "findingId",
                            "significance",
                            "status"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "findingsAndObservations": {
                    "description": "Findings and observations",
                    "items": {
                        "properties": {
                            "associatedRequirements": {
                                "description": "Associated requirements",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "description": {
                                "description": "Description of the finding",
                                "type": "string"
                            },
                            "id": {
                                "description": "Finding ID",
                                "type": "string"
                            },
                            "resolutionActions": {
                                "description": "Resolution actions",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "resolutionStatus": {
                                "description": "Resolution status",
                                "enum": [
                                    "CLOSED",
                                    "IN_PROGRESS",
                                    "OPEN"
                                ],
                                "type": "string"
                            },
                            "significance": {
                                "$ref": "#/definitions/ImportanceLevel",
                                "description": "Significance of the finding"
                            }
                        },
                        "required": [
                            "description",
                            "id",
                            "resolutionStatus",
                            "significance"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "methodology": {
                    "description": "Review methodology",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "reportReference": {
                    "description": "Review report reference",
                    "type": "string"
                },
                "reviewDate": {
                    "description": "Review date",
                    "type": "string"
                },
                "reviewScope": {
                    "description": "Review scope",
                    "type": "string"
                },
                "reviewTeam": {
                    "description": "Review team",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "reviewers": {
                    "description": "Review team members",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "scope": {
                    "description": "Scope of the review",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "conclusions",
                "findings",
                "findingsAndObservations",
                "methodology",
                "name",
                "reviewDate",
                "reviewScope",
                "reviewTeam",
                "reviewers",
                "scope",
                "uuid"
            ],
            "type": "object"
        },
        "EventSequenceQuantificationPreOperationalDocumentation": {
            "description": "Documentation of pre-operational assumptions and limitations",
            "properties": {
                "assumptions": {
                    "description": "Assumptions due to lack of as-built, as-operated details",
                    "items": {
                        "$ref": "#/definitions/PreOperationalAssumption"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "preOperationalAssumptions": {
                    "description": "Pre-operational assumptions",
                    "items": {
                        "properties": {
                            "assumptionId": {
                                "description": "Assumption ID",
                                "type": "string"
                            },
                            "description": {
                                "description": "Description of the assumption",
                                "type": "string"
                            },
                            "impact": {
                                "description": "Impact on the analysis",
                                "type": "string"
                            },
                            "validationApproach": {
                                "description": "How the assumption will be validated",
                                "type": "string"
                            },
                            "validationTiming": {
                                "description": "When validation will occur",
                                "type": "string"
                            }
                        },
                        "required": [
                            "assumptionId",
                            "description",
                            "impact",
                            "validationApproach",
                            "validationTiming"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "preOperationalLimitations": {
                    "description": "Pre-operational limitations",
                    "items": {
                        "properties": {
                            "description": {
                                "description": "Description of the limitation",
                                "type": "string"
                            },
                            "impact": {
                                "description": "Impact on the analysis",
                                "type": "string"
                            },
                            "limitationId": {
                                "description": "Limitation ID",
                                "type": "string"
                            },
                            "resolutionApproach": {
                                "description": "How the limitation will be addressed",
                                "type": "string"
                            }
                        },
                        "required": [
                            "description",
                            "impact",
                            "limitationId",
                            "resolutionApproach"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "supportingDocumentationReferences": {
                    "description": "References to supporting documentation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "validationPhase": {
                    "description": "Plant construction or operational phase when assumption can be validated",
                    "type": "string"
                }
            },
            "required": [
                "assumptions",
                "name",
                "preOperationalAssumptions",
                "preOperationalLimitations",
                "uuid"
            ],
            "type": "object"
        },
        "EventSequenceQuantificationUncertaintyDocumentation": {
            "description": "Documentation of model uncertainties in Event Sequence Quantification",
            "properties": {
                "keyAssumptions": {
                    "description": "Key assumptions",
                    "items": {
                        "$ref": "#/definitions/BaseAssumption"
                    },
                    "type": "array"
                },
                "modelUncertaintySources": {
                    "description": "Sources of model uncertainty",
                    "items": {
                        "properties": {
                            "alternativeApproaches": {
                                "description": "Alternative approaches considered",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "description": {
                                "description": "Description of the uncertainty source",
                                "type": "string"
                            },
                            "impact": {
                                "description": "Impact on results",
                                "type": "string"
                            },
                            "relatedAssumptions": {
                                "description": "Assumptions made",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "sourceId": {
                                "description": "Source ID",
                                "type": "string"
                            },
                            "treatmentApproach": {
                                "description": "How the uncertainty was addressed",
                                "type": "string"
                            }
                        },
                        "required": [
                            "alternativeApproaches",
                            "description",
                            "impact",
                            "relatedAssumptions",
                            "sourceId",
                            "treatmentApproach"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "reasonableAlternatives": {
                    "description": "Reasonable alternatives considered - mapped to match BaseModelUncertaintyDocumentation",
                    "items": {
                        "properties": {
                            "alternative": {
                                "description": "Alternative description - mapped to 'alternative'",
                                "type": "string"
                            },
                            "alternativeId": {
                                "description": "Additional fields specific to this implementation",
                                "type": "string"
                            },
                            "applicableElements": {
                                "description": "Applicable elements",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "potentialImpact": {
                                "type": "string"
                            },
                            "reasonNotSelected": {
                                "description": "Why it wasn't selected - mapped to 'reasonNotSelected'",
                                "type": "string"
                            }
                        },
                        "required": [
                            "alternative",
                            "reasonNotSelected"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "relatedAssumptions": {
                    "description": "Related assumptions",
                    "items": {
                        "properties": {
                            "applicableElements": {
                                "description": "Applicable elements",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "assumption": {
                                "description": "Assumption description",
                                "type": "string"
                            },
                            "basis": {
                                "description": "Basis for assumption",
                                "type": "string"
                            }
                        },
                        "required": [
                            "assumption",
                            "basis"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "requirementReference": {
                    "description": "Reference to requirement",
                    "type": "string"
                },
                "uncertaintySources": {
                    "description": "Sources of model uncertainty",
                    "items": {
                        "properties": {
                            "applicableElements": {
                                "description": "Applicable elements",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "impact": {
                                "description": "Impact on analysis",
                                "type": "string"
                            },
                            "source": {
                                "description": "Source description",
                                "type": "string"
                            }
                        },
                        "required": [
                            "impact",
                            "source"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "keyAssumptions",
                "modelUncertaintySources",
                "name",
                "reasonableAlternatives",
                "relatedAssumptions",
                "uncertaintySources",
                "uuid"
            ],
            "type": "object"
        },
        "EventSequenceReference": {
            "allOf": [
                {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "pattern",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "pattern": {
                                            "const": "^ES-[0-9]+$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "pattern"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "RegExp(\"^ES-[0-9]+$\").test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "^ES-[0-9]+$",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ],
            "description": "Type for event sequence references.\nFormat: ES-[NUMBER]\nExample: ES-001"
        },
        "EventSequenceScreeningCriteria": {
            "description": "Criteria for screening out event sequences",
            "properties": {
                "basis": {
                    "description": "Basis for screening criteria",
                    "type": "string"
                },
                "damage_frequency_criterion": {
                    "description": "Damage frequency screening criterion (if applicable)",
                    "type": "number"
                },
                "elementSpecificProperties": {
                    "$ref": "#/definitions/Record<string,unknown>",
                    "description": "Technical element specific properties\nAllows for extension with properties specific to a technical element"
                },
                "frequency_criterion": {
                    "description": "Frequency-based screening criterion (if applicable)",
                    "type": "number"
                },
                "risk_criterion": {
                    "description": "Risk-based screening criterion (if applicable)",
                    "type": "number"
                },
                "screened_out_elements": {
                    "description": "List of screened-out elements",
                    "items": {
                        "properties": {
                            "element_id": {
                                "description": "ID of the screened-out element",
                                "type": "string"
                            },
                            "justification": {
                                "description": "Detailed justification for screening decision",
                                "type": "string"
                            },
                            "reason": {
                                "description": "Reason for screening out",
                                "type": "string"
                            }
                        },
                        "required": [
                            "element_id",
                            "justification",
                            "reason"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "screened_out_sequences": {
                    "description": "List of screened-out event sequences",
                    "items": {
                        "properties": {
                            "justification": {
                                "description": "Detailed justification for screening decision",
                                "type": "string"
                            },
                            "reason": {
                                "description": "Reason for screening out",
                                "type": "string"
                            },
                            "sequence_id": {
                                "$ref": "#/definitions/EventSequenceReference",
                                "description": "ID of the screened-out sequence"
                            }
                        },
                        "required": [
                            "justification",
                            "reason",
                            "sequence_id"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "basis",
                "screened_out_elements",
                "screened_out_sequences"
            ],
            "type": "object"
        },
        "EventSequenceToReleaseCategory": {
            "description": "Interface representing the mapping between event sequences and release categories.",
            "properties": {
                "consistentWithEventSequenceAnalysis": {
                    "description": "Indicates whether this mapping was derived from or is consistent with\nthe event sequence analysis mappings.",
                    "type": "boolean"
                },
                "consistentWithMstAnalysis": {
                    "description": "Indicates whether this mapping was derived from or is consistent with\nthe mechanistic source term analysis mappings.",
                    "type": "boolean"
                },
                "eventSequenceId": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/EventSequenceReference",
                            "description": "Type for event sequence references.\nFormat: ES-[NUMBER]\nExample: ES-001"
                        },
                        {
                            "$ref": "#/definitions/EventSequenceFamilyReference",
                            "description": "Type for event sequence family references.\nFormat: ESF-[NUMBER]\nExample: ESF-001"
                        }
                    ],
                    "description": "ID of the event sequence or event sequence family"
                },
                "frequency": {
                    "description": "Frequency of this specific mapping",
                    "type": "number"
                },
                "frequencyUnit": {
                    "description": "Frequency unit",
                    "enum": [
                        "per-calendar-year",
                        "per-critical-year",
                        "per-demand",
                        "per-reactor-year"
                    ],
                    "type": "string"
                },
                "mappingBasis": {
                    "description": "Basis for the mapping between event sequence and release category",
                    "type": "string"
                },
                "originalMappingId": {
                    "description": "Reference to the original mapping in the event sequence analysis, if available.\nThis provides traceability between the risk integration and event sequence analysis.",
                    "type": "string"
                },
                "originalMstMappingId": {
                    "description": "Reference to the original mapping in the mechanistic source term analysis, if available.\nThis provides traceability between the risk integration and mechanistic source term analysis.",
                    "type": "string"
                },
                "releaseCategoryId": {
                    "$ref": "#/definitions/ReleaseCategoryReference_1",
                    "description": "ID of the release category"
                },
                "sourceTermDefinitionReference": {
                    "$ref": "#/definitions/SourceTermDefinitionReference",
                    "description": "Reference to the source term definition associated with this release category.\nThis links to the detailed source term information in the mechanistic source term module."
                },
                "supportingAnalyses": {
                    "description": "References to supporting analyses",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uncertaintyFactors": {
                    "description": "Factors contributing to uncertainty in this mapping",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "eventSequenceId",
                "frequency",
                "mappingBasis",
                "releaseCategoryId",
                "uuid"
            ],
            "type": "object"
        },
        "EventSequenceToReleaseCategoryMapping": {
            "description": "Maps event sequences to release categories and provides justification.",
            "properties": {
                "assignmentJustification": {
                    "description": "Justification for assigning this event sequence to this release category",
                    "type": "string"
                },
                "eventSequenceReference": {
                    "$ref": "#/definitions/EventSequenceReference",
                    "description": "Reference to the event sequence"
                },
                "frequencyInformation": {
                    "description": "Frequency information for this mapping, if available at this stage.\nThis may be populated during event sequence quantification and used by risk integration.",
                    "properties": {
                        "mean": {
                            "description": "Mean frequency value",
                            "type": "number"
                        },
                        "uncertainty": {
                            "description": "Uncertainty in the frequency",
                            "properties": {
                                "distributionType": {
                                    "description": "Distribution type",
                                    "enum": [
                                        "beta",
                                        "binomial",
                                        "exponential",
                                        "gamma",
                                        "lognormal",
                                        "normal",
                                        "point_estimate",
                                        "poisson",
                                        "uniform",
                                        "weibull"
                                    ],
                                    "type": "string"
                                },
                                "parameters": {
                                    "$ref": "#/definitions/Record<string,number>",
                                    "description": "Distribution parameters"
                                }
                            },
                            "type": "object"
                        },
                        "unit": {
                            "description": "Frequency unit",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "processedByRiskIntegration": {
                    "description": "Flag indicating whether this mapping has been processed by risk integration.\nUsed for traceability between technical elements.",
                    "type": "boolean"
                },
                "releaseCategoryReference": {
                    "$ref": "#/definitions/ReleaseCategoryReference_1",
                    "description": "Reference to the release category"
                },
                "riskIntegrationInsights": {
                    "description": "Insights from risk integration, if available.\nThis may be populated based on feedback from risk integration.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "riskIntegrationMappingId": {
                    "description": "Reference to the corresponding mapping in the risk integration module, if available.\nThis provides traceability between the mechanistic source term and risk integration modules.",
                    "type": "string"
                },
                "riskSignificance": {
                    "description": "Risk significance level determined by risk integration, if available.\nThis may be populated based on feedback from risk integration.",
                    "enum": [
                        "HIGH",
                        "LOW",
                        "MEDIUM"
                    ],
                    "type": "string"
                },
                "technicalBasis": {
                    "description": "Technical basis for the assignment",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "assignmentJustification",
                "eventSequenceReference",
                "releaseCategoryReference",
                "uuid"
            ],
            "type": "object"
        },
        "EventSequenceValidationRules": {
            "description": "Interface representing event sequence analysis validation rules.\nUsed to validate the event sequence analysis for completeness and consistency.",
            "properties": {
                "dependencyModelingRules": {
                    "description": "Rules for dependency modeling validation",
                    "properties": {
                        "description": {
                            "description": "Validation description",
                            "type": "string"
                        },
                        "documentationRequirements": {
                            "description": "Documentation requirements",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "requiredDependencyTypes": {
                            "description": "Dependency types that must be addressed",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "description",
                        "documentationRequirements",
                        "requiredDependencyTypes"
                    ],
                    "type": "object"
                },
                "endStateDefinitionRules": {
                    "description": "Rules for end state definition validation",
                    "properties": {
                        "definitionCriteria": {
                            "description": "End state definition criteria",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "description": {
                            "description": "Validation description",
                            "type": "string"
                        },
                        "requiredEndStates": {
                            "description": "Required end states",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "definitionCriteria",
                        "description",
                        "requiredEndStates"
                    ],
                    "type": "object"
                },
                "initiatingEventCoverageRules": {
                    "description": "Rules for initiating event coverage validation",
                    "properties": {
                        "description": {
                            "description": "Validation description",
                            "type": "string"
                        },
                        "requiredElements": {
                            "description": "Required analysis elements",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "validationMethod": {
                            "description": "Validation method",
                            "type": "string"
                        }
                    },
                    "required": [
                        "description",
                        "requiredElements",
                        "validationMethod"
                    ],
                    "type": "object"
                },
                "plantOperatingStateCoverageRules": {
                    "description": "Rules for plant operating state coverage validation",
                    "properties": {
                        "description": {
                            "description": "Validation description",
                            "type": "string"
                        },
                        "requiredElements": {
                            "description": "Required analysis elements",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "validationMethod": {
                            "description": "Validation method",
                            "type": "string"
                        }
                    },
                    "required": [
                        "description",
                        "requiredElements",
                        "validationMethod"
                    ],
                    "type": "object"
                },
                "releaseCategoryMappingRules": {
                    "description": "Rules for release category mapping validation",
                    "properties": {
                        "description": {
                            "description": "Validation description",
                            "type": "string"
                        },
                        "mappingCriteria": {
                            "description": "Mapping criteria",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "requiredDocumentation": {
                            "description": "Required documentation",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "description",
                        "mappingCriteria",
                        "requiredDocumentation"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "dependencyModelingRules",
                "endStateDefinitionRules",
                "initiatingEventCoverageRules",
                "plantOperatingStateCoverageRules",
                "releaseCategoryMappingRules"
            ],
            "type": "object"
        },
        "ExpertJudgment": {
            "description": "Interface for expert judgment used in success criteria analysis.",
            "properties": {
                "informedSuccessCriteria": {
                    "description": "Success criteria informed by this judgment",
                    "items": {
                        "$ref": "#/definitions/SuccessCriteriaId"
                    },
                    "type": "array"
                },
                "justification": {
                    "description": "Justification for using expert judgment",
                    "type": "string"
                },
                "outcome": {
                    "description": "Outcome of the expert judgment",
                    "type": "string"
                },
                "panelMembers": {
                    "description": "Panel members involved",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "processDescription": {
                    "description": "Process followed",
                    "type": "string"
                },
                "processDocumentationReference": {
                    "description": "Reference to process documentation",
                    "type": "string"
                },
                "topic": {
                    "description": "Topic of expert judgment",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "informedSuccessCriteria",
                "justification",
                "outcome",
                "panelMembers",
                "processDescription",
                "processDocumentationReference",
                "topic",
                "uuid"
            ],
            "type": "object"
        },
        "ExtendedInitiatingEvent": {
            "description": "Enhanced definition of an initiating event with additional properties",
            "properties": {
                "applicableStates": {
                    "description": "Plant operating states in which this initiating event can occur.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Category of the initiating event.",
                    "type": "string"
                },
                "description": {
                    "description": "Optional detailed description of the initiating event.",
                    "type": "string"
                },
                "eventType": {
                    "const": "INITIATING",
                    "type": "string"
                },
                "frequency": {
                    "$ref": "#/definitions/Frequency"
                },
                "genericAnalysisReview": {
                    "description": "Review of generic analyses of similar plants.",
                    "type": "string"
                },
                "group": {
                    "description": "Grouping of initiating events with similar mitigation requirements.",
                    "type": "string"
                },
                "groupId": {
                    "description": "Unique identifier for the grouping of initiating events for analysis purposes.",
                    "type": "string"
                },
                "importanceLevel": {
                    "description": "Importance level of this initiating event for risk insights",
                    "enum": [
                        "HIGH",
                        "LOW",
                        "MEDIUM"
                    ],
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "plantExperience": {
                    "description": "List of plant-specific experience related to this initiating event (for operating plants).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "preOperationalAssumptions": {
                    "description": "Assumptions made due to lack of as-built, as-operated details (for pre-operational stage).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "screeningBasis": {
                    "description": "Basis for screening out this initiating event (if applicable).",
                    "type": "string"
                },
                "screeningStatus": {
                    "description": "Screening status of this initiating event",
                    "enum": [
                        "FULL_ANALYSIS",
                        "MERGED",
                        "QUALITATIVE_ANALYSIS",
                        "RETAINED",
                        "SCREENED_OUT"
                    ],
                    "type": "string"
                },
                "supportingAnalyses": {
                    "description": "References to supporting analyses (e.g., fault trees).",
                    "items": {
                        "properties": {
                            "analysisId": {
                                "type": "string"
                            },
                            "analysisType": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "analysisId",
                            "analysisType"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "uncertainty": {
                    "$ref": "#/definitions/Uncertainty",
                    "description": "Model uncertainty, data sources, and assumptions associated with the initiating event."
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "category",
                "eventType",
                "frequency",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "ExternalDataSource": {
            "description": "Interface for external data source integration",
            "properties": {
                "accessMethod": {
                    "description": "Access method for retrieving data",
                    "type": "string"
                },
                "dataFormat": {
                    "description": "Data format description",
                    "type": "string"
                },
                "limitations": {
                    "description": "Data limitations",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "qualityAssurance": {
                    "description": "Quality assurance information",
                    "type": "string"
                },
                "referenceDocumentation": {
                    "description": "Reference documentation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "sourceLocation": {
                    "description": "Source location or identifier",
                    "type": "string"
                },
                "sourceType": {
                    "description": "Type of data source",
                    "enum": [
                        "EXPERT_JUDGMENT",
                        "INDUSTRY_DATABASE",
                        "OTHER",
                        "PLANT_RECORDS"
                    ],
                    "type": "string"
                },
                "timePeriod": {
                    "description": "Time period covered",
                    "properties": {
                        "end": {
                            "type": "string"
                        },
                        "start": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "end",
                        "start"
                    ],
                    "type": "object"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "validationMethod": {
                    "description": "Data validation method",
                    "type": "string"
                }
            },
            "required": [
                "accessMethod",
                "dataFormat",
                "name",
                "referenceDocumentation",
                "sourceLocation",
                "sourceType",
                "timePeriod",
                "uuid"
            ],
            "type": "object"
        },
        "FailureModeType": {
            "description": "The types of failure modes that can be modeled for components.",
            "enum": [
                "FAILURE_TO_START",
                "FAILURE_TO_RUN",
                "COMMON_CAUSE_FAILURE",
                "TEST_MAINTENANCE",
                "HUMAN_ERROR",
                "EXTERNAL_EVENT",
                "OTHER"
            ],
            "type": "string"
        },
        "FailureModesEffectAnalysis": {
            "description": "Failure Modes and Effects Analysis method",
            "properties": {
                "analyst": {
                    "description": "Analyst who performed the method",
                    "type": "string"
                },
                "components": {
                    "$ref": "#/definitions/Record<string,SystemDefinition>",
                    "description": "Components analyzed"
                },
                "failure_modes": {
                    "$ref": "#/definitions/Record<string,{mode:string;causes:string[];local_effects:string[];system_effects:string[];detection:string[];safeguards:string[];severity:number;probability:number;}>",
                    "description": "Failure modes analyzed"
                },
                "method_id": {
                    "description": "Unique identifier for the method",
                    "type": "string"
                },
                "review_date": {
                    "description": "Review date",
                    "type": "string"
                },
                "review_status": {
                    "description": "Review status",
                    "enum": [
                        "APPROVED",
                        "DRAFT",
                        "REVIEWED"
                    ],
                    "type": "string"
                },
                "supporting_documents": {
                    "description": "Supporting document references",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "systems": {
                    "$ref": "#/definitions/Record<string,{name:string;function:string;boundaries:string[];}>",
                    "description": "Systems analyzed"
                },
                "version": {
                    "description": "Version of the method",
                    "type": "string"
                }
            },
            "required": [
                "analyst",
                "components",
                "failure_modes",
                "method_id",
                "review_date",
                "review_status",
                "supporting_documents",
                "systems",
                "version"
            ],
            "type": "object"
        },
        "FaultTree": {
            "description": "Interface for a complete fault tree",
            "properties": {
                "assumptions": {
                    "description": "Assumptions made in the fault tree analysis",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the fault tree",
                    "type": "string"
                },
                "minimalCutSets": {
                    "description": "Minimal cut sets as arrays of basic event IDs",
                    "items": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "nodes": {
                    "$ref": "#/definitions/Record<string,FaultTreeNode>",
                    "description": "Map of node IDs to nodes"
                },
                "quantificationSettings": {
                    "description": "Quantification settings",
                    "properties": {
                        "maxOrder": {
                            "type": "number"
                        },
                        "method": {
                            "enum": [
                                "exact",
                                "mcub",
                                "mincut",
                                "rare-event"
                            ],
                            "type": "string"
                        },
                        "truncationLimit": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "systemReference": {
                    "$ref": "#/definitions/SystemReference",
                    "description": "Reference to the system this fault tree belongs to"
                },
                "topEventId": {
                    "description": "ID of the top event node within this fault tree's nodes map\nThis is an internal reference to identify which node in the fault tree represents the top event",
                    "type": "string"
                },
                "topEventProbability": {
                    "description": "Calculated probability of the top event",
                    "type": "number"
                },
                "topEventReference": {
                    "description": "Reference to a top event from the core events module\nThis allows linking the fault tree to a formally defined TopEvent in the core/events.ts file\nThis is different from topEventId, which references a node within this fault tree",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "description",
                "name",
                "nodes",
                "systemReference",
                "topEventId",
                "uuid"
            ],
            "type": "object"
        },
        "FaultTreeNode": {
            "description": "Unified interface for all fault tree nodes with type-specific properties",
            "properties": {
                "basicEventReference": {
                    "description": "Reference to a SystemBasicEvent",
                    "type": "string"
                },
                "condition": {
                    "description": "Condition for INHIBIT gates",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the node",
                    "type": "string"
                },
                "houseEventValue": {
                    "description": "For house events, whether the event is TRUE or FALSE",
                    "type": "boolean"
                },
                "humanActionReference": {
                    "$ref": "#/definitions/HumanActionReference",
                    "description": "Reference to a human action for human-related events"
                },
                "inputs": {
                    "description": "IDs of input nodes (for gates)",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "Name of the node",
                    "type": "string"
                },
                "nodeType": {
                    "$ref": "#/definitions/FaultTreeNodeType",
                    "description": "Type of node in the fault tree"
                },
                "probability": {
                    "description": "Probability for basic events",
                    "type": "number"
                },
                "sourceNodeId": {
                    "description": "For TRANSFER_IN: ID of the source node",
                    "type": "string"
                },
                "transferTreeId": {
                    "description": "For transfers: ID of the target/source fault tree",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "name",
                "nodeType",
                "uuid"
            ],
            "type": "object"
        },
        "FaultTreeNodeType": {
            "description": "Enum for fault tree node types, representing standard FTA symbols",
            "enum": [
                "AND_GATE",
                "OR_GATE",
                "INHIBIT_GATE",
                "BASIC_EVENT",
                "INTERMEDIATE_EVENT",
                "UNDEVELOPED_EVENT",
                "HOUSE_EVENT",
                "TRANSFER_IN",
                "TRANSFER_OUT"
            ],
            "type": "string"
        },
        "FlagEvent": {
            "description": "Representation of a flag event in the event sequence quantification",
            "properties": {
                "basis": {
                    "description": "Basis for using the flag event",
                    "type": "string"
                },
                "effect": {
                    "description": "Effect of the flag event on the model",
                    "type": "string"
                },
                "isTemporary": {
                    "description": "Whether the flag event is temporary or permanent",
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "purpose": {
                    "description": "Purpose of the flag event",
                    "type": "string"
                },
                "state": {
                    "description": "Logic state of the flag event (true, false)",
                    "type": "boolean"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "basis",
                "effect",
                "isTemporary",
                "name",
                "purpose",
                "state",
                "uuid"
            ],
            "type": "object"
        },
        "Frequency": {
            "allOf": [
                {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "minimum",
                                            "type": "string"
                                        },
                                        {
                                            "const": "exclusiveMinimum",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "minimum",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "minimum": {
                                            "const": 0,
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "minimum"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "number",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "0 <= $input",
                                    "type": "string"
                                },
                                "value": {
                                    "const": 0,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "number"
                }
            ],
            "description": "Used for event frequencies across different event types"
        },
        "FrequencyQuantification": {
            "description": "Interface representing the quantification of a frequency parameter.\nThis interface is used for frequency-based parameters such as initiating event frequencies.",
            "properties": {
                "bayesian_update": {
                    "$ref": "#/definitions/BayesianUpdate",
                    "description": "Bayesian update information (if performed)"
                },
                "distribution": {
                    "$ref": "#/definitions/DistributionType",
                    "description": "Type of probability distribution used for the frequency"
                },
                "distribution_parameters": {
                    "$ref": "#/definitions/Record<string,number>",
                    "description": "Parameters of the probability distribution"
                },
                "frequency": {
                    "description": "Estimated frequency value (mean)",
                    "type": "number"
                },
                "frequency_unit": {
                    "$ref": "#/definitions/FrequencyUnit",
                    "description": "Unit of the frequency"
                },
                "generic_data": {
                    "description": "Generic industry data used for the frequency estimation",
                    "properties": {
                        "applicability": {
                            "description": "Applicability of the generic data to the specific plant",
                            "type": "string"
                        },
                        "events": {
                            "description": "Number of events observed in the generic data",
                            "type": "number"
                        },
                        "exposure_time": {
                            "description": "Exposure time in the generic data",
                            "type": "number"
                        },
                        "exposure_unit": {
                            "$ref": "#/definitions/FrequencyUnit",
                            "description": "Unit of the exposure time"
                        },
                        "source": {
                            "description": "Source of the generic data",
                            "type": "string"
                        },
                        "time_period": {
                            "description": "Time period covered by the generic data",
                            "items": [
                                {
                                    "format": "date-time",
                                    "type": "string"
                                },
                                {
                                    "format": "date-time",
                                    "type": "string"
                                }
                            ],
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array"
                        }
                    },
                    "required": [
                        "applicability",
                        "events",
                        "exposure_time",
                        "exposure_unit",
                        "source",
                        "time_period"
                    ],
                    "type": "object"
                },
                "modules_impacted": {
                    "description": "Number of modules impacted by the event",
                    "type": "number"
                },
                "operating_state_fraction": {
                    "description": "Fraction of time spent in the operating state",
                    "type": "number"
                },
                "plant_specific_data": {
                    "description": "Plant-specific data used for the frequency estimation (if available)",
                    "properties": {
                        "applicability": {
                            "description": "Applicability of the plant-specific data",
                            "type": "string"
                        },
                        "events": {
                            "description": "Number of events observed in the plant-specific data",
                            "type": "number"
                        },
                        "exposure_time": {
                            "description": "Exposure time in the plant-specific data",
                            "type": "number"
                        },
                        "exposure_unit": {
                            "$ref": "#/definitions/FrequencyUnit",
                            "description": "Unit of the exposure time"
                        }
                    },
                    "required": [
                        "applicability",
                        "events",
                        "exposure_time",
                        "exposure_unit"
                    ],
                    "type": "object"
                },
                "sensitivityStudies": {
                    "description": "Sensitivity studies for this frequency quantification",
                    "items": {
                        "$ref": "#/definitions/SensitivityStudy"
                    },
                    "type": "array"
                },
                "total_modules": {
                    "description": "Total number of modules in the plant",
                    "type": "number"
                },
                "uncertainty": {
                    "$ref": "#/definitions/Uncertainty",
                    "description": "Uncertainty information for the frequency"
                }
            },
            "required": [
                "distribution",
                "distribution_parameters",
                "frequency",
                "frequency_unit",
                "generic_data",
                "modules_impacted",
                "operating_state_fraction",
                "total_modules",
                "uncertainty"
            ],
            "type": "object"
        },
        "FrequencyQuantification_1": {
            "properties": {
                "unit": {
                    "description": "The unit of the frequency",
                    "type": "string"
                },
                "value": {
                    "description": "The value of the frequency",
                    "type": "number"
                }
            },
            "required": [
                "unit",
                "value"
            ],
            "type": "object"
        },
        "FrequencyUnit": {
            "description": "Standardized units for expressing event frequencies across the PRA",
            "enum": [
                "per-reactor-year",
                "per-calendar-year",
                "per-critical-year",
                "per-demand"
            ],
            "type": "string"
        },
        "FunctionalDependencyModel": {
            "description": "Interface representing a functional dependency model.\nUsed to define and document functional dependencies between systems.",
            "properties": {
                "dependencies": {
                    "description": "Specific dependencies modeled",
                    "items": {
                        "$ref": "#/definitions/Dependency"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the dependency model",
                    "type": "string"
                },
                "involvedSystems": {
                    "description": "Systems involved in the functional dependency",
                    "items": {
                        "$ref": "#/definitions/SystemReference_1"
                    },
                    "type": "array"
                },
                "logicModel": {
                    "description": "Logic model representation (e.g., fault tree, event tree)",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "supportingAnalysisReferences": {
                    "description": "References to supporting analyses",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "dependencies",
                "description",
                "involvedSystems",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "FunctionalEvent": {
            "description": "Functional Event type",
            "properties": {
                "description": {
                    "type": "string"
                },
                "eventType": {
                    "const": "FUNCTIONAL",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "eventType",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "GroupingCriteria": {
            "description": "Interface representing criteria for grouping event sequences into families.",
            "properties": {
                "basis": {
                    "description": "Basis for the criteria",
                    "type": "string"
                },
                "characteristicsConsidered": {
                    "description": "Characteristics considered for grouping",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the criteria",
                    "type": "string"
                },
                "limitations": {
                    "description": "Limitations of the grouping criteria",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "characteristicsConsidered",
                "description",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "HazardAnalysis": {
            "description": "Interface representing hazard analysis that may induce initiating events",
            "properties": {
                "affected_areas": {
                    "description": "Plant areas or locations affected",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "analysis_methods": {
                    "description": "Analysis methods used",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the hazard",
                    "type": "string"
                },
                "hazard_type": {
                    "description": "Type of hazard (internal or external)",
                    "enum": [
                        "EXTERNAL",
                        "INTERNAL"
                    ],
                    "type": "string"
                },
                "induced_initiating_events": {
                    "description": "Initiating events that may be induced by this hazard",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "inducing_mechanisms": {
                    "description": "Potential inducing mechanisms for initiating events",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "potential_combinations": {
                    "description": "Other hazards that may combine with this one",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "radionuclide_barriers": {
                    "$ref": "#/definitions/Record<string,RadionuclideBarrier>",
                    "description": "Radionuclide barriers considered in the analysis"
                },
                "screening": {
                    "description": "Screening status and basis",
                    "properties": {
                        "basis": {
                            "type": "string"
                        },
                        "status": {
                            "$ref": "#/definitions/ScreeningStatus"
                        }
                    },
                    "required": [
                        "basis",
                        "status"
                    ],
                    "type": "object"
                },
                "severity_levels": {
                    "description": "Hazard severity levels considered",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subcategory": {
                    "description": "Hazard subcategory (e.g., \"SEISMIC\", \"FLOOD\", \"FIRE\")",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "affected_areas",
                "analysis_methods",
                "description",
                "hazard_type",
                "induced_initiating_events",
                "inducing_mechanisms",
                "name",
                "potential_combinations",
                "radionuclide_barriers",
                "screening",
                "severity_levels",
                "subcategory",
                "uuid"
            ],
            "type": "object"
        },
        "HazardInducedInitiator": {
            "description": "Hazard-induced initiating event",
            "properties": {
                "affected_areas": {
                    "description": "Areas of the plant affected",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "applicableStates": {
                    "description": "Plant operating states in which this initiating event can occur.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "barrier_impacts": {
                    "$ref": "#/definitions/Record<string,{barrier:string;state:BarrierStatus;timing:string;mechanism:string;}>",
                    "description": "Impact on radionuclide barriers"
                },
                "category": {
                    "description": "Category of the initiating event.",
                    "type": "string"
                },
                "combined_hazards": {
                    "description": "Combination of hazards (if applicable)",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Optional detailed description of the initiating event.",
                    "type": "string"
                },
                "eventType": {
                    "const": "INITIATING",
                    "type": "string"
                },
                "frequency": {
                    "$ref": "#/definitions/Frequency"
                },
                "genericAnalysisReview": {
                    "description": "Review of generic analyses of similar plants.",
                    "type": "string"
                },
                "group": {
                    "description": "Grouping of initiating events with similar mitigation requirements.",
                    "type": "string"
                },
                "groupId": {
                    "description": "Unique identifier for the grouping of initiating events for analysis purposes.",
                    "type": "string"
                },
                "hazard_frequency_factors": {
                    "description": "Hazard-specific frequency calculation factors",
                    "properties": {
                        "exceedance_probability": {
                            "type": "number"
                        },
                        "fragility_parameters": {
                            "$ref": "#/definitions/Record<string,number>"
                        },
                        "return_period": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "hazard_severity": {
                    "description": "Hazard severity level",
                    "type": "string"
                },
                "hazard_type": {
                    "description": "Type of hazard (e.g., \"SEISMIC\", \"FIRE\", \"FLOOD\")",
                    "type": "string"
                },
                "id": {
                    "description": "Alternative ID for the initiator",
                    "type": "string"
                },
                "identification_basis": {
                    "description": "Basis for identification of this initiator",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "identification_method": {
                    "description": "Method used to identify this initiating event",
                    "type": "string"
                },
                "importanceLevel": {
                    "description": "Importance level of this initiating event for risk insights",
                    "enum": [
                        "HIGH",
                        "LOW",
                        "MEDIUM"
                    ],
                    "type": "string"
                },
                "mitigating_systems": {
                    "$ref": "#/definitions/Record<string,{system:string;function:string;success_criteria:string|string[]|SuccessCriteriaId;dependencies:string[];}>",
                    "description": "Systems that can mitigate this initiating event"
                },
                "module_impacts": {
                    "$ref": "#/definitions/Record<string,{module:string;state:ModuleState;propagation_path?:string|undefined;timing?:string|undefined;}>",
                    "description": "Impact on reactor modules (for multi-module plants)"
                },
                "name": {
                    "type": "string"
                },
                "operating_states": {
                    "description": "Operating states in which this initiator can occur",
                    "items": {
                        "$ref": "#/definitions/OperatingState"
                    },
                    "type": "array"
                },
                "plantExperience": {
                    "description": "List of plant-specific experience related to this initiating event (for operating plants).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "preOperationalAssumptions": {
                    "description": "Assumptions made due to lack of as-built, as-operated details (for pre-operational stage).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "screeningBasis": {
                    "description": "Basis for screening out this initiating event (if applicable).",
                    "type": "string"
                },
                "screeningStatus": {
                    "description": "Screening status of this initiating event",
                    "enum": [
                        "FULL_ANALYSIS",
                        "MERGED",
                        "QUALITATIVE_ANALYSIS",
                        "RETAINED",
                        "SCREENED_OUT"
                    ],
                    "type": "string"
                },
                "subcategory": {
                    "description": "Subcategory of the initiating event",
                    "type": "string"
                },
                "supportingAnalyses": {
                    "description": "References to supporting analyses (e.g., fault trees).",
                    "items": {
                        "properties": {
                            "analysisId": {
                                "type": "string"
                            },
                            "analysisType": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "analysisId",
                            "analysisType"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "trip_parameters": {
                    "$ref": "#/definitions/Record<string,{parameter:string;setpoint:number;uncertainty:number;basis:string;}>",
                    "description": "Parameters that trigger reactor/plant trips"
                },
                "uncertainty": {
                    "$ref": "#/definitions/Uncertainty",
                    "description": "Model uncertainty, data sources, and assumptions associated with the initiating event."
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "affected_areas",
                "barrier_impacts",
                "category",
                "eventType",
                "frequency",
                "hazard_frequency_factors",
                "hazard_severity",
                "hazard_type",
                "id",
                "identification_basis",
                "identification_method",
                "mitigating_systems",
                "module_impacts",
                "name",
                "operating_states",
                "trip_parameters",
                "uuid"
            ],
            "type": "object"
        },
        "HazardousSources": {
            "description": "Interface representing hazardous sources in operating state analysis.\nPer RG 1.247, POS definitions should include all sources of radioactive material within the scope of the PRA,\nincluding ex-vessel sources, unless there is a documented technical justification for excluding ex-vessel sources.",
            "properties": {
                "detailedSources": {
                    "description": "Detailed information about radioactive sources",
                    "items": {
                        "$ref": "#/definitions/RadioactiveSource"
                    },
                    "type": "array"
                },
                "exVesselSourceExclusionJustification": {
                    "description": "Technical justification for excluding any ex-vessel sources, if applicable",
                    "type": "string"
                },
                "operatingStates": {
                    "$ref": "#/definitions/PlantOperatingStatesTable",
                    "description": "Operating states information"
                },
                "operatingStatesFrequencyDuration": {
                    "$ref": "#/definitions/OperatingStatesFrequencyDuration",
                    "description": "Operating states frequency and duration data"
                },
                "plantEvolution": {
                    "$ref": "#/definitions/PlantEvolution",
                    "description": "Plant evolution information"
                },
                "sourceDefinition": {
                    "$ref": "#/definitions/Record<SourceLocationType,ScreeningStatus>",
                    "description": "Source definitions with their screening status"
                }
            },
            "required": [
                "operatingStates",
                "operatingStatesFrequencyDuration",
                "plantEvolution",
                "sourceDefinition"
            ],
            "type": "object"
        },
        "HeatBalanceFaultTree": {
            "description": "Heat Balance Fault Tree method for identifying initiating events",
            "properties": {
                "analyst": {
                    "description": "Analyst who performed the method",
                    "type": "string"
                },
                "causes": {
                    "$ref": "#/definitions/Record<string,{description:string;probability:number;uncertainty?:Uncertainty|undefined;}>",
                    "description": "Causes of imbalances"
                },
                "imbalances": {
                    "$ref": "#/definitions/Record<string,{description:string;threshold:number;consequences:string[];}>",
                    "description": "Process imbalances"
                },
                "interfaces": {
                    "$ref": "#/definitions/Record<string,{name:string;parameters:string[];normal_ranges:[number,number][];}>",
                    "description": "System interfaces"
                },
                "method_id": {
                    "description": "Unique identifier for the method",
                    "type": "string"
                },
                "operating_states": {
                    "$ref": "#/definitions/Set<OperatingState>",
                    "description": "Operating states considered"
                },
                "review_date": {
                    "description": "Review date",
                    "type": "string"
                },
                "review_status": {
                    "description": "Review status",
                    "enum": [
                        "APPROVED",
                        "DRAFT",
                        "REVIEWED"
                    ],
                    "type": "string"
                },
                "supporting_documents": {
                    "description": "Supporting document references",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "systems_components": {
                    "$ref": "#/definitions/Record<string,SystemDefinition>",
                    "description": "Systems and components"
                },
                "version": {
                    "description": "Version of the method",
                    "type": "string"
                }
            },
            "required": [
                "analyst",
                "causes",
                "imbalances",
                "interfaces",
                "method_id",
                "operating_states",
                "review_date",
                "review_status",
                "supporting_documents",
                "systems_components",
                "version"
            ],
            "type": "object"
        },
        "HumanActionReference": {
            "allOf": [
                {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "pattern",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "pattern": {
                                            "const": "^HRA-[0-9]+$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "pattern"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "RegExp(\"^HRA-[0-9]+$\").test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "^HRA-[0-9]+$",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ],
            "description": "Reference to a Human Action by its unique identifier.\nFormat: HRA-[NUMBER] (e.g., HRA-001)"
        },
        "HumanActionReference_1": {
            "allOf": [
                {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "pattern",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "pattern": {
                                            "const": "^HRA-[0-9]+$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "pattern"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "RegExp(\"^HRA-[0-9]+$\").test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "^HRA-[0-9]+$",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ],
            "description": "Type for human action references.\nFormat: HRA-[NUMBER]\nExample: HRA-001"
        },
        "HumanActionSuccessCriteriaDefinition": {
            "description": "Represents human action success criteria.",
            "properties": {
                "analysisReferences": {
                    "description": "References to supporting analyses",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the action",
                    "type": "string"
                },
                "humanActionId": {
                    "description": "Human action identifier",
                    "type": "string"
                },
                "procedureReference": {
                    "description": "Reference to procedures guiding the action",
                    "type": "string"
                },
                "successCriteria": {
                    "description": "Success criteria for the action",
                    "type": "string"
                },
                "timeAvailable": {
                    "description": "Time available for successful completion",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "analysisReferences",
                "description",
                "humanActionId",
                "successCriteria",
                "timeAvailable",
                "uuid"
            ],
            "type": "object"
        },
        "HumanDependencyModel": {
            "description": "Interface representing a human dependency model.\nUsed to define and document dependencies involving human actions.",
            "properties": {
                "affectedSystems": {
                    "description": "Systems affected by the human actions",
                    "items": {
                        "$ref": "#/definitions/SystemReference_1"
                    },
                    "type": "array"
                },
                "dependencyType": {
                    "description": "Type of dependency between human actions",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the human dependency",
                    "type": "string"
                },
                "hraReferences": {
                    "description": "References to human reliability analyses",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "involvedHumanActions": {
                    "description": "Human actions involved in the dependency",
                    "items": {
                        "$ref": "#/definitions/HumanActionReference_1"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "dependencyType",
                "description",
                "involvedHumanActions",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "HumanFailureEventDependency": {
            "description": "Representation of human failure event dependencies in cutsets",
            "properties": {
                "adjustedProbabilities": {
                    "$ref": "#/definitions/Record<string,number>",
                    "description": "Adjusted probabilities after dependency assessment"
                },
                "dependencyLevel": {
                    "description": "Level of dependency (\"ZERO\", \"LOW\", \"MEDIUM\", \"HIGH\", \"COMPLETE\")",
                    "type": "string"
                },
                "dependentHFEs": {
                    "description": "List of human failure events that are dependent",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "adjustedProbabilities",
                "dependencyLevel",
                "dependentHFEs"
            ],
            "type": "object"
        },
        "HumanFailureEventIntegration": {
            "description": "Interface for a human failure event integrated into system models.",
            "properties": {
                "hfeReference": {
                    "$ref": "#/definitions/HumanActionReference",
                    "description": "Reference to the human action."
                },
                "impact": {
                    "description": "The impact of this human failure on system performance.",
                    "type": "string"
                },
                "isTestMaintenance": {
                    "description": "Whether this is related to test and maintenance activities.",
                    "type": "boolean"
                },
                "system": {
                    "$ref": "#/definitions/SystemReference",
                    "description": "The system affected by this human failure event."
                },
                "taskDescription": {
                    "description": "Description of the task that can be failed.",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "hfeReference",
                "isTestMaintenance",
                "system",
                "taskDescription",
                "uuid"
            ],
            "type": "object"
        },
        "IdentificationMethodBase": {
            "description": "Base interface for identification methods with version tracking information",
            "properties": {
                "analyst": {
                    "description": "Analyst who performed the method",
                    "type": "string"
                },
                "method_id": {
                    "description": "Unique identifier for the method",
                    "type": "string"
                },
                "review_date": {
                    "description": "Review date",
                    "type": "string"
                },
                "review_status": {
                    "description": "Review status",
                    "enum": [
                        "APPROVED",
                        "DRAFT",
                        "REVIEWED"
                    ],
                    "type": "string"
                },
                "supporting_documents": {
                    "description": "Supporting document references",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "version": {
                    "description": "Version of the method",
                    "type": "string"
                }
            },
            "required": [
                "analyst",
                "method_id",
                "review_date",
                "review_status",
                "supporting_documents",
                "version"
            ],
            "type": "object"
        },
        "ImportanceAnalysis": {
            "description": "Importance analysis for event sequence quantification",
            "properties": {
                "analysisType": {
                    "description": "Type of importance analysis",
                    "enum": [
                        "BIRNBAUM",
                        "FUSSELL_VESELY",
                        "OTHER",
                        "RISK_ACHIEVEMENT_WORTH",
                        "RISK_REDUCTION_WORTH"
                    ],
                    "type": "string"
                },
                "basicEventImportance": {
                    "$ref": "#/definitions/Record<string,number>",
                    "description": "Importance results for basic events"
                },
                "humanFailureEventImportance": {
                    "$ref": "#/definitions/Record<string,number>",
                    "description": "Importance results for human failure events"
                },
                "initiatingEventImportance": {
                    "$ref": "#/definitions/Record<string,number>",
                    "description": "Importance results for initiating events"
                },
                "scope": {
                    "description": "Scope of the analysis",
                    "enum": [
                        "OVERALL",
                        "PER_FAMILY",
                        "PER_SEQUENCE"
                    ],
                    "type": "string"
                },
                "significanceCutoff": {
                    "description": "Cutoff value used for significance determination",
                    "type": "number"
                },
                "significantBasicEvents": {
                    "description": "Risk-significant basic events",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "significantHumanFailureEvents": {
                    "description": "Risk-significant human failure events",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "significantInitiatingEvents": {
                    "description": "Risk-significant initiating events",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "significantTopEvents": {
                    "description": "Risk-significant fault tree top events",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "topEventImportance": {
                    "$ref": "#/definitions/Record<string,number>",
                    "description": "Importance results for fault tree top events"
                }
            },
            "required": [
                "analysisType",
                "scope"
            ],
            "type": "object"
        },
        "ImportanceLevel": {
            "description": "Provides consistent categorization of significance levels across the PRA technical elements",
            "enum": [
                "HIGH",
                "MEDIUM",
                "LOW"
            ],
            "type": "string"
        },
        "InitiatingEvent": {
            "description": "Initiating Event type",
            "properties": {
                "description": {
                    "type": "string"
                },
                "eventType": {
                    "const": "INITIATING",
                    "type": "string"
                },
                "frequency": {
                    "$ref": "#/definitions/Frequency"
                },
                "name": {
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "eventType",
                "frequency",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "InitiatingEventCategory": {
            "description": "These categories help in the organization and analysis of different types of events.",
            "enum": [
                "TRANSIENT",
                "RCB_BREACH",
                "INTERFACING_SYSTEMS_RCB_BREACH",
                "SPECIAL",
                "INTERNAL_HAZARD",
                "EXTERNAL_HAZARD",
                "HUMAN_FAILURE"
            ],
            "type": "string"
        },
        "InitiatingEventDocumentation": {
            "description": "Documentation of the Initiating Event Analysis process",
            "properties": {
                "appliedMethods": {
                    "description": "Methods applied in the analysis",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "completenessAssessment": {
                    "description": "Assessment of initiating events completeness",
                    "type": "string"
                },
                "dataExclusionJustification": {
                    "description": "Justification for excluding certain data",
                    "type": "string"
                },
                "dismissalJustification": {
                    "description": "Justification for dismissing observed events",
                    "type": "string"
                },
                "frequencyDerivation": {
                    "description": "Method for deriving initiating event frequencies",
                    "type": "string"
                },
                "functionalCategories": {
                    "description": "Functional categories considered",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "groupingBasis": {
                    "description": "Basis for grouping initiating events",
                    "type": "string"
                },
                "inputSources": {
                    "description": "Input sources used in the analysis",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "otherDataApplicationJustification": {
                    "description": "Justification for applying data from other reactor types",
                    "type": "string"
                },
                "plantUniqueInitiatorsSearch": {
                    "description": "Search process for plant-unique initiators",
                    "type": "string"
                },
                "processDescription": {
                    "description": "Description of the analysis process",
                    "type": "string"
                },
                "quantificationApproach": {
                    "description": "Approach to quantification",
                    "type": "string"
                },
                "rcbFailureSearch": {
                    "description": "Process for identifying RCB failures",
                    "type": "string"
                },
                "resultsSummary": {
                    "description": "Summary of analysis results",
                    "type": "string"
                },
                "screeningBasis": {
                    "description": "Basis for screening out initiating events",
                    "type": "string"
                },
                "stateSpecificInitiatorsSearch": {
                    "description": "Process for identifying state-specific initiators",
                    "type": "string"
                }
            },
            "required": [
                "appliedMethods",
                "completenessAssessment",
                "dataExclusionJustification",
                "dismissalJustification",
                "frequencyDerivation",
                "functionalCategories",
                "groupingBasis",
                "inputSources",
                "otherDataApplicationJustification",
                "plantUniqueInitiatorsSearch",
                "processDescription",
                "quantificationApproach",
                "rcbFailureSearch",
                "resultsSummary",
                "screeningBasis",
                "stateSpecificInitiatorsSearch"
            ],
            "type": "object"
        },
        "InitiatingEventGroup": {
            "description": "Initiating event group defined by similar mitigation requirements",
            "properties": {
                "applicable_operating_states": {
                    "description": "Applicable operating states",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "bounding_initiator_id": {
                    "description": "The bounding (worst-case) initiator in the group",
                    "type": "string"
                },
                "challenged_safety_functions": {
                    "description": "Safety functions challenged",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the group",
                    "type": "string"
                },
                "grouping_basis": {
                    "description": "Basis for grouping",
                    "type": "string"
                },
                "member_ids": {
                    "description": "Member initiating events IDs",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "quantification": {
                    "$ref": "#/definitions/FrequencyQuantification",
                    "description": "Frequency quantification for the group"
                },
                "risk_importance": {
                    "description": "Risk importance of the group",
                    "enum": [
                        "HIGH",
                        "LOW",
                        "MEDIUM"
                    ],
                    "type": "string"
                },
                "shared_mitigation_requirements": {
                    "description": "Shared mitigation requirements",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "applicable_operating_states",
                "bounding_initiator_id",
                "challenged_safety_functions",
                "description",
                "grouping_basis",
                "member_ids",
                "name",
                "shared_mitigation_requirements",
                "uuid"
            ],
            "type": "object"
        },
        "InitiatingEventQuantification": {
            "description": "Quantification details for an initiating event",
            "properties": {
                "data_exclusion_justification": {
                    "description": "Basis for excluding data, if any",
                    "type": "string"
                },
                "event_id": {
                    "description": "ID of the initiating event or group",
                    "type": "string"
                },
                "fault_tree_details": {
                    "description": "Fault tree details, if used for quantification",
                    "properties": {
                        "model_id": {
                            "type": "string"
                        },
                        "modifications": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "top_event": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "model_id",
                        "modifications",
                        "top_event"
                    ],
                    "type": "object"
                },
                "other_reactor_data_justification": {
                    "description": "Basis for applying data from other reactor types",
                    "type": "string"
                },
                "quantification": {
                    "$ref": "#/definitions/FrequencyQuantification",
                    "description": "Frequency quantification"
                },
                "sensitivityStudies": {
                    "description": "Sensitivity studies performed",
                    "items": {
                        "$ref": "#/definitions/SensitivityStudy"
                    },
                    "type": "array"
                }
            },
            "required": [
                "event_id",
                "quantification"
            ],
            "type": "object"
        },
        "InitiatingEventScreeningCriteria": {
            "description": "Criteria for screening out initiating events",
            "properties": {
                "basis": {
                    "description": "Basis for screening criteria",
                    "type": "string"
                },
                "damage_frequency_criterion": {
                    "description": "Damage frequency screening criterion (if applicable)",
                    "type": "number"
                },
                "elementSpecificProperties": {
                    "$ref": "#/definitions/Record<string,unknown>",
                    "description": "Technical element specific properties\nAllows for extension with properties specific to a technical element"
                },
                "frequency_criterion": {
                    "description": "Frequency-based screening criterion (if applicable)",
                    "type": "number"
                },
                "risk_criterion": {
                    "description": "Risk-based screening criterion (if applicable)",
                    "type": "number"
                },
                "screened_out_elements": {
                    "description": "List of screened-out elements",
                    "items": {
                        "properties": {
                            "element_id": {
                                "description": "ID of the screened-out element",
                                "type": "string"
                            },
                            "justification": {
                                "description": "Detailed justification for screening decision",
                                "type": "string"
                            },
                            "reason": {
                                "description": "Reason for screening out",
                                "type": "string"
                            }
                        },
                        "required": [
                            "element_id",
                            "justification",
                            "reason"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "screened_out_events": {
                    "description": "List of screened-out initiating events",
                    "items": {
                        "properties": {
                            "event_id": {
                                "type": "string"
                            },
                            "justification": {
                                "type": "string"
                            },
                            "reason": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "event_id",
                            "justification",
                            "reason"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "basis",
                "screened_out_elements",
                "screened_out_events"
            ],
            "type": "object"
        },
        "InitiatingEventsAnalysis": {
            "description": "Main interface for initiating events analysis\nImplements comprehensive analysis of initiating events including identification,\ngrouping, quantification, and insights",
            "properties": {
                "additionalMetadata": {
                    "description": "Additional metadata specific to Initiating Events Analysis",
                    "properties": {
                        "assumptions": {
                            "description": "Assumptions specific to initiating events analysis",
                            "items": {
                                "$ref": "#/definitions/Assumption_1"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "assumptions"
                    ],
                    "type": "object"
                },
                "applicable_plant_operating_states": {
                    "description": "References to plant operating states that are considered in this analysis",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "commonAssumptions": {
                    "description": "Common assumptions that apply across this technical element\nUsing the standardized BaseAssumption interface",
                    "items": {
                        "$ref": "#/definitions/BaseAssumption"
                    },
                    "type": "array"
                },
                "created": {
                    "description": "The date the technical element was created",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the technical element",
                    "type": "string"
                },
                "documentation": {
                    "$ref": "#/definitions/InitiatingEventDocumentation",
                    "description": "Documentation of the Initiating Event Analysis process."
                },
                "identification": {
                    "description": "Methods used for identifying initiating events",
                    "properties": {
                        "failure_modes_analysis": {
                            "$ref": "#/definitions/FailureModesEffectAnalysis"
                        },
                        "heat_balance_fault_tree": {
                            "$ref": "#/definitions/HeatBalanceFaultTree"
                        },
                        "master_logic_diagram": {
                            "$ref": "#/definitions/MasterLogicDiagram"
                        }
                    },
                    "required": [
                        "failure_modes_analysis",
                        "heat_balance_fault_tree",
                        "master_logic_diagram"
                    ],
                    "type": "object"
                },
                "initiating_event_groups": {
                    "$ref": "#/definitions/Record<string,InitiatingEventGroup>",
                    "description": "Grouping of initiating events with similar mitigation requirements"
                },
                "initiators": {
                    "$ref": "#/definitions/Record<string,InitiatorDefinition>",
                    "description": "Identified initiating events"
                },
                "insights": {
                    "description": "Risk insights from the analysis",
                    "properties": {
                        "dominant_contributors": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "key_assumptions": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "sensitivityStudies": {
                            "$ref": "#/definitions/Record<string,SensitivityStudy>"
                        },
                        "uncertainty_drivers": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "dominant_contributors",
                        "key_assumptions",
                        "sensitivityStudies",
                        "uncertainty_drivers"
                    ],
                    "type": "object"
                },
                "modified": {
                    "description": "The date the technical element was last modified",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "description": "The owner of the technical element",
                    "type": "string"
                },
                "peer_review": {
                    "$ref": "#/definitions/PeerReviewDocumentation_2",
                    "description": "Peer review documentation"
                },
                "pre_operational_assumptions": {
                    "description": "Pre-operational assumptions and limitations",
                    "items": {
                        "$ref": "#/definitions/PreOperationalAssumptions"
                    },
                    "type": "array"
                },
                "quantification": {
                    "$ref": "#/definitions/Record<string,InitiatingEventQuantification>",
                    "description": "Frequency quantification for initiating events"
                },
                "references": {
                    "description": "References to other technical elements",
                    "items": {
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "technicalElementId": {
                                "type": "string"
                            },
                            "technicalElementType": {
                                "$ref": "#/definitions/TechnicalElementTypes"
                            }
                        },
                        "required": [
                            "description",
                            "technicalElementId",
                            "technicalElementType"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "screening_criteria": {
                    "$ref": "#/definitions/InitiatingEventScreeningCriteria",
                    "description": "Screening criteria used to exclude initiating events"
                },
                "status": {
                    "description": "The status of the technical element",
                    "enum": [
                        "APPROVED",
                        "DEPRECATED",
                        "DRAFT",
                        "REVIEW"
                    ],
                    "type": "string"
                },
                "tags": {
                    "description": "Tags associated with the technical element",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "const": "initiating-event-analysis",
                    "description": "The type of technical element",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "version": {
                    "description": "The version of the technical element",
                    "type": "string"
                }
            },
            "required": [
                "applicable_plant_operating_states",
                "created",
                "identification",
                "initiating_event_groups",
                "initiators",
                "insights",
                "modified",
                "name",
                "quantification",
                "screening_criteria",
                "type",
                "uuid",
                "version"
            ],
            "type": "object"
        },
        "InitiationActuationSystem": {
            "description": "Minimal interface for initiation and actuation systems",
            "properties": {
                "description": {
                    "description": "Description of the initiation/actuation system",
                    "type": "string"
                },
                "detailedModeling": {
                    "description": "Whether detailed modeling is used",
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "systemReference": {
                    "$ref": "#/definitions/SystemReference",
                    "description": "Reference to the system being initiated/actuated"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "description",
                "detailedModeling",
                "name",
                "systemReference",
                "uuid"
            ],
            "type": "object"
        },
        "InitiatorDefinition": {
            "description": "Comprehensive definition of an initiating event",
            "properties": {
                "applicableStates": {
                    "description": "Plant operating states in which this initiating event can occur.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "barrier_impacts": {
                    "$ref": "#/definitions/Record<string,{barrier:string;state:BarrierStatus;timing:string;mechanism:string;}>",
                    "description": "Impact on radionuclide barriers"
                },
                "category": {
                    "description": "Category of the initiating event.",
                    "type": "string"
                },
                "description": {
                    "description": "Optional detailed description of the initiating event.",
                    "type": "string"
                },
                "eventType": {
                    "const": "INITIATING",
                    "type": "string"
                },
                "frequency": {
                    "$ref": "#/definitions/Frequency"
                },
                "genericAnalysisReview": {
                    "description": "Review of generic analyses of similar plants.",
                    "type": "string"
                },
                "group": {
                    "description": "Grouping of initiating events with similar mitigation requirements.",
                    "type": "string"
                },
                "groupId": {
                    "description": "Unique identifier for the grouping of initiating events for analysis purposes.",
                    "type": "string"
                },
                "id": {
                    "description": "Alternative ID for the initiator",
                    "type": "string"
                },
                "identification_basis": {
                    "description": "Basis for identification of this initiator",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "identification_method": {
                    "description": "Method used to identify this initiating event",
                    "type": "string"
                },
                "importanceLevel": {
                    "description": "Importance level of this initiating event for risk insights",
                    "enum": [
                        "HIGH",
                        "LOW",
                        "MEDIUM"
                    ],
                    "type": "string"
                },
                "mitigating_systems": {
                    "$ref": "#/definitions/Record<string,{system:string;function:string;success_criteria:string|string[]|SuccessCriteriaId;dependencies:string[];}>",
                    "description": "Systems that can mitigate this initiating event"
                },
                "module_impacts": {
                    "$ref": "#/definitions/Record<string,{module:string;state:ModuleState;propagation_path?:string|undefined;timing?:string|undefined;}>",
                    "description": "Impact on reactor modules (for multi-module plants)"
                },
                "name": {
                    "type": "string"
                },
                "operating_states": {
                    "description": "Operating states in which this initiator can occur",
                    "items": {
                        "$ref": "#/definitions/OperatingState"
                    },
                    "type": "array"
                },
                "plantExperience": {
                    "description": "List of plant-specific experience related to this initiating event (for operating plants).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "preOperationalAssumptions": {
                    "description": "Assumptions made due to lack of as-built, as-operated details (for pre-operational stage).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "screeningBasis": {
                    "description": "Basis for screening out this initiating event (if applicable).",
                    "type": "string"
                },
                "screeningStatus": {
                    "description": "Screening status of this initiating event",
                    "enum": [
                        "FULL_ANALYSIS",
                        "MERGED",
                        "QUALITATIVE_ANALYSIS",
                        "RETAINED",
                        "SCREENED_OUT"
                    ],
                    "type": "string"
                },
                "subcategory": {
                    "description": "Subcategory of the initiating event",
                    "type": "string"
                },
                "supportingAnalyses": {
                    "description": "References to supporting analyses (e.g., fault trees).",
                    "items": {
                        "properties": {
                            "analysisId": {
                                "type": "string"
                            },
                            "analysisType": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "analysisId",
                            "analysisType"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "trip_parameters": {
                    "$ref": "#/definitions/Record<string,{parameter:string;setpoint:number;uncertainty:number;basis:string;}>",
                    "description": "Parameters that trigger reactor/plant trips"
                },
                "uncertainty": {
                    "$ref": "#/definitions/Uncertainty",
                    "description": "Model uncertainty, data sources, and assumptions associated with the initiating event."
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "barrier_impacts",
                "category",
                "eventType",
                "frequency",
                "id",
                "identification_basis",
                "identification_method",
                "mitigating_systems",
                "module_impacts",
                "name",
                "operating_states",
                "trip_parameters",
                "uuid"
            ],
            "type": "object"
        },
        "Instrument": {
            "description": "Interface representing an instrument used to monitor key plant parameters.\nThis helps ensure adequate instrumentation for each plant operating state.",
            "properties": {
                "accuracy": {
                    "description": "Accuracy of the instrument (e.g., ±1%)",
                    "type": "number"
                },
                "availability": {
                    "description": "Whether the instrument is available in this plant operating state",
                    "type": "boolean"
                },
                "calibrationRequirements": {
                    "description": "Calibration requirements",
                    "type": "string"
                },
                "location": {
                    "description": "Location of the instrument in the plant",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parameter": {
                    "description": "Parameter being monitored (e.g., Temperature, Pressure)",
                    "type": "string"
                },
                "range": {
                    "description": "Range of the instrument",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "safetyRelated": {
                    "description": "Whether the instrument is safety-related",
                    "type": "boolean"
                },
                "units": {
                    "description": "Units of measurement",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "accuracy",
                "availability",
                "location",
                "name",
                "parameter",
                "safetyRelated",
                "uuid"
            ],
            "type": "object"
        },
        "IntegratedRiskResultReference": {
            "allOf": [
                {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "pattern",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "pattern": {
                                            "const": "^IRR-[A-Za-z0-9_-]+$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "pattern"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "RegExp(\"^IRR-[A-Za-z0-9_-]+$\").test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "^IRR-[A-Za-z0-9_-]+$",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ],
            "description": "Reference to an Integrated Risk Result by its unique identifier."
        },
        "IntegratedRiskResults": {
            "description": "Interface representing the calculated overall risk using defined risk metrics.",
            "properties": {
                "aggregationApproach": {
                    "description": "Specific approach used to account for differences in level of detail and conservatism\nwhen aggregating results from different sources [152, RI-B3].",
                    "properties": {
                        "conservatismAdjustments": {
                            "description": "Adjustments made to ensure consistent level of conservatism",
                            "type": "string"
                        },
                        "description": {
                            "description": "Description of the approach",
                            "type": "string"
                        },
                        "detailLevelAdjustments": {
                            "description": "Adjustments made to ensure consistent level of detail",
                            "type": "string"
                        },
                        "justification": {
                            "description": "Justification for the approach",
                            "type": "string"
                        }
                    },
                    "required": [
                        "description",
                        "justification"
                    ],
                    "type": "object"
                },
                "calculationApproach": {
                    "description": "Calculation approach used for risk integration [152, RI-B2].\nSpecifies which approach(es) from RI-B2 were used.",
                    "properties": {
                        "alternativeApproach": {
                            "description": "Description of alternative approaches, if used [152, RI-B2].",
                            "type": "string"
                        },
                        "exceedanceFrequencyCurves": {
                            "description": "Whether exceedance frequency curves (CCDF) were used [152, RI-B2(c)].",
                            "type": "boolean"
                        },
                        "frequencyConsequencePlots": {
                            "description": "Whether frequency-consequence plots were used [152, RI-B2(b)].",
                            "type": "boolean"
                        },
                        "justification": {
                            "description": "Justification for the selected approach(es) [152, RI-B2].",
                            "type": "string"
                        },
                        "meanValueApproach": {
                            "description": "Whether mean value approach was used (sum of the product of mean frequencies \nand mean consequences) [152, RI-B2(a)].",
                            "type": "boolean"
                        },
                        "pointEstimateApproach": {
                            "description": "Whether point estimate approach was used (sum of the product of point estimate \nfrequencies and consequences) [152, RI-B2(a)].",
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "justification"
                    ],
                    "type": "object"
                },
                "complianceStatus": {
                    "description": "Status of compliance with applicable risk acceptance criteria.",
                    "items": {
                        "properties": {
                            "basis": {
                                "type": "string"
                            },
                            "criterion": {
                                "type": "string"
                            },
                            "limit": {
                                "type": "number"
                            },
                            "margin": {
                                "type": "number"
                            },
                            "status": {
                                "enum": [
                                    "COMPLIANT",
                                    "INDETERMINATE",
                                    "NON_COMPLIANT"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "criterion",
                            "limit",
                            "status"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the integrated risk results [152, RI-B2].",
                    "type": "string"
                },
                "eventSequenceVariationJustification": {
                    "description": "Justification that the selection of event sequence variations within each family\nis representative of the range of potential outcomes [152, RI-B5].",
                    "type": "string"
                },
                "exceedanceFrequencyCurveData": {
                    "description": "Exceedance frequency curve data, if this approach was used [152, RI-B2(c)].\nRepresents complementary cumulative distribution function (CCDF) data.",
                    "items": {
                        "properties": {
                            "consequenceMetric": {
                                "description": "Consequence metric (e.g., \"person-rem\", \"Ci released\")",
                                "type": "string"
                            },
                            "dataPoints": {
                                "description": "Data points for the exceedance frequency curve",
                                "items": {
                                    "properties": {
                                        "consequenceValue": {
                                            "description": "Consequence value",
                                            "type": "number"
                                        },
                                        "exceedanceFrequency": {
                                            "description": "Frequency of exceeding this consequence value",
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "consequenceValue",
                                        "exceedanceFrequency"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "uncertaintyBands": {
                                "description": "Uncertainty in the exceedance frequency curve",
                                "items": {
                                    "properties": {
                                        "confidenceLevel": {
                                            "description": "Confidence level (e.g., 0.05 for 5th percentile, 0.95 for 95th percentile)",
                                            "type": "number"
                                        },
                                        "dataPoints": {
                                            "description": "Data points for this confidence level",
                                            "items": {
                                                "properties": {
                                                    "consequenceValue": {
                                                        "description": "Consequence value",
                                                        "type": "number"
                                                    },
                                                    "exceedanceFrequency": {
                                                        "description": "Exceedance frequency at this confidence level",
                                                        "type": "number"
                                                    }
                                                },
                                                "required": [
                                                    "consequenceValue",
                                                    "exceedanceFrequency"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "confidenceLevel",
                                        "dataPoints"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "consequenceMetric",
                            "dataPoints"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "frequencyConsequencePlotData": {
                    "description": "Frequency-consequence plot data, if this approach was used [152, RI-B2(b)].",
                    "items": {
                        "properties": {
                            "consequence": {
                                "description": "Consequence value (mean or point estimate)",
                                "type": "number"
                            },
                            "consequenceMetric": {
                                "description": "Consequence metric (e.g., \"person-rem\", \"Ci released\")",
                                "type": "string"
                            },
                            "consequenceUncertainty": {
                                "description": "Uncertainty in consequence (e.g., 5th and 95th percentiles)",
                                "properties": {
                                    "confidenceLevel": {
                                        "type": "number"
                                    },
                                    "lowerBound": {
                                        "type": "number"
                                    },
                                    "upperBound": {
                                        "type": "number"
                                    }
                                },
                                "required": [
                                    "confidenceLevel",
                                    "lowerBound",
                                    "upperBound"
                                ],
                                "type": "object"
                            },
                            "eventSequenceId": {
                                "description": "ID of the event sequence or event sequence family",
                                "type": "string"
                            },
                            "eventSequenceName": {
                                "description": "Name of the event sequence or event sequence family",
                                "type": "string"
                            },
                            "frequency": {
                                "description": "Frequency value (mean or point estimate)",
                                "type": "number"
                            },
                            "frequencyUncertainty": {
                                "description": "Uncertainty in frequency (e.g., 5th and 95th percentiles)",
                                "properties": {
                                    "confidenceLevel": {
                                        "type": "number"
                                    },
                                    "lowerBound": {
                                        "type": "number"
                                    },
                                    "upperBound": {
                                        "type": "number"
                                    }
                                },
                                "required": [
                                    "confidenceLevel",
                                    "lowerBound",
                                    "upperBound"
                                ],
                                "type": "object"
                            }
                        },
                        "required": [
                            "consequence",
                            "consequenceMetric",
                            "eventSequenceId",
                            "frequency"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "hazardGroupContributions": {
                    "$ref": "#/definitions/Record<string,number>",
                    "description": "Breakdown of risk contributions by hazard group."
                },
                "integrationChallenges": {
                    "description": "Identification of any differences in the level of detail, conservatism, and realism when\nintegrating results from different sources, hazards, or POSs [152, RI-B4].",
                    "type": "string"
                },
                "keyAssumptions": {
                    "description": "Documentation of key assumptions affecting the integrated results.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "metrics": {
                    "description": "The risk metrics used for calculating the overall risk [152, RI-B2].",
                    "items": {
                        "$ref": "#/definitions/RiskMetric"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "plantOperatingStateContributions": {
                    "$ref": "#/definitions/Record<string,number>",
                    "description": "Breakdown of risk contributions by plant operating state."
                },
                "radioactiveSourceContributions": {
                    "$ref": "#/definitions/Record<string,number>",
                    "description": "Identification of all sources of radioactive material considered and their risk contributions [152, RI-B5]."
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "calculationApproach",
                "metrics",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "IntermediateEndState": {
            "description": "Interface representing an intermediate end state in an event sequence.\nUsed to reduce the size and complexity of individual event trees by providing\ntransfer points between event trees.",
            "properties": {
                "description": {
                    "description": "Description of the intermediate end state",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentSequenceFamilyId": {
                    "$ref": "#/definitions/EventSequenceFamilyReference",
                    "description": "Reference to the event sequence family this intermediate state belongs to"
                },
                "parentSequenceId": {
                    "$ref": "#/definitions/EventSequenceReference",
                    "description": "Reference to the event sequence or family this intermediate state belongs to"
                },
                "plantConditions": {
                    "description": "Plant conditions at this intermediate state \nUses minimal concepts from Plant Operating States Analysis",
                    "properties": {
                        "barrierStatuses": {
                            "$ref": "#/definitions/Record<string,\"OPEN\"|\"INTACT\"|\"BREACHED\"|\"DEGRADED\"|\"BYPASSED\">",
                            "description": "Barrier statuses at this intermediate state \nReuses BarrierStatus values from Plant Operating States"
                        },
                        "keyParameters": {
                            "$ref": "#/definitions/Record<string,string|number>",
                            "description": "Key plant parameters that define this intermediate state"
                        },
                        "operatingMode": {
                            "description": "Operating mode at this intermediate state \nReuses OperatingState from Plant Operating States",
                            "enum": [
                                "MAINTENANCE",
                                "POWER",
                                "REFUELING",
                                "SHUTDOWN",
                                "STARTUP"
                            ],
                            "type": "string"
                        },
                        "successCriteriaIds": {
                            "description": "References to success criteria applicable at this state",
                            "items": {
                                "$ref": "#/definitions/SuccessCriteriaId"
                            },
                            "type": "array"
                        },
                        "systemStatuses": {
                            "$ref": "#/definitions/Record<SystemReference,SystemStatus>",
                            "description": "System statuses at this intermediate state"
                        }
                    },
                    "required": [
                        "keyParameters"
                    ],
                    "type": "object"
                },
                "preservedDependencies": {
                    "description": "Dependencies that must be preserved when transferring",
                    "properties": {
                        "functional": {
                            "description": "Functional dependencies to preserve",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "initiatingEvent": {
                            "description": "Initiating event dependencies to preserve",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "operator": {
                            "description": "Operator action dependencies to preserve",
                            "items": {
                                "$ref": "#/definitions/HumanActionReference_1"
                            },
                            "type": "array"
                        },
                        "phenomenological": {
                            "description": "Phenomenological dependencies to preserve",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "spatial": {
                            "description": "Spatial or environmental dependencies to preserve",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "system": {
                            "description": "System dependencies to preserve",
                            "items": {
                                "$ref": "#/definitions/SystemReference_1"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "supportingAnalysisReferences": {
                    "description": "References to supporting analyses",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "transferConditions": {
                    "description": "Conditions that trigger the transfer to another event tree",
                    "properties": {
                        "description": {
                            "description": "Description of the condition",
                            "type": "string"
                        },
                        "logicExpression": {
                            "description": "Logic expression representing the condition",
                            "type": "string"
                        },
                        "triggeringEvents": {
                            "description": "References to events that trigger the transfer",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "description"
                    ],
                    "type": "object"
                },
                "transferToEventTree": {
                    "description": "Reference to the event tree to transfer to",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "description",
                "name",
                "plantConditions",
                "preservedDependencies",
                "uuid"
            ],
            "type": "object"
        },
        "LPSDSystemConfiguration": {
            "description": "Interface for Low Power and Shutdown system configurations",
            "properties": {
                "applicablePOSs": {
                    "description": "Plant operating states where this configuration applies",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the LPSD-specific configuration",
                    "type": "string"
                },
                "informationSource": {
                    "description": "Source of information (e.g., past outage data, design information)",
                    "type": "string"
                },
                "systemReference": {
                    "$ref": "#/definitions/SystemReference",
                    "description": "Reference to the system"
                },
                "uniqueToLPSD": {
                    "description": "Whether this configuration is unique to LPSD (not in Full-Power PRA)",
                    "type": "boolean"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "applicablePOSs",
                "description",
                "informationSource",
                "systemReference",
                "uniqueToLPSD",
                "uuid"
            ],
            "type": "object"
        },
        "MasterLogicDiagram": {
            "description": "Master Logic Diagram method for identifying initiating events",
            "properties": {
                "analyst": {
                    "description": "Analyst who performed the method",
                    "type": "string"
                },
                "failure_modes": {
                    "$ref": "#/definitions/Record<string,{id:string;name:string;description:string;component_id:string;failureMode:string;}>",
                    "description": "Failure modes"
                },
                "initiators": {
                    "$ref": "#/definitions/Record<string,InitiatorDefinition>",
                    "description": "Identified initiators"
                },
                "method_id": {
                    "description": "Unique identifier for the method",
                    "type": "string"
                },
                "operating_states": {
                    "$ref": "#/definitions/Set<OperatingState>",
                    "description": "Operating states considered"
                },
                "radionuclide_barriers": {
                    "$ref": "#/definitions/Record<string,RadionuclideBarrier>",
                    "description": "Radionuclide barriers"
                },
                "review_date": {
                    "description": "Review date",
                    "type": "string"
                },
                "review_status": {
                    "description": "Review status",
                    "enum": [
                        "APPROVED",
                        "DRAFT",
                        "REVIEWED"
                    ],
                    "type": "string"
                },
                "safety_functions": {
                    "$ref": "#/definitions/Record<string,SafetyFunction>",
                    "description": "Safety functions"
                },
                "sources": {
                    "$ref": "#/definitions/Set<string>",
                    "description": "Data sources used"
                },
                "supporting_documents": {
                    "description": "Supporting document references",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "systems_components": {
                    "$ref": "#/definitions/Record<string,SystemDefinition>",
                    "description": "Systems and components"
                },
                "version": {
                    "description": "Version of the method",
                    "type": "string"
                }
            },
            "required": [
                "analyst",
                "failure_modes",
                "initiators",
                "method_id",
                "operating_states",
                "radionuclide_barriers",
                "review_date",
                "review_status",
                "safety_functions",
                "sources",
                "supporting_documents",
                "systems_components",
                "version"
            ],
            "type": "object"
        },
        "MechanisticSourceTermAnalysis": {
            "description": "Represents the technical element for 4.3.16 Mechanistic Source Term Analysis (MS).",
            "properties": {
                "additionalMetadata": {
                    "description": "Additional metadata specific to Mechanistic Source Term Analysis.",
                    "properties": {
                        "assumptions": {
                            "description": "Mechanistic source term specific assumptions",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "limitations": {
                            "description": "Mechanistic source term specific limitations",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "riskIntegrationReferences": {
                            "description": "References to risk integration results that use this analysis.\nThis provides traceability between technical elements.",
                            "items": {
                                "properties": {
                                    "analysisId": {
                                        "description": "ID of the risk integration analysis",
                                        "type": "string"
                                    },
                                    "date": {
                                        "description": "Date the analysis was performed",
                                        "type": "string"
                                    },
                                    "usageDescription": {
                                        "description": "Description of how this analysis was used in risk integration",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "Version or revision of the analysis",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "analysisId",
                                    "usageDescription"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "traceability": {
                            "description": "Traceability information",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "commonAssumptions": {
                    "description": "Common assumptions that apply across this technical element\nUsing the standardized BaseAssumption interface",
                    "items": {
                        "$ref": "#/definitions/BaseAssumption"
                    },
                    "type": "array"
                },
                "created": {
                    "description": "The date the technical element was created",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the technical element",
                    "type": "string"
                },
                "eventSequenceToReleaseCategoryMappings": {
                    "description": "Mappings of event sequences to release categories.",
                    "items": {
                        "$ref": "#/definitions/EventSequenceToReleaseCategoryMapping"
                    },
                    "type": "array"
                },
                "modelUncertaintyDocumentation": {
                    "$ref": "#/definitions/MechanisticSourceTermModelUncertaintyDocumentation",
                    "description": "Documentation of model uncertainties in the mechanistic source term analysis."
                },
                "modified": {
                    "description": "The date the technical element was last modified",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "description": "The owner of the technical element",
                    "type": "string"
                },
                "preOperationalAssumptionsDocumentation": {
                    "$ref": "#/definitions/MechanisticSourceTermPreOperationalAssumptionsDocumentation",
                    "description": "Documentation of pre-operational assumptions."
                },
                "processDocumentation": {
                    "$ref": "#/definitions/MechanisticSourceTermProcessDocumentation",
                    "description": "Process documentation for the mechanistic source term analysis."
                },
                "radioactiveSources": {
                    "$ref": "#/definitions/Record<string,RadioactiveSource>",
                    "description": "Characterization of the modeled sources of radioactive material and their inventories."
                },
                "radionuclideTransportBarriers": {
                    "$ref": "#/definitions/Record<string,RadionuclideTransportBarrier>",
                    "description": "Assessment of radionuclide transport barriers.\nThese barriers may reference barriers defined in the Plant Operating States module\nwhile adding mechanistic source term specific characteristics."
                },
                "references": {
                    "description": "References to other technical elements",
                    "items": {
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "technicalElementId": {
                                "type": "string"
                            },
                            "technicalElementType": {
                                "$ref": "#/definitions/TechnicalElementTypes"
                            }
                        },
                        "required": [
                            "description",
                            "technicalElementId",
                            "technicalElementType"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "releaseCategories": {
                    "$ref": "#/definitions/Record<ReleaseCategoryReference,ReleaseCategory>",
                    "description": "Definition of the set of release categories."
                },
                "releaseCategoryBases": {
                    "$ref": "#/definitions/Record<ReleaseCategoryReference,ReleaseCategoryBasis>",
                    "description": "Technical basis for the adequacy of release category definitions."
                },
                "releasePhases": {
                    "$ref": "#/definitions/Record<string,ReleasePhase>",
                    "description": "Release phases defined for various source terms."
                },
                "riskIntegrationDescription": {
                    "description": "Documentation of the integration with risk integration.\nDescribes how this analysis is used in risk integration and how feedback is incorporated.",
                    "properties": {
                        "feedbackIncorporation": {
                            "description": "How feedback from risk integration is incorporated",
                            "type": "string"
                        },
                        "integrationChallenges": {
                            "description": "Challenges in integrating with risk integration",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "releaseCategoryUsage": {
                            "description": "How release categories are used in risk integration",
                            "type": "string"
                        },
                        "sourceTermUsage": {
                            "description": "How source term definitions are used in risk integration",
                            "type": "string"
                        },
                        "supportDescription": {
                            "description": "Description of how this analysis supports risk integration",
                            "type": "string"
                        },
                        "uncertaintyPropagation": {
                            "description": "How uncertainties are propagated to risk integration",
                            "type": "string"
                        }
                    },
                    "required": [
                        "releaseCategoryUsage",
                        "sourceTermUsage",
                        "supportDescription"
                    ],
                    "type": "object"
                },
                "riskIntegrationFeedback": {
                    "description": "Risk integration feedback received for this analysis.\nThis field contains feedback from risk integration that should be considered\nin future revisions of the mechanistic source term analysis.",
                    "properties": {
                        "analysisId": {
                            "description": "ID of the risk integration analysis that provided the feedback",
                            "type": "string"
                        },
                        "feedbackDate": {
                            "description": "Date the feedback was received",
                            "type": "string"
                        },
                        "generalFeedback": {
                            "description": "General feedback on the mechanistic source term analysis",
                            "type": "string"
                        },
                        "releaseCategoryFeedback": {
                            "$ref": "#/definitions/Record<ReleaseCategoryReference,{riskSignificance?:ImportanceLevel|undefined;insights?:string[]|undefined;recommendations?:string[]|undefined;status?:\"IN_PROGRESS\"|\"PENDING\"|\"ADDRESSED\"|\"DEFERRED\"|undefined;}>",
                            "description": "Feedback on release categories"
                        },
                        "response": {
                            "description": "Response to the feedback",
                            "properties": {
                                "changes": {
                                    "description": "Changes made or planned in response to the feedback",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "description": {
                                    "description": "Description of how the feedback was or will be addressed",
                                    "type": "string"
                                },
                                "status": {
                                    "description": "Status of the response",
                                    "enum": [
                                        "COMPLETED",
                                        "IN_PROGRESS",
                                        "PENDING"
                                    ],
                                    "type": "string"
                                }
                            },
                            "required": [
                                "description",
                                "status"
                            ],
                            "type": "object"
                        },
                        "sourceTermDefinitionFeedback": {
                            "$ref": "#/definitions/Record<SourceTermDefinitionReference,{riskSignificance?:ImportanceLevel|undefined;insights?:string[]|undefined;recommendations?:string[]|undefined;keyUncertainties?:string[]|undefined;status?:\"IN_PROGRESS\"|\"PENDING\"|\"ADDRESSED\"|\"DEFERRED\"|undefined;}>",
                            "description": "Feedback on source term definitions"
                        }
                    },
                    "required": [
                        "analysisId"
                    ],
                    "type": "object"
                },
                "sensitivityStudies": {
                    "description": "Sensitivity studies performed on source term parameters.",
                    "items": {
                        "$ref": "#/definitions/MechanisticSourceTermSensitivityStudy"
                    },
                    "type": "array"
                },
                "sourceTermDefinitions": {
                    "$ref": "#/definitions/Record<SourceTermDefinitionReference,SourceTermDefinition>",
                    "description": "Definition of the source term for each modeled release category, including release characteristics and timing."
                },
                "sourceTermModels": {
                    "$ref": "#/definitions/Record<string,SourceTermModel>",
                    "description": "Models and computer programs used in the development of source terms."
                },
                "status": {
                    "description": "The status of the technical element",
                    "enum": [
                        "APPROVED",
                        "DEPRECATED",
                        "DRAFT",
                        "REVIEW"
                    ],
                    "type": "string"
                },
                "tags": {
                    "description": "Tags associated with the technical element",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "transportMechanisms": {
                    "$ref": "#/definitions/Record<string,TransportMechanism>",
                    "description": "Assessment of transport mechanisms for each release category."
                },
                "transportPhenomenaAnalysis": {
                    "$ref": "#/definitions/Record<string,TransportPhenomena>",
                    "description": "Identification of the relevant radionuclide transport phenomena for each release category."
                },
                "type": {
                    "const": "mechanistic-source-term-analysis",
                    "description": "The type of technical element",
                    "type": "string"
                },
                "uncertaintyAnalyses": {
                    "$ref": "#/definitions/Record<string,MechanisticSourceTermUncertaintyAnalysis>",
                    "description": "Uncertainty analyses performed on the mechanistic source terms."
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "version": {
                    "description": "The version of the technical element",
                    "type": "string"
                }
            },
            "required": [
                "created",
                "eventSequenceToReleaseCategoryMappings",
                "modelUncertaintyDocumentation",
                "modified",
                "name",
                "processDocumentation",
                "radioactiveSources",
                "radionuclideTransportBarriers",
                "releaseCategories",
                "releaseCategoryBases",
                "releasePhases",
                "sensitivityStudies",
                "sourceTermDefinitions",
                "sourceTermModels",
                "transportMechanisms",
                "transportPhenomenaAnalysis",
                "type",
                "uncertaintyAnalyses",
                "uuid",
                "version"
            ],
            "type": "object"
        },
        "MechanisticSourceTermModelUncertaintyDocumentation": {
            "description": "Interface for model uncertainty documentation specific to mechanistic source term analysis.",
            "properties": {
                "name": {
                    "type": "string"
                },
                "preOperationalAssumptions": {
                    "description": "Pre-operational assumptions specific to source terms",
                    "items": {
                        "properties": {
                            "assumption": {
                                "type": "string"
                            },
                            "impact": {
                                "type": "string"
                            },
                            "relatedArea": {
                                "type": "string"
                            },
                            "resolutionApproach": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "assumption",
                            "impact",
                            "relatedArea",
                            "resolutionApproach"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "reasonableAlternatives": {
                    "description": "Reasonable alternatives considered",
                    "items": {
                        "properties": {
                            "alternative": {
                                "description": "Alternative description",
                                "type": "string"
                            },
                            "applicableElements": {
                                "description": "Applicable elements",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "reasonNotSelected": {
                                "description": "Reason not selected",
                                "type": "string"
                            }
                        },
                        "required": [
                            "alternative",
                            "reasonNotSelected"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "relatedAssumptions": {
                    "description": "Related assumptions",
                    "items": {
                        "properties": {
                            "applicableElements": {
                                "description": "Applicable elements",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "assumption": {
                                "description": "Assumption description",
                                "type": "string"
                            },
                            "basis": {
                                "description": "Basis for assumption",
                                "type": "string"
                            }
                        },
                        "required": [
                            "assumption",
                            "basis"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "requirementReference": {
                    "description": "Reference to requirement",
                    "type": "string"
                },
                "sourceTermCharacterizationUncertainties": {
                    "description": "Sources of uncertainty in source term characterization",
                    "items": {
                        "properties": {
                            "aspect": {
                                "type": "string"
                            },
                            "impact": {
                                "type": "string"
                            },
                            "treatmentApproach": {
                                "type": "string"
                            },
                            "uncertaintySource": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "aspect",
                            "impact",
                            "treatmentApproach",
                            "uncertaintySource"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "sourceTermDefinitionAlternatives": {
                    "description": "Reasonable alternatives for source term definition",
                    "items": {
                        "properties": {
                            "alternativeApproach": {
                                "type": "string"
                            },
                            "aspect": {
                                "type": "string"
                            },
                            "reasonNotSelected": {
                                "type": "string"
                            },
                            "selectedApproach": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "alternativeApproach",
                            "aspect",
                            "reasonNotSelected",
                            "selectedApproach"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "transportPhenomenaAlternatives": {
                    "description": "Reasonable alternatives for transport phenomena modeling",
                    "items": {
                        "properties": {
                            "alternativeApproach": {
                                "type": "string"
                            },
                            "modelingApproach": {
                                "type": "string"
                            },
                            "phenomenon": {
                                "type": "string"
                            },
                            "reasonNotSelected": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "alternativeApproach",
                            "modelingApproach",
                            "phenomenon",
                            "reasonNotSelected"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "transportPhenomenaUncertainties": {
                    "description": "Sources of uncertainty specific to transport phenomena modeling",
                    "items": {
                        "properties": {
                            "impact": {
                                "type": "string"
                            },
                            "phenomenon": {
                                "type": "string"
                            },
                            "treatmentApproach": {
                                "type": "string"
                            },
                            "uncertaintySource": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "impact",
                            "phenomenon",
                            "treatmentApproach",
                            "uncertaintySource"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "uncertaintyRequirementsLink": {
                    "description": "Explicit link to HLR-MS-D uncertainty requirements",
                    "properties": {
                        "hlrMsDRequirements": {
                            "description": "Reference to specific HLR-MS-D requirements addressed",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "supportDescription": {
                            "description": "Description of how the uncertainty analysis supports these requirements",
                            "type": "string"
                        }
                    },
                    "required": [
                        "hlrMsDRequirements",
                        "supportDescription"
                    ],
                    "type": "object"
                },
                "uncertaintySources": {
                    "description": "Sources of model uncertainty",
                    "items": {
                        "properties": {
                            "applicableElements": {
                                "description": "Applicable elements",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "impact": {
                                "description": "Impact on analysis",
                                "type": "string"
                            },
                            "source": {
                                "description": "Source description",
                                "type": "string"
                            }
                        },
                        "required": [
                            "impact",
                            "source"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "name",
                "reasonableAlternatives",
                "relatedAssumptions",
                "uncertaintySources",
                "uuid"
            ],
            "type": "object"
        },
        "MechanisticSourceTermPreOperationalAssumptionsDocumentation": {
            "description": "Documentation for pre-operational assumptions in mechanistic source term analysis.",
            "properties": {
                "assumptions": {
                    "description": "Assumptions due to lack of as-built, as-operated details",
                    "items": {
                        "$ref": "#/definitions/PreOperationalAssumption"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "releaseTimingAssumptions": {
                    "description": "Assumptions specific to release timing",
                    "items": {
                        "properties": {
                            "assumption": {
                                "type": "string"
                            },
                            "impact": {
                                "type": "string"
                            },
                            "operationalInformationNeeded": {
                                "type": "string"
                            },
                            "releaseCategory": {
                                "$ref": "#/definitions/ReleaseCategoryReference_1"
                            }
                        },
                        "required": [
                            "assumption",
                            "impact",
                            "operationalInformationNeeded",
                            "releaseCategory"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "supportingDocumentationReferences": {
                    "description": "References to supporting documentation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "transportBarrierAssumptions": {
                    "description": "Assumptions specific to radionuclide transport barriers",
                    "items": {
                        "properties": {
                            "assumption": {
                                "type": "string"
                            },
                            "barrier": {
                                "type": "string"
                            },
                            "designInformationNeeded": {
                                "type": "string"
                            },
                            "impact": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "assumption",
                            "barrier",
                            "designInformationNeeded",
                            "impact"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "transportPhenomenaLimitations": {
                    "description": "Limitations on transport phenomena modeling",
                    "items": {
                        "properties": {
                            "informationNeeded": {
                                "type": "string"
                            },
                            "limitation": {
                                "type": "string"
                            },
                            "phenomenon": {
                                "type": "string"
                            },
                            "workaround": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "informationNeeded",
                            "limitation",
                            "phenomenon",
                            "workaround"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "validationPhase": {
                    "description": "Plant construction or operational phase when assumption can be validated",
                    "type": "string"
                }
            },
            "required": [
                "assumptions",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "MechanisticSourceTermProcessDocumentation": {
            "description": "Process documentation for the mechanistic source term analysis.",
            "properties": {
                "designInformation": {
                    "description": "Design information sources used in the analysis",
                    "items": {
                        "$ref": "#/definitions/BaseDesignInformation"
                    },
                    "type": "array"
                },
                "eventSequenceToReleaseCategoryMapping": {
                    "$ref": "#/definitions/Record<EventSequenceReference,{releaseCategoryReference:ReleaseCategoryReference;justification:string;}>",
                    "description": "Assignment of event sequences to release categories"
                },
                "inputsDescription": {
                    "description": "Description of inputs used in the analysis",
                    "type": "string"
                },
                "methodsDescription": {
                    "description": "Description of methods applied in the analysis",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "processDescription": {
                    "description": "Description of the overall process used",
                    "type": "string"
                },
                "radioactiveSourceCharacterizations": {
                    "$ref": "#/definitions/Record<string,{source:Format<\"uuid\">;description:string;inventoryBasis:string;}>",
                    "description": "Documentation of radioactive source characterization"
                },
                "releaseCategoryBasis": {
                    "$ref": "#/definitions/Record<ReleaseCategoryReference,string>",
                    "description": "Technical basis for the adequacy of release category definitions"
                },
                "requirementReferences": {
                    "description": "Traceability to requirements",
                    "items": {
                        "properties": {
                            "implementation": {
                                "description": "How the requirement is addressed",
                                "type": "string"
                            },
                            "requirementId": {
                                "description": "Requirement identifier",
                                "type": "string"
                            }
                        },
                        "required": [
                            "implementation",
                            "requirementId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "resultsDescription": {
                    "description": "Description of the results of the analysis",
                    "type": "string"
                },
                "riskIntegrationDocumentation": {
                    "description": "Documentation of the integration with risk integration.\nDescribes how this analysis supports risk integration and how feedback is incorporated.",
                    "properties": {
                        "feedbackIncorporation": {
                            "description": "How feedback from risk integration is incorporated",
                            "type": "string"
                        },
                        "integrationChallenges": {
                            "description": "Challenges in integrating with risk integration",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "keyInsights": {
                            "description": "Key insights from risk integration that impact source term analysis",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "releaseCategoryUsage": {
                            "description": "How release categories are used in risk integration",
                            "type": "string"
                        },
                        "sourceTermUsage": {
                            "description": "How source term definitions are used in risk integration",
                            "type": "string"
                        },
                        "supportDescription": {
                            "description": "Description of how this analysis supports risk integration",
                            "type": "string"
                        },
                        "uncertaintyPropagation": {
                            "description": "How uncertainties are propagated to risk integration",
                            "type": "string"
                        }
                    },
                    "required": [
                        "releaseCategoryUsage",
                        "sourceTermUsage",
                        "supportDescription"
                    ],
                    "type": "object"
                },
                "sourceTermModelsDocumentation": {
                    "$ref": "#/definitions/Record<string,{modelName:string;purpose:string;keyFeatures:string[];}>",
                    "description": "Models and computer programs used to develop source terms"
                },
                "sourceTermParametersDocumentation": {
                    "$ref": "#/definitions/Record<SourceTermDefinitionReference,{parameterValues:string;uncertaintyAssessment:string;}>",
                    "description": "Quantitative source term parameter values and uncertainties"
                },
                "supportingDocumentationReferences": {
                    "description": "References to supporting documentation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "surrogateRiskMetricsDocumentation": {
                    "$ref": "#/definitions/Record<string,{metricDefinition:string;relationshipToReleaseCategories:string;}>",
                    "description": "Surrogate risk metrics associated with intermediate states"
                },
                "transportPhenomenaDocumentation": {
                    "$ref": "#/definitions/Record<ReleaseCategoryReference,{phenomena:string[];description:string;}>",
                    "description": "Relevant radionuclide transport phenomena for each release category"
                },
                "uncertaintyAndSensitivityAnalysesDocumentation": {
                    "$ref": "#/definitions/Record<SourceTermDefinitionReference,{analysisDescription:string;keyFindings:string[];}>",
                    "description": "Uncertainty and sensitivity analyses for each source term"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "name",
                "processDescription",
                "uuid"
            ],
            "type": "object"
        },
        "MechanisticSourceTermSensitivityStudy": {
            "description": "Sensitivity studies specific to mechanistic source term analysis.",
            "properties": {
                "description": {
                    "description": "Description of the sensitivity study",
                    "type": "string"
                },
                "documentationOfResults": {
                    "description": "Documentation of sensitivity analysis results",
                    "type": "string"
                },
                "elementSpecificProperties": {
                    "$ref": "#/definitions/Record<string,unknown>",
                    "description": "Technical element specific properties\nAllows for extension with properties specific to a technical element"
                },
                "impact": {
                    "description": "Impact on analysis outcomes",
                    "type": "string"
                },
                "impactOnSourceTerm": {
                    "description": "Impact on the source term",
                    "type": "string"
                },
                "insights": {
                    "description": "Insights gained from the study",
                    "type": "string"
                },
                "isKeyDriver": {
                    "description": "Whether this parameter is considered a key driver of uncertainty",
                    "type": "boolean"
                },
                "keyUncertaintyImpactEvaluation": {
                    "description": "Evaluation of the impact of key sources of uncertainty on the estimated source term",
                    "properties": {
                        "description": {
                            "description": "Description of the impact evaluation",
                            "type": "string"
                        },
                        "significance": {
                            "$ref": "#/definitions/ImportanceLevel",
                            "description": "Significance of the impact"
                        }
                    },
                    "required": [
                        "description",
                        "significance"
                    ],
                    "type": "object"
                },
                "modelUncertaintyId": {
                    "description": "Reference to the model uncertainty being studied",
                    "type": "string"
                },
                "name": {
                    "description": "Name or title of the sensitivity study",
                    "type": "string"
                },
                "parameterChanged": {
                    "description": "Parameter changed in the sensitivity study",
                    "type": "string"
                },
                "parameterRanges": {
                    "$ref": "#/definitions/Record<string,[number,number]>",
                    "description": "Range of variation for each parameter\nRecord where key is parameter name and value is [min, max] tuple"
                },
                "recommendations": {
                    "description": "Recommendations based on the sensitivity study",
                    "type": "string"
                },
                "releaseCategoryReference": {
                    "$ref": "#/definitions/ReleaseCategoryReference_1",
                    "description": "Type for release category IDs.\nFormat: RC-[NAME] (e.g., RC-LER)"
                },
                "results": {
                    "description": "Results of the sensitivity study",
                    "type": "string"
                },
                "sourceTermReference": {
                    "$ref": "#/definitions/SourceTermDefinitionReference",
                    "description": "Reference to the source term or release category being analyzed"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "variedParameters": {
                    "description": "Parameters being varied in the study",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "description",
                "impactOnSourceTerm",
                "isKeyDriver",
                "parameterChanged",
                "parameterRanges",
                "uuid",
                "variedParameters"
            ],
            "type": "object"
        },
        "MechanisticSourceTermUncertaintyAnalysis": {
            "description": "Extends the base uncertainty analysis with mechanistic source term specific aspects.",
            "properties": {
                "documentationOfResults": {
                    "description": "Documentation of uncertainty and sensitivity analysis results",
                    "type": "string"
                },
                "modelUncertainties": {
                    "description": "Model uncertainties considered \nThe concept of identifying, describing, and defining the treatment approach\nfor model uncertainties is relevant across various technical elements of a PRA.",
                    "items": {
                        "properties": {
                            "description": {
                                "description": "Description of the uncertainty",
                                "type": "string"
                            },
                            "impact": {
                                "description": "Impact on the model",
                                "type": "string"
                            },
                            "isQuantified": {
                                "description": "Whether the uncertainty is quantified",
                                "type": "boolean"
                            },
                            "treatmentApproach": {
                                "description": "How the uncertainty is addressed",
                                "type": "string"
                            },
                            "uncertaintyId": {
                                "description": "Uncertainty ID",
                                "type": "string"
                            }
                        },
                        "required": [
                            "description",
                            "impact",
                            "isQuantified",
                            "treatmentApproach",
                            "uncertaintyId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "numberOfSamples": {
                    "description": "Number of samples if using simulation \nSpecific to simulation-based propagation methods (like Monte Carlo and Latin Hypercube)\nand is a general parameter for such methods.",
                    "type": "number"
                },
                "propagationMethod": {
                    "description": "Uncertainty propagation method \nDefines the method used to propagate uncertainty, which is a general concept\napplicable across different types of uncertainty analysis within a PRA.",
                    "enum": [
                        "ANALYTICAL",
                        "LATIN_HYPERCUBE",
                        "MONTE_CARLO",
                        "OTHER"
                    ],
                    "type": "string"
                },
                "quantificationMethod": {
                    "description": "Method used to quantify uncertainty in the estimated source term",
                    "properties": {
                        "methodDescription": {
                            "description": "Description of the method used",
                            "type": "string"
                        },
                        "methodJustification": {
                            "description": "Justification for selecting this method",
                            "type": "string"
                        }
                    },
                    "required": [
                        "methodDescription"
                    ],
                    "type": "object"
                },
                "randomSeed": {
                    "description": "Seed value for random number generator if using simulation \nUsed in simulation-based uncertainty propagation to ensure reproducibility\nor to control the random number generation process.",
                    "type": "number"
                },
                "releaseCategoryReference": {
                    "$ref": "#/definitions/ReleaseCategoryReference_1",
                    "description": "Type for release category IDs.\nFormat: RC-[NAME] (e.g., RC-LER)"
                },
                "releaseFractionUncertainties": {
                    "description": "Uncertainties in release fractions or quantities",
                    "items": {
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "distributionType": {
                                "$ref": "#/definitions/DistributionType"
                            },
                            "parameters": {
                                "$ref": "#/definitions/Record<string,number>"
                            },
                            "radionuclide": {
                                "description": "Represents a specific radionuclide isotope.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "description",
                            "distributionType",
                            "parameters",
                            "radionuclide"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "sensitivityStudies": {
                    "description": "Sensitivity studies for unquantified uncertainties \nSensitivity analysis is a general technique used to assess the impact\nof parameter variations or uncertainties on the results of an analysis.",
                    "items": {
                        "$ref": "#/definitions/SensitivityStudy"
                    },
                    "type": "array"
                },
                "sourceTermReference": {
                    "$ref": "#/definitions/SourceTermDefinitionReference",
                    "description": "Reference to the source term or release category being analyzed"
                },
                "transportPhenomenaUncertainties": {
                    "description": "Uncertainties specific to transport phenomena",
                    "items": {
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "distributionType": {
                                "description": "Enum representing the types of probability models used in data analysis.",
                                "enum": [
                                    "beta",
                                    "binomial",
                                    "exponential",
                                    "gamma",
                                    "lognormal",
                                    "normal",
                                    "point_estimate",
                                    "poisson",
                                    "uniform",
                                    "weibull"
                                ],
                                "type": "string"
                            },
                            "impact": {
                                "type": "string"
                            },
                            "parameters": {
                                "$ref": "#/definitions/Record<string,number>"
                            },
                            "phenomenon": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "description",
                            "impact",
                            "phenomenon"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "uncertaintyPropagationResults": {
                    "description": "Results of uncertainty propagation",
                    "properties": {
                        "confidenceIntervals": {
                            "items": {
                                "properties": {
                                    "level": {
                                        "type": "number"
                                    },
                                    "lowerBound": {
                                        "type": "number"
                                    },
                                    "upperBound": {
                                        "type": "number"
                                    }
                                },
                                "required": [
                                    "level",
                                    "lowerBound",
                                    "upperBound"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "description": {
                            "type": "string"
                        },
                        "resultSummary": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "description",
                        "resultSummary"
                    ],
                    "type": "object"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "modelUncertainties",
                "propagationMethod",
                "uuid"
            ],
            "type": "object"
        },
        "MeteorologicalDataAnalysis": {
            "description": "Represents the analysis of meteorological data used in radiological consequence calculations.",
            "properties": {
                "meteorologicalDataSetDescription": {
                    "description": "Description of the meteorological data set(s) used for the analysis, including the period of data collection and relevant parameters.",
                    "type": "string"
                },
                "meteorologicalFrequencyDistributionTreatment": {
                    "description": "Description of how the frequency distribution of meteorological conditions is accounted for in the consequence analysis.",
                    "type": "string"
                },
                "parameterUncertaintyCharacterisation": {
                    "description": "Characterisation of the uncertainty distribution of meteorological parameters.\nRequired by **RCME-B3**.",
                    "type": "string"
                },
                "temporalChangesAccommodation": {
                    "description": "Description of how temporal changes in meteorological conditions are accommodated.\nRequired by **HLR-RCAD-D**.",
                    "type": "string"
                },
                "timeResolution": {
                    "description": "Time resolution of meteorological data.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MissionTimeDefinition": {
            "description": "Interface representing mission time information for event sequences.",
            "properties": {
                "analysisReferences": {
                    "description": "References to supporting analyses",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "basis": {
                    "description": "Basis for the mission time",
                    "type": "string"
                },
                "eventSequenceReference": {
                    "description": "Reference to the event sequence",
                    "type": "string"
                },
                "isRiskSignificant": {
                    "description": "Whether this is a risk-significant sequence (for CC-II differentiation)",
                    "type": "boolean"
                },
                "missionTimeHours": {
                    "allOf": [
                        {
                            "properties": {
                                "typia.tag": {
                                    "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                    "properties": {
                                        "exclusive": {
                                            "items": [
                                                {
                                                    "const": "minimum",
                                                    "type": "string"
                                                },
                                                {
                                                    "const": "exclusiveMinimum",
                                                    "type": "string"
                                                }
                                            ],
                                            "maxItems": 2,
                                            "minItems": 2,
                                            "type": "array"
                                        },
                                        "kind": {
                                            "const": "minimum",
                                            "type": "string"
                                        },
                                        "schema": {
                                            "properties": {
                                                "minimum": {
                                                    "const": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "minimum"
                                            ],
                                            "type": "object"
                                        },
                                        "target": {
                                            "const": "number",
                                            "type": "string"
                                        },
                                        "validate": {
                                            "const": "0 <= $input",
                                            "type": "string"
                                        },
                                        "value": {
                                            "const": 0,
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "exclusive",
                                        "kind",
                                        "schema",
                                        "target",
                                        "validate",
                                        "value"
                                    ],
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "description": "Mission time in hours"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "analysisReferences",
                "basis",
                "eventSequenceReference",
                "missionTimeHours",
                "uuid"
            ],
            "type": "object"
        },
        "ModelIntegration": {
            "description": "Integration of components for event sequence quantification",
            "properties": {
                "integrationIssues": {
                    "description": "Integration issues encountered and resolutions",
                    "items": {
                        "properties": {
                            "description": {
                                "description": "Issue description",
                                "type": "string"
                            },
                            "resolution": {
                                "description": "Issue resolution",
                                "type": "string"
                            }
                        },
                        "required": [
                            "description",
                            "resolution"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "integrationMethod": {
                    "description": "Integration method",
                    "type": "string"
                },
                "integrationSteps": {
                    "description": "Integration steps",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "integrationVerification": {
                    "description": "Verification of integration",
                    "type": "string"
                },
                "softwareTools": {
                    "description": "Software tools used",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "integrationMethod",
                "integrationSteps",
                "integrationVerification",
                "softwareTools"
            ],
            "type": "object"
        },
        "ModelUncertainty": {
            "description": "Interface for model uncertainty in success criteria analysis.",
            "properties": {
                "affectedSuccessCriteria": {
                    "description": "Success criteria affected by this uncertainty",
                    "items": {
                        "$ref": "#/definitions/SuccessCriteriaId"
                    },
                    "type": "array"
                },
                "characterizationMethod": {
                    "description": "How the uncertainty was characterized",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the uncertainty",
                    "type": "string"
                },
                "impactOnSuccessCriteria": {
                    "description": "Impact on success criteria",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "potentialAlternatives": {
                    "description": "Potential alternative approaches",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "relatedAssumptions": {
                    "description": "Related assumptions",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "source": {
                    "description": "Source of uncertainty",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "affectedSuccessCriteria",
                "description",
                "impactOnSuccessCriteria",
                "name",
                "source",
                "uuid"
            ],
            "type": "object"
        },
        "ModelUncertaintyDocumentation": {
            "description": "Interface representing documentation of model uncertainty in the success criteria analysis.",
            "properties": {
                "name": {
                    "type": "string"
                },
                "reasonableAlternatives": {
                    "description": "Documentation of reasonable alternatives",
                    "items": {
                        "properties": {
                            "alternative": {
                                "description": "Alternative approach",
                                "type": "string"
                            },
                            "applicableElements": {
                                "description": "Affected elements (success criteria)",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "reasonNotSelected": {
                                "description": "Reason not selected",
                                "type": "string"
                            }
                        },
                        "required": [
                            "alternative",
                            "reasonNotSelected"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "relatedAssumptions": {
                    "description": "Related assumptions",
                    "items": {
                        "properties": {
                            "applicableElements": {
                                "description": "Applicable elements",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "assumption": {
                                "description": "Assumption description",
                                "type": "string"
                            },
                            "basis": {
                                "description": "Basis for assumption",
                                "type": "string"
                            }
                        },
                        "required": [
                            "assumption",
                            "basis"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "requirementReference": {
                    "description": "Reference to requirement",
                    "type": "string"
                },
                "successCriteriaSpecificUncertainties": {
                    "description": "Success criteria specific uncertainty impacts",
                    "items": {
                        "properties": {
                            "impact": {
                                "description": "Impact on success criteria definition",
                                "type": "string"
                            },
                            "successCriteriaId": {
                                "$ref": "#/definitions/SuccessCriteriaId",
                                "description": "Success criteria ID"
                            },
                            "uncertainties": {
                                "description": "Specific uncertainties for these criteria",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "impact",
                            "successCriteriaId",
                            "uncertainties"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "uncertaintySources": {
                    "description": "Sources of model uncertainty",
                    "items": {
                        "properties": {
                            "applicableElements": {
                                "description": "Applicable elements",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "impact": {
                                "description": "Impact on analysis",
                                "type": "string"
                            },
                            "source": {
                                "description": "Source description",
                                "type": "string"
                            }
                        },
                        "required": [
                            "impact",
                            "source"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "name",
                "reasonableAlternatives",
                "relatedAssumptions",
                "uncertaintySources",
                "uuid"
            ],
            "type": "object"
        },
        "ModelUncertaintyDocumentation_1": {
            "description": "Interface representing documentation of model uncertainty in the systems analysis.",
            "properties": {
                "name": {
                    "type": "string"
                },
                "preOperationalAssumptions": {
                    "$ref": "#/definitions/Record<SystemReference,{assumptions:string[];impact:string;}>",
                    "description": "Pre-operational assumptions affecting systems analysis"
                },
                "reasonableAlternatives": {
                    "description": "Documentation of reasonable alternatives.",
                    "items": {
                        "properties": {
                            "alternative": {
                                "description": "Alternative approach",
                                "type": "string"
                            },
                            "applicableSystems": {
                                "description": "Affected systems",
                                "items": {
                                    "$ref": "#/definitions/SystemReference"
                                },
                                "type": "array"
                            },
                            "reasonNotSelected": {
                                "description": "Reason not selected",
                                "type": "string"
                            }
                        },
                        "required": [
                            "alternative",
                            "reasonNotSelected"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "relatedAssumptions": {
                    "description": "Related assumptions",
                    "items": {
                        "properties": {
                            "applicableElements": {
                                "description": "Applicable elements",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "assumption": {
                                "description": "Assumption description",
                                "type": "string"
                            },
                            "basis": {
                                "description": "Basis for assumption",
                                "type": "string"
                            }
                        },
                        "required": [
                            "assumption",
                            "basis"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "requirementReference": {
                    "description": "Reference to requirement",
                    "type": "string"
                },
                "systemSpecificUncertainties": {
                    "$ref": "#/definitions/Record<SystemReference,{uncertainties:string[];impact:string;}>",
                    "description": "Systems-specific uncertainty impacts."
                },
                "uncertaintySources": {
                    "description": "Sources of model uncertainty",
                    "items": {
                        "properties": {
                            "applicableElements": {
                                "description": "Applicable elements",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "impact": {
                                "description": "Impact on analysis",
                                "type": "string"
                            },
                            "source": {
                                "description": "Source description",
                                "type": "string"
                            }
                        },
                        "required": [
                            "impact",
                            "source"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "name",
                "reasonableAlternatives",
                "relatedAssumptions",
                "uncertaintySources",
                "uuid"
            ],
            "type": "object"
        },
        "ModelUncertaintyDocumentation_2": {
            "description": "Interface representing model uncertainty sources in data analysis",
            "properties": {
                "name": {
                    "type": "string"
                },
                "reasonableAlternatives": {
                    "description": "Reasonable alternatives considered",
                    "items": {
                        "properties": {
                            "alternative": {
                                "description": "Alternative description",
                                "type": "string"
                            },
                            "applicableParameters": {
                                "description": "Applicable parameter(s)",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "reasonNotSelected": {
                                "description": "Reason not selected",
                                "type": "string"
                            }
                        },
                        "required": [
                            "alternative",
                            "reasonNotSelected"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "relatedAssumptions": {
                    "description": "Related assumptions",
                    "items": {
                        "properties": {
                            "applicableParameters": {
                                "description": "Applicable parameter(s)",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "assumption": {
                                "description": "Assumption description",
                                "type": "string"
                            },
                            "basis": {
                                "description": "Basis for assumption",
                                "type": "string"
                            }
                        },
                        "required": [
                            "assumption",
                            "basis"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "requirementReference": {
                    "description": "Reference to requirement",
                    "type": "string"
                },
                "uncertaintySources": {
                    "description": "Description of model uncertainty sources",
                    "items": {
                        "properties": {
                            "applicableParameters": {
                                "description": "Applicable parameter(s)",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "impact": {
                                "description": "Impact on analysis",
                                "type": "string"
                            },
                            "source": {
                                "description": "Source description",
                                "type": "string"
                            }
                        },
                        "required": [
                            "impact",
                            "source"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "name",
                "reasonableAlternatives",
                "relatedAssumptions",
                "requirementReference",
                "uncertaintySources",
                "uuid"
            ],
            "type": "object"
        },
        "ModelUncertaintyDocumentation_3": {
            "description": "Interface representing documentation of model uncertainty in the event sequence analysis.",
            "properties": {
                "eventSequenceSpecificUncertainties": {
                    "description": "Event sequence specific uncertainty impacts",
                    "items": {
                        "properties": {
                            "eventSequenceId": {
                                "$ref": "#/definitions/EventSequenceReference",
                                "description": "Event sequence ID"
                            },
                            "sequenceImpact": {
                                "description": "Impact on sequence outcomes",
                                "type": "string"
                            },
                            "uncertainties": {
                                "description": "Specific uncertainties for this sequence",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "eventSequenceId",
                            "sequenceImpact",
                            "uncertainties"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "reasonableAlternatives": {
                    "description": "Reasonable alternatives considered",
                    "items": {
                        "properties": {
                            "alternative": {
                                "description": "Alternative description",
                                "type": "string"
                            },
                            "applicableElements": {
                                "description": "Applicable elements",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "reasonNotSelected": {
                                "description": "Reason not selected",
                                "type": "string"
                            }
                        },
                        "required": [
                            "alternative",
                            "reasonNotSelected"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "relatedAssumptions": {
                    "description": "Related assumptions",
                    "items": {
                        "properties": {
                            "applicableElements": {
                                "description": "Applicable elements",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "assumption": {
                                "description": "Assumption description",
                                "type": "string"
                            },
                            "basis": {
                                "description": "Basis for assumption",
                                "type": "string"
                            }
                        },
                        "required": [
                            "assumption",
                            "basis"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "requirementReference": {
                    "description": "Reference to requirement",
                    "type": "string"
                },
                "uncertaintySources": {
                    "description": "Sources of model uncertainty",
                    "items": {
                        "properties": {
                            "applicableElements": {
                                "description": "Applicable elements",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "impact": {
                                "description": "Impact on analysis",
                                "type": "string"
                            },
                            "source": {
                                "description": "Source description",
                                "type": "string"
                            }
                        },
                        "required": [
                            "impact",
                            "source"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "name",
                "reasonableAlternatives",
                "relatedAssumptions",
                "uncertaintySources",
                "uuid"
            ],
            "type": "object"
        },
        "ModelUncertaintyInfo": {
            "description": "Reusable interface for representing model uncertainty information.\nUsed to document sources of uncertainty in the model.",
            "properties": {
                "description": {
                    "description": "Description of the uncertainty",
                    "type": "string"
                },
                "impact": {
                    "$ref": "#/definitions/ImportanceLevel",
                    "description": "Impact level of the uncertainty"
                },
                "reasonableAlternatives": {
                    "description": "Reasonable alternatives that could be considered",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "source": {
                    "description": "Source of the uncertainty",
                    "type": "string"
                },
                "treatment": {
                    "description": "How the uncertainty is treated in the model",
                    "type": "string"
                }
            },
            "required": [
                "description",
                "impact",
                "source",
                "treatment"
            ],
            "type": "object"
        },
        "ModelUncertaintySource": {
            "description": "Interface representing a key source of model uncertainty.",
            "properties": {
                "affectedMetrics": {
                    "description": "Risk metrics affected by this uncertainty",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "alternatives": {
                    "description": "Alternative modeling approaches considered",
                    "items": {
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "potentialImpact": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "description",
                            "potentialImpact"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "characterizationMethod": {
                    "description": "Method used to characterize this uncertainty",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the uncertainty source",
                    "type": "string"
                },
                "impactAssessment": {
                    "description": "Assessment of the potential impact on risk results",
                    "type": "string"
                },
                "impactScope": {
                    "description": "Technical elements affected by this uncertainty",
                    "items": {
                        "$ref": "#/definitions/TechnicalElementTypes"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "originatingElement": {
                    "$ref": "#/definitions/TechnicalElementTypes",
                    "description": "Technical element where this uncertainty originates"
                },
                "recommendations": {
                    "description": "Recommendations for reducing this uncertainty",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "relatedAssumptions": {
                    "description": "Related assumptions",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "affectedMetrics",
                "description",
                "impactAssessment",
                "impactScope",
                "name",
                "originatingElement",
                "uuid"
            ],
            "type": "object"
        },
        "ModelUncertainty_1": {
            "description": "Interface representing a source of model uncertainty in the event sequence analysis.",
            "properties": {
                "addressingPlans": {
                    "description": "Plans to address or reduce this uncertainty",
                    "type": "string"
                },
                "affectedAspects": {
                    "description": "Aspects of the analysis affected by this uncertainty",
                    "items": {
                        "enum": [
                            "dependencies",
                            "eventSequenceDefinition",
                            "releasePhenomena"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "assumptions": {
                    "description": "Assumptions related to this uncertainty",
                    "items": {
                        "$ref": "#/definitions/Assumption_2"
                    },
                    "type": "array"
                },
                "characterization": {
                    "description": "Characterization of the uncertainty (qualitative or quantitative)",
                    "properties": {
                        "description": {
                            "description": "Description of the characterization",
                            "type": "string"
                        },
                        "range": {
                            "description": "Range or bounds of the uncertainty if quantitative",
                            "items": [
                                {
                                    "type": "number"
                                },
                                {
                                    "type": "number"
                                }
                            ],
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array"
                        },
                        "type": {
                            "description": "Type of characterization",
                            "enum": [
                                "QUALITATIVE",
                                "QUANTITATIVE"
                            ],
                            "type": "string"
                        }
                    },
                    "required": [
                        "description",
                        "type"
                    ],
                    "type": "object"
                },
                "description": {
                    "description": "Description of the model uncertainty",
                    "type": "string"
                },
                "impact": {
                    "description": "Potential impact on the analysis results",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "reasonableAlternatives": {
                    "description": "Reasonable alternatives that could be considered",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "description",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "ModelValidation": {
            "description": "Interface for model validation methods.",
            "properties": {
                "description": {
                    "description": "Description of the validation method.",
                    "type": "string"
                },
                "issueResolutions": {
                    "description": "Resolution of identified issues.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "issuesIdentified": {
                    "description": "Any issues identified during validation.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "results": {
                    "description": "Results of the validation.",
                    "type": "string"
                },
                "systemReference": {
                    "$ref": "#/definitions/SystemReference",
                    "description": "The system model being validated."
                },
                "techniques": {
                    "description": "Validation techniques used.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "description",
                "name",
                "results",
                "systemReference",
                "techniques",
                "uuid"
            ],
            "type": "object"
        },
        "ModuleState": {
            "description": "Indicates the impact status of a reactor module in multi-module plants.\nUsed to represent how initiating events or hazards affect individual modules.",
            "enum": [
                "IMPACTED",
                "NOT_IMPACTED",
                "PARTIALLY_IMPACTED"
            ],
            "type": "string"
        },
        "MutuallyExclusiveEvents": {
            "description": "Detailed representation of mutually exclusive events and combinations",
            "properties": {
                "basis": {
                    "description": "Logical basis for the mutual exclusivity",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the mutually exclusive relationship",
                    "type": "string"
                },
                "eventIds": {
                    "description": "IDs of the events that are mutually exclusive",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "Unique identifier for this set of mutually exclusive events",
                    "type": "string"
                },
                "retentionJustification": {
                    "description": "Justification if mutually exclusive events are retained",
                    "type": "string"
                },
                "treatmentMethod": {
                    "description": "Method used to eliminate or handle the mutual exclusivity",
                    "type": "string"
                }
            },
            "required": [
                "basis",
                "description",
                "eventIds",
                "id",
                "treatmentMethod"
            ],
            "type": "object"
        },
        "Named": {
            "properties": {
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "OperatingState": {
            "description": "Represents the different operating states of a nuclear reactor system.\nThese are discrete modes that a plant can be in during its operational cycle.",
            "enum": [
                "POWER",
                "STARTUP",
                "SHUTDOWN",
                "REFUELING",
                "MAINTENANCE"
            ],
            "type": "string"
        },
        "OperatingStateRisk": {
            "description": "Interface representing the risk significance of a plant operating state.\nDifferent POSs contribute differently to overall plant risk, and this\ninterface captures that information.",
            "properties": {
                "importanceMeasures": {
                    "description": "Importance measures for key components",
                    "items": {
                        "properties": {
                            "RAW": {
                                "description": "Risk Achievement Worth",
                                "type": "number"
                            },
                            "RRW": {
                                "description": "Risk Reduction Worth",
                                "type": "number"
                            },
                            "componentId": {
                                "$ref": "#/definitions/ComponentReference",
                                "description": "Component ID"
                            },
                            "fussellVesely": {
                                "description": "Fussell-Vesely importance",
                                "type": "number"
                            }
                        },
                        "required": [
                            "componentId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "riskContribution": {
                    "description": "Contribution to total risk (e.g., percentage)",
                    "type": "number"
                },
                "riskMetrics": {
                    "description": "Risk metrics for this operating state",
                    "properties": {
                        "CDF": {
                            "$ref": "#/definitions/Frequency",
                            "description": "Core Damage Frequency"
                        },
                        "LERF": {
                            "$ref": "#/definitions/Frequency",
                            "description": "Large Early Release Frequency"
                        }
                    },
                    "required": [
                        "CDF",
                        "LERF"
                    ],
                    "type": "object"
                },
                "riskSignificantContributors": {
                    "description": "List of risk-significant contributors",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "stateId": {
                    "description": "ID of the plant operating state",
                    "type": "string"
                },
                "stateName": {
                    "description": "Name of the plant operating state",
                    "type": "string"
                }
            },
            "required": [
                "riskContribution",
                "riskMetrics",
                "riskSignificantContributors",
                "stateId",
                "stateName"
            ],
            "type": "object"
        },
        "OperatingStatesFrequencyDuration": {
            "description": "Operating state frequency calculation, duration tracking, and time-based relationships",
            "properties": {
                "maintenancePlansRecords": {
                    "description": "Maintenance plans and records",
                    "items": {
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "endDate": {
                                "type": "string"
                            },
                            "frequencyPerYear": {
                                "$ref": "#/definitions/Frequency"
                            },
                            "startDate": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "description",
                            "endDate",
                            "frequencyPerYear",
                            "startDate"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "operationsData": {
                    "description": "Operations data",
                    "items": {
                        "properties": {
                            "endDate": {
                                "type": "string"
                            },
                            "startDate": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "endDate",
                            "startDate"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "outagePlansRecords": {
                    "description": "Outage plans and records",
                    "items": {
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "endDate": {
                                "type": "string"
                            },
                            "frequencyPerYear": {
                                "$ref": "#/definitions/Frequency"
                            },
                            "startDate": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "description",
                            "endDate",
                            "frequencyPerYear",
                            "startDate"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "summary": {
                    "description": "Summary of POS frequency and duration analysis \nPer RG 1.247, the duration and number of entries into each POS must be determined",
                    "items": {
                        "properties": {
                            "averageDuration": {
                                "description": "Average duration of the operating state in hours",
                                "type": "number"
                            },
                            "entriesPerYear": {
                                "description": "Number of entries per year",
                                "type": "number"
                            },
                            "fractionOfTime": {
                                "description": "Fraction of time spent in this operating state",
                                "type": "number"
                            },
                            "posName": {
                                "description": "Name of the plant operating state",
                                "type": "string"
                            }
                        },
                        "required": [
                            "averageDuration",
                            "entriesPerYear",
                            "fractionOfTime",
                            "posName"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "tripHistory": {
                    "description": "Trip history",
                    "items": {
                        "properties": {
                            "date": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "date",
                            "description"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "maintenancePlansRecords",
                "operationsData",
                "outagePlansRecords",
                "tripHistory"
            ],
            "type": "object"
        },
        "OperationalDependencyModel": {
            "description": "Interface representing an operational dependency model.\nUsed to define and document dependencies based on operational practices.",
            "properties": {
                "affectedSystems": {
                    "description": "Systems affected by the operational practice",
                    "items": {
                        "$ref": "#/definitions/SystemReference_1"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the operational dependency",
                    "type": "string"
                },
                "involvedHumanActions": {
                    "description": "Human actions involved in the operational dependency",
                    "items": {
                        "$ref": "#/definitions/HumanActionReference_1"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "operationalPractice": {
                    "description": "Operational practice or procedure causing the dependency",
                    "type": "string"
                },
                "procedureReferences": {
                    "description": "References to procedures or operating instructions",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "affectedSystems",
                "description",
                "name",
                "operationalPractice",
                "uuid"
            ],
            "type": "object"
        },
        "OutlierComponent": {
            "description": "Interface representing a component identified as an outlier and excluded from grouping",
            "properties": {
                "alternativeHandling": {
                    "description": "How this component is handled in the analysis instead",
                    "type": "string"
                },
                "componentId": {
                    "$ref": "#/definitions/ComponentReference",
                    "description": "Component ID that is excluded from grouping - references a component within \nSystemDefinition.modeledComponentsAndFailures\nThis component should NOT have a componentGroup field set"
                },
                "determinationDate": {
                    "description": "Date when the outlier determination was made",
                    "type": "string"
                },
                "determinedBy": {
                    "description": "Person or team who made the outlier determination",
                    "type": "string"
                },
                "differentiatingCharacteristics": {
                    "description": "Characteristics that make this component different from the group",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "exclusionJustification": {
                    "description": "Detailed justification for why this component is considered an outlier",
                    "type": "string"
                },
                "exclusionReason": {
                    "description": "Reason for excluding this component as an outlier",
                    "type": "string"
                },
                "potentialGroupId": {
                    "description": "Reference to the group this component would otherwise belong to\nReferences the groupId of a ComponentGrouping",
                    "type": "string"
                },
                "referenceDocuments": {
                    "description": "References to supporting documentation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "status": {
                    "description": "Status of the outlier determination",
                    "enum": [
                        "CONFIRMED",
                        "TENTATIVE",
                        "UNDER_REVIEW"
                    ],
                    "type": "string"
                },
                "systemId": {
                    "description": "System identifier - references SystemDefinition",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "alternativeHandling",
                "componentId",
                "differentiatingCharacteristics",
                "exclusionJustification",
                "exclusionReason",
                "potentialGroupId",
                "status",
                "systemId",
                "uuid"
            ],
            "type": "object"
        },
        "OverCapacityConsideration": {
            "description": "Interface for considerations of potential overload conditions.",
            "properties": {
                "impactOnPerformance": {
                    "description": "Impact of exceeding design capacity on system performance.",
                    "type": "string"
                },
                "justificationForCapability": {
                    "description": "Justification for capability to handle overload conditions.",
                    "type": "string"
                },
                "potentialExceedanceScenarios": {
                    "description": "Scenarios where the system's rated capacity might be exceeded.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "supportingDataReferences": {
                    "description": "References to supporting data or analyses.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "system": {
                    "$ref": "#/definitions/SystemReference",
                    "description": "The system that could experience overload."
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "potentialExceedanceScenarios",
                "system",
                "uuid"
            ],
            "type": "object"
        },
        "OverallSuccessCriteriaDefinition": {
            "description": "Represents the overall success criteria defined for preventing a release of radioactive material \nin each modeled event sequence and event sequence family.",
            "properties": {
                "applicablePlantOperatingStates": {
                    "description": "Applicable plant operating states",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "criteria": {
                    "description": "Specific criteria that must be met",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the overall success criteria",
                    "type": "string"
                },
                "endStateParameters": {
                    "$ref": "#/definitions/Record<string,string>",
                    "description": "The end state parameters that determine success or failure"
                },
                "engineeringBasisReferences": {
                    "description": "References to engineering analyses supporting these criteria",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "eventSequenceReference": {
                    "description": "Reference to the event sequence or family",
                    "type": "string"
                },
                "isRiskSignificant": {
                    "description": "Whether this is for a risk-significant sequence (for CC-II differentiation)",
                    "type": "boolean"
                },
                "keySafetyFunctions": {
                    "description": "Key safety functions that must be maintained",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "radionuclideBarriers": {
                    "description": "Radionuclide transport barriers that must be protected",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "usesRealisticCriteria": {
                    "description": "Whether realistic criteria are used (CC-II for risk-significant, CC-I for non-risk-significant)\nThis helps track compliance with capability category requirements",
                    "type": "boolean"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "criteria",
                "description",
                "endStateParameters",
                "engineeringBasisReferences",
                "eventSequenceReference",
                "keySafetyFunctions",
                "radionuclideBarriers",
                "uuid"
            ],
            "type": "object"
        },
        "OverallSuccessCriterion": {
            "description": "Represents an overall success criterion for an event sequence family.",
            "properties": {
                "criteriaText": {
                    "description": "The actual criteria statements",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Detailed description of the success criterion",
                    "type": "string"
                },
                "endState": {
                    "description": "The defined end state if applicable to this criterion",
                    "type": "string"
                },
                "engineeringBasisReferences": {
                    "description": "References to the engineering basis supporting this criterion",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "eventSequenceFamilyReference": {
                    "description": "Reference to the event sequence family this criterion applies to",
                    "type": "string"
                },
                "initiatingEventReferences": {
                    "description": "Links to related initiating events",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "plantOperatingStateReferences": {
                    "description": "Links to related plant operating states",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "criteriaText",
                "engineeringBasisReferences",
                "eventSequenceFamilyReference",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "POSValidationRules": {
            "description": "Interface for validation rules to ensure plant operating states are correctly defined\nand cover the entire plant operating cycle.\n\nThis is part of the Documentation & Traceability group but has a critical validation role.",
            "properties": {
                "collectiveExhaustivityRules": {
                    "description": "Validates that the defined POSs are collectively exhaustive (cover the entire plant cycle)\nThis ensures that all plant conditions are captured by the defined POSs",
                    "properties": {
                        "configurationCoverage": {
                            "description": "Confirmation that all possible plant configurations are covered",
                            "type": "string"
                        },
                        "description": {
                            "description": "Description of how collective exhaustivity is ensured",
                            "type": "string"
                        },
                        "verificationMethod": {
                            "description": "Method to verify complete coverage of the operating cycle",
                            "type": "string"
                        }
                    },
                    "required": [
                        "configurationCoverage",
                        "description",
                        "verificationMethod"
                    ],
                    "type": "object"
                },
                "mutualExclusivityRules": {
                    "description": "Validates that the defined POSs are mutually exclusive (no overlap between states)\nThis ensures that a given plant condition belongs to exactly one POS",
                    "properties": {
                        "delineationParameters": {
                            "description": "Parameters used to clearly delineate between POSs",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "description": {
                            "description": "Description of how mutual exclusivity is ensured",
                            "type": "string"
                        },
                        "verificationMethod": {
                            "description": "Verification method used to confirm mutual exclusivity",
                            "type": "string"
                        }
                    },
                    "required": [
                        "delineationParameters",
                        "description",
                        "verificationMethod"
                    ],
                    "type": "object"
                },
                "transitionRules": {
                    "description": "Rules for transitions between POSs\nEnsures that transitions between POSs are well-defined and complete",
                    "properties": {
                        "transitionMatrix": {
                            "$ref": "#/definitions/Record<string,string[]>",
                            "description": "Matrix or list documenting all possible transitions between POSs"
                        },
                        "transitionTriggers": {
                            "$ref": "#/definitions/Record<string,string>",
                            "description": "Parameters or conditions that trigger transitions"
                        }
                    },
                    "required": [
                        "transitionMatrix",
                        "transitionTriggers"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "collectiveExhaustivityRules",
                "mutualExclusivityRules",
                "transitionRules"
            ],
            "type": "object"
        },
        "ParameterType": {
            "description": "Interface representing the types of parameters used in data analysis.\nThe parameter type determines the type of data analysis that can be performed.",
            "enum": [
                "CCF_PARAMETER",
                "FREQUENCY",
                "HUMAN_ERROR_PROBABILITY",
                "OTHER",
                "PROBABILITY",
                "UNAVAILABILITY"
            ],
            "type": "string"
        },
        "ParameterValidationRules": {
            "description": "Interface for validation rules to ensure parameter data analysis is correctly performed",
            "properties": {
                "componentBoundaryRules": {
                    "description": "Rules for component boundary validation",
                    "properties": {
                        "description": {
                            "description": "Validation description",
                            "type": "string"
                        },
                        "requiredElements": {
                            "description": "Required elements for boundary definition",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "validationMethod": {
                            "description": "Validation method",
                            "type": "string"
                        }
                    },
                    "required": [
                        "description",
                        "requiredElements",
                        "validationMethod"
                    ],
                    "type": "object"
                },
                "dataSourceValidationRules": {
                    "description": "Rules for data source validation",
                    "properties": {
                        "applicabilityRequirements": {
                            "description": "Applicability assessment requirements",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "description": {
                            "description": "Validation description",
                            "type": "string"
                        },
                        "qualityCriteria": {
                            "description": "Source quality criteria",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "applicabilityRequirements",
                        "description",
                        "qualityCriteria"
                    ],
                    "type": "object"
                },
                "outlierValidationRules": {
                    "description": "Rules for outlier identification and validation",
                    "properties": {
                        "description": {
                            "description": "Validation description",
                            "type": "string"
                        },
                        "outlierIdentificationCriteria": {
                            "description": "Criteria for identifying outliers",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "requiredJustificationElements": {
                            "description": "Required justification elements for outlier exclusion",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "reviewProcess": {
                            "description": "Review process for outlier determinations",
                            "type": "string"
                        },
                        "validationChecks": {
                            "description": "Validation checks for proper outlier handling",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "description",
                        "outlierIdentificationCriteria",
                        "requiredJustificationElements",
                        "reviewProcess",
                        "validationChecks"
                    ],
                    "type": "object"
                },
                "parameterConsistencyRules": {
                    "description": "Rules for parameter consistency validation",
                    "properties": {
                        "consistencyChecks": {
                            "description": "Consistency checks to perform",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "description": {
                            "description": "Validation description",
                            "type": "string"
                        },
                        "validationMethod": {
                            "description": "Validation method",
                            "type": "string"
                        }
                    },
                    "required": [
                        "consistencyChecks",
                        "description",
                        "validationMethod"
                    ],
                    "type": "object"
                },
                "uncertaintyValidationRules": {
                    "description": "Rules for uncertainty characterization validation",
                    "properties": {
                        "description": {
                            "description": "Validation description",
                            "type": "string"
                        },
                        "requiredElements": {
                            "description": "Required uncertainty elements",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "validationCriteria": {
                            "description": "Validation criteria",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "description",
                        "requiredElements",
                        "validationCriteria"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "componentBoundaryRules",
                "dataSourceValidationRules",
                "parameterConsistencyRules",
                "uncertaintyValidationRules"
            ],
            "type": "object"
        },
        "PassiveSystemsTreatment": {
            "description": "Interface for passive safety systems modeling.",
            "properties": {
                "description": {
                    "description": "Description of the passive system.",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "performanceAnalysisRef": {
                    "description": "Reference to performance analysis for this passive system.",
                    "type": "string"
                },
                "relevantPhysicalPhenomena": {
                    "description": "Specific physical phenomena relevant to this passive system.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "systemReference": {
                    "$ref": "#/definitions/SystemReference",
                    "description": "System reference this passive system is associated with."
                },
                "uncertaintyAnalysis": {
                    "description": "Methodology for uncertainty analysis of passive system performance.",
                    "type": "string"
                },
                "uncertaintyEvaluation": {
                    "description": "Documentation of the evaluation of uncertainties in system performance.",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "description",
                "name",
                "systemReference",
                "uuid"
            ],
            "type": "object"
        },
        "PeerReviewDocumentation": {
            "description": "Interface representing peer review documentation.",
            "properties": {
                "consistencyWithEventSequenceAnalysis": {
                    "description": "Consistency with event sequence analysis",
                    "type": "string"
                },
                "consistencyWithSourceTermAnalysis": {
                    "description": "Consistency with mechanistic source term analysis",
                    "type": "string"
                },
                "findingsAndObservations": {
                    "description": "Findings and observations",
                    "items": {
                        "properties": {
                            "associatedRequirements": {
                                "description": "Associated requirements",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "description": {
                                "description": "Description of the finding",
                                "type": "string"
                            },
                            "id": {
                                "description": "Finding ID",
                                "type": "string"
                            },
                            "resolutionActions": {
                                "description": "Resolution actions",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "resolutionStatus": {
                                "description": "Resolution status",
                                "enum": [
                                    "CLOSED",
                                    "IN_PROGRESS",
                                    "OPEN"
                                ],
                                "type": "string"
                            },
                            "significance": {
                                "$ref": "#/definitions/ImportanceLevel",
                                "description": "Significance of the finding"
                            }
                        },
                        "required": [
                            "description",
                            "id",
                            "resolutionStatus",
                            "significance"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "methodology": {
                    "description": "Review methodology",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "plantSpecificFeaturesRecognition": {
                    "description": "Recognition of plant-specific features",
                    "type": "string"
                },
                "reportReference": {
                    "description": "Review report reference",
                    "type": "string"
                },
                "reviewDate": {
                    "description": "Review date",
                    "type": "string"
                },
                "reviewerExperience": {
                    "description": "Reviewer experience specific to success criteria analysis",
                    "type": "string"
                },
                "reviewers": {
                    "description": "Review team members",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "scope": {
                    "description": "Scope of the review",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "findingsAndObservations",
                "methodology",
                "name",
                "reviewDate",
                "reviewers",
                "scope",
                "uuid"
            ],
            "type": "object"
        },
        "PeerReviewDocumentation_1": {
            "description": "Interface representing peer review documentation for data analysis",
            "properties": {
                "findings": {
                    "description": "Findings and observations",
                    "items": {
                        "properties": {
                            "associatedRequirements": {
                                "description": "Associated requirement(s)",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "description": {
                                "description": "Finding description",
                                "type": "string"
                            },
                            "id": {
                                "description": "Finding ID",
                                "type": "string"
                            },
                            "resolutionDate": {
                                "description": "Resolution date",
                                "type": "string"
                            },
                            "resolutionPlan": {
                                "description": "Resolution plan",
                                "type": "string"
                            },
                            "significance": {
                                "description": "Significance level",
                                "enum": [
                                    "HIGH",
                                    "LOW",
                                    "MEDIUM"
                                ],
                                "type": "string"
                            },
                            "status": {
                                "description": "Status",
                                "enum": [
                                    "CLOSED",
                                    "IN_PROGRESS",
                                    "OPEN"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "associatedRequirements",
                            "description",
                            "id",
                            "significance",
                            "status"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "methodology": {
                    "description": "Review methodology",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "outlierReview": {
                    "description": "Specific review of component grouping and outlier handling",
                    "properties": {
                        "justificationAssessment": {
                            "description": "Assessment of outlier exclusion justifications",
                            "type": "string"
                        },
                        "methodologyAssessment": {
                            "description": "Assessment of outlier identification methodology",
                            "type": "string"
                        },
                        "outlierFindings": {
                            "description": "Specific outlier findings",
                            "items": {
                                "properties": {
                                    "componentId": {
                                        "description": "Component ID",
                                        "type": "string"
                                    },
                                    "finding": {
                                        "description": "Finding description",
                                        "type": "string"
                                    },
                                    "recommendation": {
                                        "description": "Recommendation",
                                        "type": "string"
                                    },
                                    "status": {
                                        "description": "Status",
                                        "enum": [
                                            "ACCEPTED",
                                            "REJECTED",
                                            "UNDER_REVIEW"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "componentId",
                                    "finding",
                                    "recommendation",
                                    "status"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "outlierIdentificationReviewed": {
                            "description": "Whether outlier identification was reviewed",
                            "type": "boolean"
                        },
                        "overallAssessment": {
                            "description": "Overall assessment of outlier handling",
                            "type": "string"
                        }
                    },
                    "required": [
                        "justificationAssessment",
                        "methodologyAssessment",
                        "outlierFindings",
                        "outlierIdentificationReviewed",
                        "overallAssessment"
                    ],
                    "type": "object"
                },
                "reportReference": {
                    "description": "Review report reference",
                    "type": "string"
                },
                "reviewDate": {
                    "description": "Review date",
                    "type": "string"
                },
                "reviewTeam": {
                    "description": "Review team members",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "scope": {
                    "description": "Review scope",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "findings",
                "methodology",
                "name",
                "reportReference",
                "reviewDate",
                "reviewTeam",
                "scope",
                "uuid"
            ],
            "type": "object"
        },
        "PeerReviewDocumentation_2": {
            "description": "Peer review documentation for Initiating Event Analysis",
            "properties": {
                "findings": {
                    "description": "Findings and observations",
                    "items": {
                        "properties": {
                            "associatedRequirements": {
                                "description": "Associated requirement(s)",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "description": {
                                "description": "Finding description",
                                "type": "string"
                            },
                            "id": {
                                "description": "Finding ID",
                                "type": "string"
                            },
                            "resolutionDate": {
                                "description": "Resolution date",
                                "type": "string"
                            },
                            "resolutionPlan": {
                                "description": "Resolution plan",
                                "type": "string"
                            },
                            "significance": {
                                "description": "Significance level",
                                "enum": [
                                    "HIGH",
                                    "LOW",
                                    "MEDIUM"
                                ],
                                "type": "string"
                            },
                            "status": {
                                "description": "Status",
                                "enum": [
                                    "CLOSED",
                                    "IN_PROGRESS",
                                    "OPEN"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "associatedRequirements",
                            "description",
                            "id",
                            "significance",
                            "status"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "methodology": {
                    "description": "Review methodology",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "reportReference": {
                    "description": "Review report reference",
                    "type": "string"
                },
                "reviewDate": {
                    "description": "Review date",
                    "type": "string"
                },
                "reviewTeam": {
                    "description": "Review team members",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "scope": {
                    "description": "Review scope",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "findings",
                "methodology",
                "name",
                "reportReference",
                "reviewDate",
                "reviewTeam",
                "scope",
                "uuid"
            ],
            "type": "object"
        },
        "PeerReviewDocumentation_3": {
            "description": "Interface representing peer review documentation.",
            "properties": {
                "consistencyWithInitiatingEvents": {
                    "description": "Consistency with initiating event analysis",
                    "type": "string"
                },
                "findingsAndObservations": {
                    "description": "Findings and observations",
                    "items": {
                        "properties": {
                            "associatedRequirements": {
                                "description": "Associated requirements",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "description": {
                                "description": "Description of the finding",
                                "type": "string"
                            },
                            "id": {
                                "description": "Finding ID",
                                "type": "string"
                            },
                            "resolutionActions": {
                                "description": "Resolution actions",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "resolutionStatus": {
                                "description": "Resolution status",
                                "enum": [
                                    "CLOSED",
                                    "IN_PROGRESS",
                                    "OPEN"
                                ],
                                "type": "string"
                            },
                            "significance": {
                                "$ref": "#/definitions/ImportanceLevel",
                                "description": "Significance of the finding"
                            }
                        },
                        "required": [
                            "description",
                            "id",
                            "resolutionStatus",
                            "significance"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "methodology": {
                    "description": "Review methodology",
                    "type": "string"
                },
                "methodologyReview": {
                    "description": "Methodology review for the event sequence analysis",
                    "properties": {
                        "findingsAndResolutions": {
                            "$ref": "#/definitions/Record<string,string>"
                        },
                        "methodologyAssessment": {
                            "type": "string"
                        },
                        "peerReviewProcess": {
                            "type": "string"
                        },
                        "qualificationOfReviewers": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "methodologyAssessment",
                        "peerReviewProcess",
                        "qualificationOfReviewers"
                    ],
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "plantSpecificFeaturesRecognition": {
                    "description": "Recognition of plant-specific features",
                    "type": "string"
                },
                "reportReference": {
                    "description": "Review report reference",
                    "type": "string"
                },
                "reviewDate": {
                    "description": "Review date",
                    "type": "string"
                },
                "reviewerExperience": {
                    "description": "Reviewer experience specific to event sequence analysis",
                    "type": "string"
                },
                "reviewers": {
                    "description": "Review team members",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "scope": {
                    "description": "Scope of the review",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "findingsAndObservations",
                "methodology",
                "name",
                "reviewDate",
                "reviewers",
                "scope",
                "uuid"
            ],
            "type": "object"
        },
        "PeerReviewFinding": {
            "description": "Reusable interface for representing peer review findings.\nUsed to document feedback from peer reviews and responses.",
            "properties": {
                "actions": {
                    "description": "Actions taken to address the finding",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Category of the finding",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the finding",
                    "type": "string"
                },
                "findingId": {
                    "description": "ID of the peer review finding",
                    "type": "string"
                },
                "response": {
                    "description": "Response to the finding",
                    "type": "string"
                },
                "significance": {
                    "$ref": "#/definitions/ImportanceLevel",
                    "description": "Significance of the finding (HIGH/MEDIUM/LOW)"
                },
                "status": {
                    "description": "Resolution status",
                    "enum": [
                        "CLOSED",
                        "IN_PROGRESS",
                        "OPEN"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "category",
                "description",
                "findingId",
                "response",
                "significance",
                "status"
            ],
            "type": "object"
        },
        "PhenomenologicalDependencyModel": {
            "description": "Interface representing a phenomenological dependency model.\nUsed to define and document dependencies based on physical phenomena.",
            "properties": {
                "affectedSystems": {
                    "description": "Systems affected by the phenomenon",
                    "items": {
                        "$ref": "#/definitions/SystemReference_1"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the phenomenological dependency",
                    "type": "string"
                },
                "deterministicAnalysisReferences": {
                    "description": "References to deterministic analyses supporting the dependency model",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "environmentalConditions": {
                    "description": "Environmental conditions involved",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "phenomenon": {
                    "description": "Physical phenomenon causing the dependency",
                    "type": "string"
                },
                "systemSpecificImpacts": {
                    "$ref": "#/definitions/Record<SystemReference,string>_1",
                    "description": "Specific impacts on each affected system"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "affectedSystems",
                "description",
                "name",
                "phenomenon",
                "uuid"
            ],
            "type": "object"
        },
        "PhenomenologicalImpact": {
            "description": "Interface representing a phenomenological impact in an event sequence.",
            "properties": {
                "affectedElements": {
                    "description": "Affected systems or components",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/SystemReference_1",
                                "description": "Type for system references.\nFormat: SYS-[NAME]\nExample: SYS-RCIC"
                            },
                            {
                                "$ref": "#/definitions/HumanActionReference_1",
                                "description": "Type for human action references.\nFormat: HRA-[NUMBER]\nExample: HRA-001"
                            }
                        ]
                    },
                    "type": "array"
                },
                "applicableInitiatingEvents": {
                    "description": "Applicable initiating events",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "applicablePlantOperatingStates": {
                    "description": "Applicable plant operating states",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the impact",
                    "type": "string"
                },
                "deterministicAnalysisReferences": {
                    "description": "Deterministic analyses supporting the impact characterization",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "duration": {
                    "allOf": [
                        {
                            "properties": {
                                "typia.tag": {
                                    "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                    "properties": {
                                        "exclusive": {
                                            "items": [
                                                {
                                                    "const": "minimum",
                                                    "type": "string"
                                                },
                                                {
                                                    "const": "exclusiveMinimum",
                                                    "type": "string"
                                                }
                                            ],
                                            "maxItems": 2,
                                            "minItems": 2,
                                            "type": "array"
                                        },
                                        "kind": {
                                            "const": "minimum",
                                            "type": "string"
                                        },
                                        "schema": {
                                            "properties": {
                                                "minimum": {
                                                    "const": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "minimum"
                                            ],
                                            "type": "object"
                                        },
                                        "target": {
                                            "const": "number",
                                            "type": "string"
                                        },
                                        "validate": {
                                            "const": "0 <= $input",
                                            "type": "string"
                                        },
                                        "value": {
                                            "const": 0,
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "exclusive",
                                        "kind",
                                        "schema",
                                        "target",
                                        "validate",
                                        "value"
                                    ],
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "description": "Duration of the impact (hours)"
                },
                "importanceLevel": {
                    "description": "Importance level of the impact",
                    "enum": [
                        "HIGH",
                        "LOW",
                        "MEDIUM"
                    ],
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "timing": {
                    "allOf": [
                        {
                            "properties": {
                                "typia.tag": {
                                    "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                    "properties": {
                                        "exclusive": {
                                            "items": [
                                                {
                                                    "const": "minimum",
                                                    "type": "string"
                                                },
                                                {
                                                    "const": "exclusiveMinimum",
                                                    "type": "string"
                                                }
                                            ],
                                            "maxItems": 2,
                                            "minItems": 2,
                                            "type": "array"
                                        },
                                        "kind": {
                                            "const": "minimum",
                                            "type": "string"
                                        },
                                        "schema": {
                                            "properties": {
                                                "minimum": {
                                                    "const": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "minimum"
                                            ],
                                            "type": "object"
                                        },
                                        "target": {
                                            "const": "number",
                                            "type": "string"
                                        },
                                        "validate": {
                                            "const": "0 <= $input",
                                            "type": "string"
                                        },
                                        "value": {
                                            "const": 0,
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "exclusive",
                                        "kind",
                                        "schema",
                                        "target",
                                        "validate",
                                        "value"
                                    ],
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "description": "Timing of the impact (hours after initiating event)"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "affectedElements",
                "description",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "PlantEvolution": {
            "description": "Interface representing plant evolution information.\nCombines the original PlantEvolution with PlantEvolutionDescription and PlantEvolutionConsiderations.",
            "properties": {
                "activitiesLeadingToChanges": {
                    "description": "Activities that may lead to changes in the parameters.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "availableInstrumentation": {
                    "description": "Available instrumentation for key parameters to be monitored.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the plant evolution.",
                    "type": "string"
                },
                "evolutionConsiderations": {
                    "description": "Considerations for plant evolution",
                    "properties": {
                        "availableMonitoringDevices": {
                            "description": "Available monitoring devices",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "hazardBarrierEffectivenessChanges": {
                            "description": "Hazard barrier effectiveness changes during transition \nPer RG 1.247, POS definitions should include consideration of changing plant conditions that may\nimpair or change the effectiveness of hazard barriers",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "operatorActions": {
                            "description": "Operator actions",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "propagationPathwayModifications": {
                            "description": "Propagation pathway modifications during transition \nPer RG 1.247, POS definitions should consider changes that may affect propagation pathways",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "radionuclideTransportBarrierStatus": {
                            "description": "Radionuclide transport barrier status",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "reactorCoolantBoundaryConfigurations": {
                            "description": "Reactor coolant boundary configurations (e.g., vented, RCS penetrations, decay heat removal mechanism)",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "reactorCoolantSystemParameterRanges": {
                            "description": "Reactor coolant system parameter ranges",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "screeningStatus": {
                            "$ref": "#/definitions/ScreeningStatus",
                            "description": "Screening status for these considerations"
                        },
                        "sscFragilityModifications": {
                            "description": "SSC fragility modifications during transition \nPer RG 1.247, POS definitions should consider changes that may modify fragilities of SSCs",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "transitionParameters": {
                            "description": "Transition parameters that define changes between states\nUses the reusable TransitionParameter interface",
                            "items": {
                                "$ref": "#/definitions/TransitionParameter"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "availableMonitoringDevices",
                        "operatorActions",
                        "radionuclideTransportBarrierStatus",
                        "reactorCoolantBoundaryConfigurations",
                        "reactorCoolantSystemParameterRanges",
                        "screeningStatus"
                    ],
                    "type": "object"
                },
                "evolutionProperties": {
                    "description": "Descriptions of plant transitions with their PRA modes and screening status",
                    "properties": {
                        "praMode": {
                            "description": "PRA mode for this transition",
                            "type": "string"
                        },
                        "screeningStatus": {
                            "$ref": "#/definitions/ScreeningStatus",
                            "description": "Screening status for this transition"
                        }
                    },
                    "required": [
                        "praMode",
                        "screeningStatus"
                    ],
                    "type": "object"
                },
                "initiatingEvents": {
                    "description": "List of initiating events applicable to this evolution\nReferences to initiating events defined in the core/events module",
                    "items": {
                        "$ref": "#/definitions/InitiatingEvent"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "operatingModes": {
                    "description": "Operating modes or operational conditions during the plant evolution.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "operationalAssumptions": {
                    "description": "Operational assumptions on full power, shutdown, refueling, and startup conditions.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "plantOperatingStates": {
                    "description": "List of plant operating states within this evolution.",
                    "items": {
                        "$ref": "#/definitions/PlantOperatingState"
                    },
                    "type": "array"
                },
                "radionuclideTransportBarriersStatus": {
                    "description": "Status of radionuclide transport barriers.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rcbConfigurations": {
                    "description": "Reactor coolant boundary (RCB) configurations, such as vented or not vented.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rcsParameters": {
                    "description": "Range of RCS parameters (e.g., power level, temperature, pressure).",
                    "properties": {
                        "coolantInventory": {
                            "type": "number"
                        },
                        "powerLevel": {
                            "type": "number"
                        },
                        "pressure": {
                            "type": "number"
                        },
                        "temperature": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "sscCapabilitiesChanges": {
                    "description": "Activities changing the capabilities of SSCs to support safety functions.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "transitions": {
                    "description": "Transitions between plant operating states within this evolution\nCaptures the details and risks associated with state transitions",
                    "items": {
                        "$ref": "#/definitions/TransitionEvent"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "activitiesLeadingToChanges",
                "availableInstrumentation",
                "name",
                "operatingModes",
                "operationalAssumptions",
                "plantOperatingStates",
                "radionuclideTransportBarriersStatus",
                "rcbConfigurations",
                "rcsParameters",
                "sscCapabilitiesChanges",
                "uuid"
            ],
            "type": "object"
        },
        "PlantOperatingState": {
            "description": "Interface representing a plant operating state (POS).\nPer RG 1.247, a POS represents distinct and relatively constant plant conditions. The POS is defined\nin terms of all important conditions that may affect the delineation and evaluation of event sequences\nmodeled in the PRA. POS definitions should consider decay heat level, RCS configuration, reactor level,\nreactor pressure and temperature, radionuclide transport configuration, status of barriers, available\ninstrumentation, and other parameters needed to determine success criteria and source terms.",
            "properties": {
                "activitiesLeadingToChanges": {
                    "description": "Activities that may lead to changes in parameters",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "assumptions": {
                    "description": "Assumptions made in defining this operating state",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "availableInstrumentation": {
                    "description": "Available instrumentation for monitoring key parameters",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "characteristics": {
                    "description": "Characteristics of the operating state",
                    "type": "string"
                },
                "decayHeatRemoval": {
                    "$ref": "#/definitions/DecayHeatRemovalSystems",
                    "description": "Decay heat removal systems available"
                },
                "description": {
                    "description": "Description of the plant operating state",
                    "type": "string"
                },
                "detailedInstrumentation": {
                    "description": "Detailed information about available instruments",
                    "items": {
                        "$ref": "#/definitions/Instrument"
                    },
                    "type": "array"
                },
                "detailedRadioactiveSources": {
                    "description": "Detailed information about radioactive sources in this POS",
                    "items": {
                        "$ref": "#/definitions/RadioactiveSource"
                    },
                    "type": "array"
                },
                "initiatingEvents": {
                    "description": "Initiating events applicable to this state \nReferences to initiating events defined in the core/events module",
                    "items": {
                        "$ref": "#/definitions/InitiatingEvent"
                    },
                    "type": "array"
                },
                "meanDuration": {
                    "description": "Mean duration of the plant operating state in hours",
                    "type": "number"
                },
                "meanFrequency": {
                    "$ref": "#/definitions/Frequency",
                    "description": "Mean frequency of the plant operating state"
                },
                "meanTimeSinceShutdown": {
                    "description": "Mean time since shutdown in hours",
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "operatingMode": {
                    "$ref": "#/definitions/OperatingState",
                    "description": "Operating mode or operational condition of the plant"
                },
                "plantRepresentationAccuracy": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/PlantRepresentationAccuracy"
                        },
                        {
                            "properties": {
                                "highConfidenceAreas": {
                                    "description": "Areas with high confidence",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "improvementPlans": {
                                    "description": "Plans for improvement",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "lowerConfidenceAreas": {
                                    "description": "Areas with lower confidence",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "description": "Plant representation accuracy for this POS\nDocuments how closely the PRA model represents the as-built and as-operated plant"
                },
                "processCriteriaIdentification": {
                    "description": "Process criteria identification for transitions",
                    "type": "string"
                },
                "radioactiveMaterialSources": {
                    "description": "Sources of radioactive material within the scope of the PRA",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "radionuclideTransportBarrier": {
                    "$ref": "#/definitions/RadionuclideTransportBarriers",
                    "description": "Radionuclide transport barrier statuses"
                },
                "rcbConfiguration": {
                    "description": "Reactor Coolant Boundary configuration",
                    "type": "string"
                },
                "rcsParameters": {
                    "$ref": "#/definitions/ReactorCoolantSystemParameters",
                    "description": "Reactor coolant system parameter ranges"
                },
                "riskSignificance": {
                    "$ref": "#/definitions/OperatingStateRisk",
                    "description": "Risk significance of this operating state\nCaptures the contribution to overall plant risk"
                },
                "safetyFunctions": {
                    "description": "Safety functions and their status in this operating state",
                    "items": {
                        "$ref": "#/definitions/SafetyFunction"
                    },
                    "type": "array"
                },
                "successCriteriaIds": {
                    "description": "References to success criteria specific to this operating state\nThese IDs reference success criteria defined in the success-criteria module\nFormat: SC-[SYSTEM]-[NUMBER], e.g., \"SC-RCIC-001\"",
                    "items": {
                        "$ref": "#/definitions/SuccessCriteriaId"
                    },
                    "type": "array"
                },
                "timeBoundary": {
                    "$ref": "#/definitions/TimeBoundary",
                    "description": "Explicit time boundary that defines when this POS begins and ends\nUsed to ensure mutual exclusivity between operating states"
                },
                "timeVaryingConditions": {
                    "description": "Time-varying conditions within this POS\nCaptures how conditions change over time during the POS",
                    "items": {
                        "$ref": "#/definitions/TimeVaryingCondition"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "availableInstrumentation",
                "decayHeatRemoval",
                "initiatingEvents",
                "meanDuration",
                "name",
                "operatingMode",
                "radioactiveMaterialSources",
                "radionuclideTransportBarrier",
                "rcbConfiguration",
                "rcsParameters",
                "safetyFunctions",
                "timeBoundary",
                "uuid"
            ],
            "type": "object"
        },
        "PlantOperatingStateReference": {
            "description": "Used to reference plant operating states without creating circular dependencies",
            "type": "string"
        },
        "PlantOperatingStatesAnalysis": {
            "description": "Interface representing plant operating state analysis.\n\nThis is the main container interface that brings together all aspects of the Plant Operating States Analysis.\nIt implements multiple High-Level Requirements (HLRs) and their Supporting Requirements (SRs).",
            "properties": {
                "additionalMetadata": {
                    "description": "Additional metadata specific to Plant Operating States Analysis",
                    "properties": {
                        "assumptions": {
                            "description": "Plant operating states specific assumptions",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "limitations": {
                            "description": "Plant operating states specific limitations",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "assumptionsLackOfDetail": {
                    "description": "List of assumptions due to lack of as-built details",
                    "items": {
                        "$ref": "#/definitions/AssumptionsLackOfDetail"
                    },
                    "type": "array"
                },
                "commonAssumptions": {
                    "description": "Common assumptions that apply across this technical element\nUsing the standardized BaseAssumption interface",
                    "items": {
                        "$ref": "#/definitions/BaseAssumption"
                    },
                    "type": "array"
                },
                "created": {
                    "description": "The date the technical element was created",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the technical element",
                    "type": "string"
                },
                "documentation": {
                    "$ref": "#/definitions/PlantOperatingStatesDocumentation",
                    "description": "Documentation of the analysis"
                },
                "hazardousSources": {
                    "$ref": "#/definitions/HazardousSources",
                    "description": "Hazardous sources information"
                },
                "includesAtPowerOperations": {
                    "description": "Flag indicating whether at-power operations are included in the analysis\nPer regulatory guidance, at-power operations must be included at a minimum",
                    "type": "boolean"
                },
                "modelUncertainty": {
                    "description": "Sources of model uncertainty related to POS definitions",
                    "items": {
                        "$ref": "#/definitions/ModelUncertaintyInfo"
                    },
                    "type": "array"
                },
                "modified": {
                    "description": "The date the technical element was last modified",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "description": "The owner of the technical element",
                    "type": "string"
                },
                "plantEvolutions": {
                    "description": "List of plant evolutions to be analyzed\nMust include, at a minimum, plant evolutions from at-power operations",
                    "items": {
                        "$ref": "#/definitions/PlantEvolution"
                    },
                    "type": "array"
                },
                "plantOperatingStatesGroups": {
                    "description": "Plant operating state groups for analysis simplification",
                    "items": {
                        "$ref": "#/definitions/PlantOperatingStatesGroup"
                    },
                    "type": "array"
                },
                "plantRepresentationAccuracy": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/PlantRepresentationAccuracy"
                        },
                        {
                            "properties": {
                                "highConfidenceAreas": {
                                    "description": "Areas with high confidence",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "improvementPlans": {
                                    "description": "Plans for improvement",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "lowerConfidenceAreas": {
                                    "description": "Areas with lower confidence",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "description": "Plant representation accuracy assessment\nDocuments how closely the PRA represents the as-built and as-operated plant"
                },
                "posValidationRules": {
                    "$ref": "#/definitions/POSValidationRules",
                    "description": "Validation rules to ensure POSs are mutually exclusive and collectively exhaustive"
                },
                "references": {
                    "description": "References to other technical elements",
                    "items": {
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "technicalElementId": {
                                "type": "string"
                            },
                            "technicalElementType": {
                                "$ref": "#/definitions/TechnicalElementTypes"
                            }
                        },
                        "required": [
                            "description",
                            "technicalElementId",
                            "technicalElementType"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "sscsAndOperationalCharacteristics": {
                    "description": "SSCs and operational characteristics needed for safety",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "status": {
                    "description": "The status of the technical element",
                    "enum": [
                        "APPROVED",
                        "DEPRECATED",
                        "DRAFT",
                        "REVIEW"
                    ],
                    "type": "string"
                },
                "subsumedPOSs": {
                    "description": "Documentation of subsumed POSs",
                    "items": {
                        "$ref": "#/definitions/SubsumedPOS"
                    },
                    "type": "array"
                },
                "tags": {
                    "description": "Tags associated with the technical element",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "timeVaryingConditions": {
                    "description": "Time-varying conditions across multiple POSs\nCaptures changes in conditions over time that span multiple operating states",
                    "items": {
                        "$ref": "#/definitions/TimeVaryingCondition"
                    },
                    "type": "array"
                },
                "transitionEvents": {
                    "description": "Transition events between plant operating states\nDocuments the transitions and associated risks",
                    "items": {
                        "$ref": "#/definitions/TransitionEvent"
                    },
                    "type": "array"
                },
                "type": {
                    "const": "plant-operating-states-analysis",
                    "description": "The type of technical element",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "version": {
                    "description": "The version of the technical element",
                    "type": "string"
                }
            },
            "required": [
                "created",
                "hazardousSources",
                "includesAtPowerOperations",
                "modified",
                "name",
                "plantEvolutions",
                "posValidationRules",
                "type",
                "uuid",
                "version"
            ],
            "type": "object"
        },
        "PlantOperatingStatesDocumentation": {
            "description": "Data structure to document the Plant Operating State Analysis\nThis comprehensive documentation structure captures all aspects of the analysis process,\nfindings, and provides traceability for the work.",
            "properties": {
                "asBuiltLimitations": {
                    "description": "Assumptions and limitations due to the lack of as-built, as-operated details.",
                    "type": "string"
                },
                "decayHeatDetails": {
                    "description": "Details on the decay heat associated with each plant operating state of each plant evolution.",
                    "type": "string"
                },
                "groupingProcessDetails": {
                    "description": "Details on the process and criteria used to group plant operating states.",
                    "type": "string"
                },
                "identificationProcessDetails": {
                    "description": "Details on the process and criteria used to identify plant operating states.",
                    "type": "string"
                },
                "meanDurationsDetails": {
                    "description": "Details on the mean durations, mean times since shutdown, and mean frequencies of plant operating states.",
                    "type": "string"
                },
                "modelUncertaintySources": {
                    "description": "Sources of model uncertainty, related assumptions, and reasonable alternatives.",
                    "type": "string"
                },
                "peerReviewFindings": {
                    "description": "Documentation of peer review findings and responses\nEspecially important for PRAs performed during pre-operational stages",
                    "items": {
                        "$ref": "#/definitions/PeerReviewFinding"
                    },
                    "type": "array"
                },
                "plantEvolutionsDetails": {
                    "description": "Details on the selection and definitions of the plant evolutions.",
                    "type": "string"
                },
                "praTaskInterfaces": {
                    "description": "Specific interfaces with other PRA tasks for traceability.",
                    "type": "string"
                },
                "processDescription": {
                    "description": "Description of the process used in the Plant Operating State Analysis.",
                    "type": "string"
                },
                "stateCharacteristics": {
                    "description": "Defining characteristics of each plant operating state.",
                    "type": "string"
                },
                "stateGroupDefinitions": {
                    "description": "Definition of each plant operating state group.",
                    "type": "string"
                },
                "transitionRisks": {
                    "description": "Documentation of transition risks\nCaptures the risks associated with transitions between operating states",
                    "items": {
                        "$ref": "#/definitions/TransitionRisk"
                    },
                    "type": "array"
                }
            },
            "required": [
                "asBuiltLimitations",
                "decayHeatDetails",
                "groupingProcessDetails",
                "identificationProcessDetails",
                "meanDurationsDetails",
                "modelUncertaintySources",
                "plantEvolutionsDetails",
                "praTaskInterfaces",
                "processDescription",
                "stateCharacteristics",
                "stateGroupDefinitions"
            ],
            "type": "object"
        },
        "PlantOperatingStatesGroup": {
            "description": "Interface for grouping plant operating states based on similar characteristics.\n\nPer RG 1.247, \"LPSD types of POSs that are subsumed into each other are shown \nto be represented by the characteristics of the subsuming group.\"",
            "properties": {
                "description": {
                    "description": "Description of the plant operating state group",
                    "type": "string"
                },
                "groupingJustification": {
                    "description": "Justification for grouping these plant operating states together",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "plantOperatingStateIds": {
                    "description": "IDs of plant operating states included in this group",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "representativeCharacteristics": {
                    "description": "Representative characteristics of the group",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "groupingJustification",
                "name",
                "plantOperatingStateIds",
                "representativeCharacteristics",
                "uuid"
            ],
            "type": "object"
        },
        "PlantOperatingStatesTable": {
            "additionalProperties": {
                "$ref": "#/definitions/PlantOperatingState"
            },
            "description": "Interface representing plant operating states table.",
            "properties": {
                "controlledShutdown": {
                    "$ref": "#/definitions/PlantOperatingState",
                    "description": "Controlled shutdown operating state"
                },
                "fullPower": {
                    "$ref": "#/definitions/PlantOperatingState",
                    "description": "Full power operating state"
                },
                "startUp": {
                    "$ref": "#/definitions/PlantOperatingState",
                    "description": "Startup operating state"
                }
            },
            "required": [
                "controlledShutdown",
                "fullPower",
                "startUp"
            ],
            "type": "object"
        },
        "PlantRepresentationAccuracy": {
            "description": "Reusable interface for representing plant representation accuracy assessments.\nUsed to document how closely the PRA model represents the as-built and as-operated plant.",
            "properties": {
                "accuracy": {
                    "$ref": "#/definitions/ImportanceLevel",
                    "description": "Degree of accuracy"
                },
                "basis": {
                    "description": "Basis for accuracy assessment",
                    "type": "string"
                },
                "improvementActions": {
                    "description": "Actions to improve accuracy",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "limitations": {
                    "description": "Limitations in plant representation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "sufficiencyJustification": {
                    "description": "Justification for the sufficiency assessment",
                    "type": "string"
                },
                "sufficientForRiskSignificantContributors": {
                    "description": "Assessment of whether the detail level is sufficient to identify risk-significant contributors\nFor operating plants, this must be explicitly evaluated",
                    "type": "boolean"
                }
            },
            "required": [
                "accuracy",
                "basis",
                "sufficientForRiskSignificantContributors"
            ],
            "type": "object"
        },
        "PlantSpecificDesignInformation": {
            "description": "Interface for plant-specific design information used in analysis.",
            "properties": {
                "date": {
                    "description": "Date of the source document",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the design information",
                    "type": "string"
                },
                "designParameters": {
                    "$ref": "#/definitions/Record<string,string>",
                    "description": "Design parameters used in analysis"
                },
                "operatingConfigurations": {
                    "description": "Operating configurations covered",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "operatingPhilosophies": {
                    "description": "Operating philosophies reflected",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "plantSystems": {
                    "description": "Plant systems described",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "requirementId": {
                    "description": "Requirement identifier for traceability",
                    "type": "string"
                },
                "revision": {
                    "description": "Document revision identifier",
                    "type": "string"
                },
                "sourceId": {
                    "description": "Identifier for the design source document",
                    "type": "string"
                },
                "sourceType": {
                    "description": "Type of source document (e.g., \"drawing\", \"calculation\", \"specification\")",
                    "type": "string"
                },
                "standardSection": {
                    "description": "Section number in relevant standard (e.g., NRC RG 1.247)",
                    "type": "string"
                }
            },
            "required": [
                "designParameters",
                "operatingConfigurations",
                "plantSystems",
                "sourceId",
                "sourceType"
            ],
            "type": "object"
        },
        "PreOperationalAssumption": {
            "description": "Interface for pre-operational assumptions that are made due to lack of as-built, as-operated details.\nExtends the base assumption with additional properties specific to pre-operational contexts.",
            "properties": {
                "addressingPlans": {
                    "description": "Plans to address or validate the assumption",
                    "type": "string"
                },
                "assumptionId": {
                    "description": "Unique identifier for the assumption within its context",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the assumption",
                    "type": "string"
                },
                "impact": {
                    "description": "Impact of the assumption on the analysis",
                    "type": "string"
                },
                "isPreOperational": {
                    "description": "Whether this is a pre-operational assumption (due to lack of as-built/as-operated details)",
                    "type": "boolean"
                },
                "limitations": {
                    "description": "Limitations imposed by this assumption - required for pre-operational assumptions",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rationale": {
                    "description": "Justification or rationale for the assumption",
                    "type": "string"
                },
                "references": {
                    "description": "References to supporting documentation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "requiredDesignInformation": {
                    "description": "Design information needed to resolve the assumption",
                    "items": {
                        "$ref": "#/definitions/BaseDesignInformation"
                    },
                    "type": "array"
                },
                "resolutionPlan": {
                    "description": "Specific resolution plan for addressing this assumption",
                    "type": "string"
                },
                "status": {
                    "description": "Current status - required for pre-operational assumptions",
                    "enum": [
                        "CLOSED",
                        "IN_PROGRESS",
                        "OPEN"
                    ],
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "assumptionId",
                "description",
                "limitations",
                "status",
                "uuid"
            ],
            "type": "object"
        },
        "PreOperationalAssumptions": {
            "description": "Pre-operational assumptions for Initiating Event Analysis",
            "properties": {
                "impact": {
                    "description": "Impact on the analysis",
                    "type": "string"
                },
                "statement": {
                    "description": "The assumption statement",
                    "type": "string"
                },
                "treatmentApproach": {
                    "description": "How the assumption is addressed",
                    "type": "string"
                },
                "validationPlan": {
                    "description": "Plans for validation once the plant is built",
                    "type": "string"
                }
            },
            "required": [
                "impact",
                "statement",
                "treatmentApproach"
            ],
            "type": "object"
        },
        "PreOperationalAssumptionsDocumentation": {
            "description": "Interface representing documentation of pre-operational assumptions.",
            "properties": {
                "assumptions": {
                    "description": "Assumptions due to lack of as-built, as-operated details",
                    "items": {
                        "$ref": "#/definitions/PreOperationalAssumption"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "successCriteriaSpecificAssumptions": {
                    "description": "Success criteria specific assumptions",
                    "items": {
                        "properties": {
                            "assumptions": {
                                "description": "Specific assumptions for these criteria",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "impact": {
                                "description": "Impact on criteria definition",
                                "type": "string"
                            },
                            "resolutionPlans": {
                                "description": "Plans to resolve these assumptions",
                                "type": "string"
                            },
                            "successCriteriaId": {
                                "$ref": "#/definitions/SuccessCriteriaId",
                                "description": "Success criteria ID"
                            }
                        },
                        "required": [
                            "assumptions",
                            "impact",
                            "successCriteriaId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "supportingDocumentationReferences": {
                    "description": "References to supporting documentation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "validationPhase": {
                    "description": "Plant construction or operational phase when assumption can be validated",
                    "type": "string"
                }
            },
            "required": [
                "assumptions",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "PreOperationalAssumptionsDocumentation_1": {
            "description": "Interface representing pre-operational assumptions documentation",
            "properties": {
                "assumptions": {
                    "description": "Assumptions due to lack of as-built, as-operated details",
                    "items": {
                        "$ref": "#/definitions/PreOperationalAssumption"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "relatedNote": {
                    "description": "Reference to DA-N-5 (Note)",
                    "type": "string"
                },
                "relatedRequirement": {
                    "description": "Reference to DA-A6",
                    "type": "string"
                },
                "supportingDocumentationReferences": {
                    "description": "References to supporting documentation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "validationPhase": {
                    "description": "Plant construction or operational phase when assumption can be validated",
                    "type": "string"
                }
            },
            "required": [
                "assumptions",
                "name",
                "relatedNote",
                "relatedRequirement",
                "uuid"
            ],
            "type": "object"
        },
        "PreOperationalAssumptionsDocumentation_2": {
            "description": "Interface representing documentation of pre-operational assumptions.",
            "properties": {
                "assumptions": {
                    "description": "Assumptions due to lack of as-built, as-operated details",
                    "items": {
                        "$ref": "#/definitions/PreOperationalAssumption"
                    },
                    "type": "array"
                },
                "eventSequenceSpecificAssumptions": {
                    "description": "Event sequence specific assumptions",
                    "items": {
                        "properties": {
                            "assumptions": {
                                "description": "Specific assumptions for this sequence",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "eventSequenceId": {
                                "$ref": "#/definitions/EventSequenceReference",
                                "description": "Event sequence ID"
                            },
                            "modelingImpact": {
                                "description": "Impact on sequence modeling",
                                "type": "string"
                            }
                        },
                        "required": [
                            "assumptions",
                            "eventSequenceId",
                            "modelingImpact"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "supportingDocumentationReferences": {
                    "description": "References to supporting documentation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "validationPhase": {
                    "description": "Plant construction or operational phase when assumption can be validated",
                    "type": "string"
                }
            },
            "required": [
                "assumptions",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "ProcessDocumentation": {
            "description": "Interface representing documentation of the process used in the success criteria development.",
            "properties": {
                "calculationLimitations": {
                    "description": "Documentation of limitations of calculations and codes",
                    "items": {
                        "properties": {
                            "affectedItems": {
                                "description": "Affected calculations or codes",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "description": {
                                "description": "Description of the limitation",
                                "type": "string"
                            },
                            "impact": {
                                "description": "Impact on success criteria",
                                "type": "string"
                            },
                            "limitationId": {
                                "description": "Limitation identifier",
                                "type": "string"
                            },
                            "mitigation": {
                                "description": "Mitigation strategies",
                                "type": "string"
                            }
                        },
                        "required": [
                            "affectedItems",
                            "description",
                            "impact",
                            "limitationId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "calculationsUsed": {
                    "description": "Documentation of calculations used to establish success criteria",
                    "items": {
                        "properties": {
                            "calculationId": {
                                "description": "Calculation identifier",
                                "type": "string"
                            },
                            "calculationType": {
                                "description": "Whether it's generic or plant-specific",
                                "enum": [
                                    "GENERIC",
                                    "PLANT_SPECIFIC"
                                ],
                                "type": "string"
                            },
                            "description": {
                                "description": "Description of the calculation",
                                "type": "string"
                            },
                            "establishedCriteria": {
                                "description": "Success criteria established by this calculation",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "references": {
                                "description": "References to the calculation documentation",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "calculationId",
                            "calculationType",
                            "description",
                            "establishedCriteria",
                            "references"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "computerCodesUsed": {
                    "description": "Documentation of computer codes used",
                    "items": {
                        "properties": {
                            "codeId": {
                                "description": "Code identifier",
                                "type": "string"
                            },
                            "description": {
                                "description": "Description of the code",
                                "type": "string"
                            },
                            "establishedCriteria": {
                                "description": "Success criteria established using this code",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "nameAndVersion": {
                                "description": "Code name and version",
                                "type": "string"
                            },
                            "validationReferences": {
                                "description": "References to validation documentation",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "codeId",
                            "description",
                            "establishedCriteria",
                            "nameAndVersion",
                            "validationReferences"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "designInformation": {
                    "description": "Design information sources used in the analysis",
                    "items": {
                        "$ref": "#/definitions/BaseDesignInformation"
                    },
                    "type": "array"
                },
                "digitalSystemsCriteria": {
                    "description": "Documentation of success criteria for digital systems",
                    "items": {
                        "properties": {
                            "criteria": {
                                "description": "Success criteria",
                                "type": "string"
                            },
                            "failureModes": {
                                "description": "Failure modes considered",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "supportingAnalyses": {
                                "description": "References to supporting analyses",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "systemId": {
                                "description": "Digital system identifier",
                                "type": "string"
                            },
                            "technicalBasis": {
                                "description": "Technical basis",
                                "type": "string"
                            }
                        },
                        "required": [
                            "criteria",
                            "failureModes",
                            "supportingAnalyses",
                            "systemId",
                            "technicalBasis"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "endStateDefinitions": {
                    "description": "Documentation of the definition of end states",
                    "items": {
                        "properties": {
                            "definition": {
                                "description": "Definition of the end state",
                                "type": "string"
                            },
                            "endStateId": {
                                "description": "End state identifier",
                                "type": "string"
                            },
                            "eventSequences": {
                                "description": "Event sequences leading to this end state",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "parameterBasis": {
                                "description": "Basis for parameter values",
                                "type": "string"
                            },
                            "parameters": {
                                "$ref": "#/definitions/Record<string,string>",
                                "description": "Key parameters used to define this end state"
                            }
                        },
                        "required": [
                            "definition",
                            "endStateId",
                            "eventSequences",
                            "parameterBasis",
                            "parameters"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "expertJudgmentUse": {
                    "description": "Documentation of expert judgment use",
                    "items": {
                        "properties": {
                            "impactedCriteria": {
                                "description": "Success criteria impacted",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "judgmentId": {
                                "description": "Identifier for the expert judgment",
                                "type": "string"
                            },
                            "rationale": {
                                "description": "Rationale for using expert judgment",
                                "type": "string"
                            },
                            "topic": {
                                "description": "Topic of the judgment",
                                "type": "string"
                            }
                        },
                        "required": [
                            "impactedCriteria",
                            "judgmentId",
                            "rationale",
                            "topic"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "groupedEventsCriteria": {
                    "description": "Documentation of grouped initiating events criteria",
                    "items": {
                        "properties": {
                            "groupId": {
                                "description": "Group identifier",
                                "type": "string"
                            },
                            "groupedEvents": {
                                "description": "Initiating events in this group",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "groupingBasis": {
                                "description": "Basis for the grouping",
                                "type": "string"
                            },
                            "limitations": {
                                "description": "Limitations of the grouping",
                                "type": "string"
                            },
                            "process": {
                                "description": "Process for defining common success criteria",
                                "type": "string"
                            }
                        },
                        "required": [
                            "groupId",
                            "groupedEvents",
                            "groupingBasis",
                            "process"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "humanActionTimingBasis": {
                    "description": "Documentation of time available for human actions",
                    "items": {
                        "properties": {
                            "actionId": {
                                "description": "Human action identifier",
                                "type": "string"
                            },
                            "basis": {
                                "description": "Basis for this time",
                                "type": "string"
                            },
                            "supportingAnalyses": {
                                "description": "References to supporting analyses",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "timeAvailable": {
                                "description": "Time available",
                                "type": "string"
                            }
                        },
                        "required": [
                            "actionId",
                            "basis",
                            "supportingAnalyses",
                            "timeAvailable"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "inputsDescription": {
                    "description": "Description of inputs used in the analysis",
                    "type": "string"
                },
                "methodsDescription": {
                    "description": "Description of methods applied in the analysis",
                    "type": "string"
                },
                "mitigatingSystemsCriteria": {
                    "description": "Documentation of success criteria for mitigating systems",
                    "items": {
                        "properties": {
                            "applicableInitiatingEvents": {
                                "description": "Initiating events where this system is credited",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "successCriteria": {
                                "description": "Success criteria for this system",
                                "type": "string"
                            },
                            "systemId": {
                                "description": "System identifier",
                                "type": "string"
                            },
                            "technicalBasis": {
                                "description": "Technical basis",
                                "type": "string"
                            }
                        },
                        "required": [
                            "applicableInitiatingEvents",
                            "successCriteria",
                            "systemId",
                            "technicalBasis"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "passiveSafetyCriteria": {
                    "description": "Documentation of passive safety function criteria",
                    "items": {
                        "properties": {
                            "criteria": {
                                "description": "Success criteria",
                                "type": "string"
                            },
                            "description": {
                                "description": "Description of the function",
                                "type": "string"
                            },
                            "functionId": {
                                "description": "Passive safety function identifier",
                                "type": "string"
                            },
                            "technicalBasis": {
                                "description": "Technical basis",
                                "type": "string"
                            },
                            "uncertainties": {
                                "description": "Uncertainties in these criteria",
                                "type": "string"
                            },
                            "uncertaintyTreatment": {
                                "description": "How uncertainties were addressed",
                                "type": "string"
                            }
                        },
                        "required": [
                            "criteria",
                            "description",
                            "functionId",
                            "technicalBasis",
                            "uncertainties",
                            "uncertaintyTreatment"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "processDescription": {
                    "description": "Description of the overall process used",
                    "type": "string"
                },
                "requirementReferences": {
                    "description": "Traceability to requirements",
                    "items": {
                        "properties": {
                            "implementation": {
                                "description": "How the requirement is addressed",
                                "type": "string"
                            },
                            "requirementId": {
                                "description": "Requirement identifier",
                                "type": "string"
                            }
                        },
                        "required": [
                            "implementation",
                            "requirementId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "resultsDescription": {
                    "description": "Description of the results of the analysis",
                    "type": "string"
                },
                "sharedSystemsCriteria": {
                    "description": "Documentation of shared systems criteria",
                    "items": {
                        "properties": {
                            "commonInitiatingEvents": {
                                "description": "Common initiating events considered",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "criteria": {
                                "description": "Success criteria",
                                "type": "string"
                            },
                            "sharedByReactors": {
                                "description": "Reactors sharing this system",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "systemId": {
                                "description": "Shared system identifier",
                                "type": "string"
                            },
                            "technicalBasis": {
                                "description": "Technical basis",
                                "type": "string"
                            }
                        },
                        "required": [
                            "commonInitiatingEvents",
                            "criteria",
                            "sharedByReactors",
                            "systemId",
                            "technicalBasis"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "supportingDocumentationReferences": {
                    "description": "References to supporting documentation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "name",
                "processDescription",
                "uuid"
            ],
            "type": "object"
        },
        "ProcessDocumentation_1": {
            "description": "Interface representing documentation of the process used in the systems analysis.",
            "properties": {
                "basicEventsDocumentation": {
                    "$ref": "#/definitions/Record<string,{system:SystemReference;description:string;moduleReference?:string|undefined;cutsetReference?:string|undefined;}>",
                    "description": "Documentation of basic events traceability."
                },
                "componentsFailureModesDocumentation": {
                    "$ref": "#/definitions/Record<SystemReference,{includedComponents:string[];excludedComponents:string[];justificationForExclusion:string;includedFailureModes:string[];excludedFailureModes:string[];justificationForFailureModeExclusion:string;}>",
                    "description": "Documentation of components and failure modes included/excluded."
                },
                "dependencySearchDocumentation": {
                    "description": "Documentation of system dependencies and search methodology.",
                    "properties": {
                        "dependencyTableReferences": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "methodology": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "dependencyTableReferences",
                        "methodology"
                    ],
                    "type": "object"
                },
                "designInformation": {
                    "description": "Design information sources used in the analysis",
                    "items": {
                        "$ref": "#/definitions/BaseDesignInformation"
                    },
                    "type": "array"
                },
                "digitalICDocumentation": {
                    "$ref": "#/definitions/Record<SystemReference,{description:string;modelingApproach:string;specialConsiderations?:string|undefined;}>",
                    "description": "Documentation of digital I&C systems."
                },
                "equipmentOperabilityDocumentation": {
                    "$ref": "#/definitions/Record<string,{system:SystemReference;component:string;considerations:string;calculationReferences?:string[]|undefined;}>",
                    "description": "Documentation of equipment operability considerations."
                },
                "evaluationResultsDocumentation": {
                    "$ref": "#/definitions/Record<SystemReference,{topEventProbability:number;otherResults:Record<string,string>;}>",
                    "description": "Documentation of system model evaluation results."
                },
                "humanActionsDocumentation": {
                    "$ref": "#/definitions/Record<HumanActionReference,{system:SystemReference;description:string;}>",
                    "description": "Documentation of human actions for system operation."
                },
                "informationSourcesDocumentation": {
                    "description": "Documentation of information sources.",
                    "properties": {
                        "drawings": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "interviews": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "otherSources": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "procedures": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "drawings",
                        "interviews",
                        "otherSources",
                        "procedures"
                    ],
                    "type": "object"
                },
                "inputsDescription": {
                    "description": "Description of inputs used in the analysis",
                    "type": "string"
                },
                "logicLoopResolutionsDocumentation": {
                    "$ref": "#/definitions/Record<string,{system:SystemReference;loopDescription:string;resolution:string;}>",
                    "description": "Documentation of logic loop resolutions."
                },
                "methodsDescription": {
                    "description": "Description of methods applied in the analysis",
                    "type": "string"
                },
                "modelingAssumptionsDocumentation": {
                    "$ref": "#/definitions/Record<SystemReference,string[]>",
                    "description": "Documentation of modeling assumptions."
                },
                "modularizationDocumentation": {
                    "description": "Documentation of modularization process.",
                    "properties": {
                        "description": {
                            "type": "string"
                        },
                        "systems": {
                            "items": {
                                "$ref": "#/definitions/SystemReference"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "description",
                        "systems"
                    ],
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "nomenclatureDocumentation": {
                    "$ref": "#/definitions/Record<string,string>",
                    "description": "Documentation of nomenclature used in system models."
                },
                "operationalHistoryDocumentation": {
                    "$ref": "#/definitions/Record<SystemReference,string[]>",
                    "description": "Documentation of operational history."
                },
                "passiveSystemsDocumentation": {
                    "$ref": "#/definitions/Record<SystemReference,{description:string;uncertaintyEvaluation:string;}>",
                    "description": "Documentation of passive systems."
                },
                "processDescription": {
                    "description": "Description of the overall process used",
                    "type": "string"
                },
                "requirementReferences": {
                    "description": "Traceability to requirements",
                    "items": {
                        "properties": {
                            "implementation": {
                                "description": "How the requirement is addressed",
                                "type": "string"
                            },
                            "requirementId": {
                                "description": "Requirement identifier",
                                "type": "string"
                            }
                        },
                        "required": [
                            "implementation",
                            "requirementId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "resultsDescription": {
                    "description": "Description of the results of the analysis",
                    "type": "string"
                },
                "sensitivityStudiesDocumentation": {
                    "$ref": "#/definitions/Record<SystemReference,{studyDescription:string;results:string;}[]>",
                    "description": "Documentation of sensitivity studies results."
                },
                "spatialInformationDocumentation": {
                    "$ref": "#/definitions/Record<string,{location:string;systems:SystemReference[];components:string[];hazards:string[];}>",
                    "description": "Documentation of spatial information and hazards."
                },
                "successCriteriaDocumentation": {
                    "$ref": "#/definitions/Record<SystemReference,{criteria:string;relationshipToEventSequences:string;}>",
                    "description": "Documentation of success criteria relationship to event sequences."
                },
                "supportingDocumentationReferences": {
                    "description": "References to supporting documentation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "systemBoundaryDocumentation": {
                    "$ref": "#/definitions/Record<SystemReference,string>",
                    "description": "Documentation of system boundaries."
                },
                "systemFunctionDocumentation": {
                    "$ref": "#/definitions/Record<SystemReference,string>",
                    "description": "Documentation of system functions and operations."
                },
                "systemSchematicReferences": {
                    "$ref": "#/definitions/Record<SystemReference,{reference:string;description:string;}>",
                    "description": "Documentation of system schematics."
                },
                "testMaintenanceProceduresDocumentation": {
                    "$ref": "#/definitions/Record<SystemReference,string[]>",
                    "description": "Documentation of test and maintenance procedures."
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "name",
                "processDescription",
                "uuid"
            ],
            "type": "object"
        },
        "ProcessDocumentation_2": {
            "description": "Interface representing documentation of the process used in the event sequence analysis.",
            "properties": {
                "barrierTreatmentBasis": {
                    "description": "Technical basis for the treatment of radionuclide transport barriers",
                    "items": {
                        "properties": {
                            "barrierCapacitiesCredited": {
                                "description": "Barrier capacities credited",
                                "type": "string"
                            },
                            "barrierId": {
                                "description": "Barrier ID or name",
                                "type": "string"
                            },
                            "endStateAssignmentBasis": {
                                "description": "Basis for assignment of end states",
                                "type": "string"
                            },
                            "eventSequenceFamilyId": {
                                "$ref": "#/definitions/EventSequenceFamilyReference",
                                "description": "Event sequence family"
                            },
                            "fuelCapabilitiesCredited": {
                                "description": "Fuel capabilities credited",
                                "type": "string"
                            },
                            "structuralCapabilitiesCredited": {
                                "description": "Structural capabilities credited",
                                "type": "string"
                            }
                        },
                        "required": [
                            "barrierCapacitiesCredited",
                            "barrierId",
                            "endStateAssignmentBasis",
                            "eventSequenceFamilyId",
                            "fuelCapabilitiesCredited",
                            "structuralCapabilitiesCredited"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "designInformation": {
                    "description": "Design information sources used in the analysis",
                    "items": {
                        "$ref": "#/definitions/BaseDesignInformation"
                    },
                    "type": "array"
                },
                "deterministicAnalyses": {
                    "description": "Deterministic analyses performed to support the event sequence analysis",
                    "items": {
                        "properties": {
                            "analysisId": {
                                "description": "Analysis ID or reference",
                                "type": "string"
                            },
                            "applicationInEventSequences": {
                                "description": "How the analysis was used in event sequence development",
                                "type": "string"
                            },
                            "description": {
                                "description": "Description of the analysis",
                                "type": "string"
                            },
                            "purpose": {
                                "description": "Purpose of the analysis",
                                "type": "string"
                            },
                            "results": {
                                "description": "Key results and insights",
                                "type": "string"
                            }
                        },
                        "required": [
                            "analysisId",
                            "applicationInEventSequences",
                            "description",
                            "purpose",
                            "results"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "endStateAndFamilyDefinitions": {
                    "description": "Definition of event sequence end states, families, and release categories",
                    "items": {
                        "properties": {
                            "definition": {
                                "description": "Definition of the end state or family",
                                "type": "string"
                            },
                            "familyDeterminationDetail": {
                                "description": "Detail provided for determining event sequence family",
                                "type": "string"
                            },
                            "id": {
                                "description": "End state or family ID",
                                "type": "string"
                            },
                            "mechanisticSourceTermId": {
                                "$ref": "#/definitions/SourceTermReference",
                                "description": "Mechanistic source term information"
                            },
                            "releaseCategoryId": {
                                "$ref": "#/definitions/ReleaseCategoryReference",
                                "description": "Release category identification"
                            }
                        },
                        "required": [
                            "definition",
                            "familyDeterminationDetail",
                            "id"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "eventSequenceDescriptions": {
                    "description": "Description of event sequences or groups of similar sequences",
                    "items": {
                        "properties": {
                            "dependencies": {
                                "description": "Dependencies between systems and operator actions",
                                "type": "string"
                            },
                            "endStates": {
                                "description": "End states",
                                "type": "string"
                            },
                            "environmentalImpacts": {
                                "description": "Expected environmental or phenomenological impacts",
                                "type": "string"
                            },
                            "otherPertinentInformation": {
                                "description": "Other pertinent information",
                                "type": "string"
                            },
                            "proceduralGuidance": {
                                "description": "Applicable procedural guidance",
                                "type": "string"
                            },
                            "sequenceOrFamilyId": {
                                "description": "Event sequence or family ID",
                                "type": "string"
                            },
                            "timing": {
                                "description": "Sequence timing information",
                                "type": "string"
                            },
                            "uncertaintyEvaluation": {
                                "description": "Evaluation of uncertainties",
                                "type": "string"
                            }
                        },
                        "required": [
                            "dependencies",
                            "endStates",
                            "environmentalImpacts",
                            "proceduralGuidance",
                            "sequenceOrFamilyId",
                            "timing"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "failureModeEvaluation": {
                    "description": "Evaluation of failure modes and degradation mechanisms",
                    "items": {
                        "properties": {
                            "barrierId": {
                                "description": "Barrier or system ID",
                                "type": "string"
                            },
                            "degradationMechanisms": {
                                "description": "Degradation mechanisms considered",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "failureModes": {
                                "description": "Failure modes evaluated",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "loadCapabilityAssessment": {
                                "description": "Assessment of capability to withstand loads",
                                "type": "string"
                            },
                            "loadingConditions": {
                                "description": "Loading conditions evaluated",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "uncertaintyImpacts": {
                                "description": "Impacts of modeling uncertainties",
                                "type": "string"
                            }
                        },
                        "required": [
                            "barrierId",
                            "degradationMechanisms",
                            "failureModes",
                            "loadCapabilityAssessment",
                            "loadingConditions",
                            "uncertaintyImpacts"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "inputsDescription": {
                    "description": "Description of inputs used in the analysis",
                    "type": "string"
                },
                "methodologyDetails": {
                    "description": "Methodology details for the event sequence analysis",
                    "properties": {
                        "approachDescription": {
                            "type": "string"
                        },
                        "conformanceToStandards": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "modelingTechniques": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "toolsUsed": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "validationApproach": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "approachDescription",
                        "modelingTechniques",
                        "toolsUsed",
                        "validationApproach"
                    ],
                    "type": "object"
                },
                "methodsDescription": {
                    "description": "Description of methods applied in the analysis",
                    "type": "string"
                },
                "mitigatingSystemChallenges": {
                    "description": "Mitigating systems challenged by initiating events",
                    "items": {
                        "properties": {
                            "challengedSystems": {
                                "$ref": "#/definitions/Record<SystemReference,string>_1",
                                "description": "Challenged systems"
                            },
                            "initiatingEventId": {
                                "description": "Initiating event ID",
                                "type": "string"
                            },
                            "systemImpact": {
                                "description": "Impact on the system",
                                "type": "string"
                            }
                        },
                        "required": [
                            "challengedSystems",
                            "initiatingEventId",
                            "systemImpact"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "mitigatingSystemDependencies": {
                    "description": "Dependence of mitigating systems on other functions",
                    "items": {
                        "properties": {
                            "dependencyDescription": {
                                "description": "Description of dependencies",
                                "type": "string"
                            },
                            "humanActionDependencies": {
                                "description": "Dependencies on human actions",
                                "items": {
                                    "$ref": "#/definitions/HumanActionReference_1"
                                },
                                "type": "array"
                            },
                            "mitigatingSystemId": {
                                "$ref": "#/definitions/SystemReference_1",
                                "description": "Mitigating system ID"
                            },
                            "systemDependencies": {
                                "description": "Dependencies on other systems",
                                "items": {
                                    "$ref": "#/definitions/SystemReference_1"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "dependencyDescription",
                            "humanActionDependencies",
                            "mitigatingSystemId",
                            "systemDependencies"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "operatorActionsRepresentation": {
                    "description": "Operator actions represented in the event trees",
                    "items": {
                        "properties": {
                            "hraDependencies": {
                                "description": "Dependencies traceable to human reliability analysis",
                                "type": "string"
                            },
                            "humanActionId": {
                                "$ref": "#/definitions/HumanActionReference_1",
                                "description": "Human action ID"
                            },
                            "timing": {
                                "description": "Sequence-specific timing",
                                "type": "string"
                            }
                        },
                        "required": [
                            "hraDependencies",
                            "humanActionId",
                            "timing"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "posInitiatorSequenceLinkage": {
                    "description": "Linkage between plant operating states, initiating events, and event sequences",
                    "items": {
                        "properties": {
                            "description": {
                                "description": "Description of the linkage",
                                "type": "string"
                            },
                            "eventSequenceIds": {
                                "description": "Event sequence IDs for this combination",
                                "items": {
                                    "$ref": "#/definitions/EventSequenceReference"
                                },
                                "type": "array"
                            },
                            "initiatingEventId": {
                                "description": "Initiating event ID",
                                "type": "string"
                            },
                            "plantOperatingStateId": {
                                "description": "Plant operating state ID",
                                "type": "string"
                            }
                        },
                        "required": [
                            "eventSequenceIds",
                            "initiatingEventId",
                            "plantOperatingStateId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "processDescription": {
                    "description": "Description of the overall process used",
                    "type": "string"
                },
                "releaseInterfaceDescription": {
                    "description": "Interface of event sequence models with release categories",
                    "properties": {
                        "description": {
                            "description": "Description of the interface",
                            "type": "string"
                        },
                        "mappingApproach": {
                            "description": "How event sequences map to release categories",
                            "type": "string"
                        },
                        "sourceTermAssignment": {
                            "description": "How mechanistic source terms are assigned",
                            "type": "string"
                        }
                    },
                    "required": [
                        "description",
                        "mappingApproach",
                        "sourceTermAssignment"
                    ],
                    "type": "object"
                },
                "requirementReferences": {
                    "description": "Traceability to requirements",
                    "items": {
                        "properties": {
                            "implementation": {
                                "description": "How the requirement is addressed",
                                "type": "string"
                            },
                            "requirementId": {
                                "description": "Requirement identifier",
                                "type": "string"
                            }
                        },
                        "required": [
                            "implementation",
                            "requirementId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "resultsDescription": {
                    "description": "Description of the results of the analysis",
                    "type": "string"
                },
                "singleTopEventApproach": {
                    "description": "Use of single top event fault tree approach",
                    "properties": {
                        "approachDescription": {
                            "description": "Description of the approach",
                            "type": "string"
                        },
                        "requirementsSatisfactionDescription": {
                            "description": "How requirements are satisfied",
                            "type": "string"
                        },
                        "useSingleTopEvent": {
                            "description": "Whether a single top event fault tree is used",
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "useSingleTopEvent"
                    ],
                    "type": "object"
                },
                "successCriteriaBases": {
                    "description": "Success criteria established for each modeled initiating event",
                    "items": {
                        "properties": {
                            "basis": {
                                "description": "Basis for the success criteria",
                                "type": "string"
                            },
                            "initiatingEventId": {
                                "description": "Initiating event ID",
                                "type": "string"
                            },
                            "requiredComponents": {
                                "description": "Components required to achieve these capacities",
                                "type": "string"
                            },
                            "successCriteriaId": {
                                "$ref": "#/definitions/SuccessCriteriaId",
                                "description": "Success criteria ID"
                            },
                            "systemCapacitiesRequired": {
                                "description": "System capacities required",
                                "type": "string"
                            }
                        },
                        "required": [
                            "basis",
                            "initiatingEventId",
                            "requiredComponents",
                            "successCriteriaId",
                            "systemCapacitiesRequired"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "supportingDocumentationReferences": {
                    "description": "References to supporting documentation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "name",
                "processDescription",
                "uuid"
            ],
            "type": "object"
        },
        "ProtectiveActionAnalysis": {
            "description": "Represents the analysis of protective actions and other site data.",
            "properties": {
                "boundingWarningTimeAssumption": {
                    "description": "Bounding assumptions for protective action warning time.\nRequired by **RCRE-A2(e)**.",
                    "type": "string"
                },
                "emergencyResponseTimingBases": {
                    "description": "Bases for emergency response timing assumptions.\nRequired by **RCPA-A4**.",
                    "type": "string"
                },
                "landUseCharacteristics": {
                    "description": "Description of the land use characteristics around the site.\nRequired by **RCPA-A3**.",
                    "type": "string"
                },
                "populationDistribution": {
                    "description": "Description of the population distribution around the site.\nRequired by **RCPA-A2**.",
                    "type": "string"
                },
                "populationDistributionJustification": {
                    "description": "Justification for population distribution assumptions as bounding for the analysis.\nRequired by **RCPA-B1**.",
                    "type": "string"
                },
                "protectiveActionImpactingHazards": {
                    "description": "Hazards that could impact the implementation of protective actions.\nRequired by **RCRE-A2(e)**.",
                    "type": "string"
                },
                "protectiveActionParameters": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Protective action parameters used in the analysis.\nRequired by **RCPA-A1**.",
                    "properties": {
                        "evacuationDelay": {
                            "type": "string"
                        },
                        "evacuationSpeed": {
                            "type": "string"
                        },
                        "shelteringEffectiveness": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "protectiveActionUncertainty": {
                    "description": "Sources of model uncertainty, related assumptions, and reasonable alternatives for protective actions.\nRequired by **RCPA-A5**.",
                    "properties": {
                        "alternatives": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "assumptions": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "sources": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "alternatives",
                        "assumptions",
                        "sources"
                    ],
                    "type": "object"
                },
                "riskIntegrationFeedback": {
                    "description": "Feedback from risk integration related to protective actions.\nThis field contains feedback from risk integration that should be considered\nin future revisions of the protective action analysis.",
                    "properties": {
                        "analysisId": {
                            "description": "ID of the risk integration analysis that provided the feedback",
                            "type": "string"
                        },
                        "feedbackDate": {
                            "description": "Date the feedback was received",
                            "type": "string"
                        },
                        "generalFeedback": {
                            "description": "General feedback on the protective action analysis",
                            "type": "string"
                        },
                        "parameterFeedback": {
                            "description": "Feedback on specific protective action parameters",
                            "items": {
                                "properties": {
                                    "insights": {
                                        "description": "Insights from risk integration",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "parameter": {
                                        "description": "Parameter name",
                                        "type": "string"
                                    },
                                    "recommendations": {
                                        "description": "Recommendations for improving the parameter",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "riskSignificance": {
                                        "description": "Risk significance level determined by risk integration",
                                        "enum": [
                                            "HIGH",
                                            "LOW",
                                            "MEDIUM"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "parameter"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "response": {
                            "description": "Response to the feedback",
                            "properties": {
                                "changes": {
                                    "description": "Changes made or planned in response to the feedback",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "description": {
                                    "description": "Description of how the feedback was or will be addressed",
                                    "type": "string"
                                },
                                "status": {
                                    "description": "Status of the response",
                                    "enum": [
                                        "COMPLETED",
                                        "IN_PROGRESS",
                                        "PENDING"
                                    ],
                                    "type": "string"
                                }
                            },
                            "required": [
                                "description",
                                "status"
                            ],
                            "type": "object"
                        }
                    },
                    "required": [
                        "analysisId"
                    ],
                    "type": "object"
                },
                "riskMetricImpact": {
                    "description": "Impact of protective actions on risk metrics.\nThis field describes how protective actions affect the risk metrics used in risk integration.",
                    "items": {
                        "properties": {
                            "impactDescription": {
                                "description": "Description of how protective actions impact this risk metric",
                                "type": "string"
                            },
                            "quantitativeAssessment": {
                                "description": "Quantitative assessment of the impact, if available",
                                "type": "string"
                            },
                            "riskMetric": {
                                "description": "Risk metric affected by protective actions",
                                "type": "string"
                            },
                            "uncertaintyDescription": {
                                "description": "Uncertainty in the impact assessment",
                                "type": "string"
                            }
                        },
                        "required": [
                            "impactDescription",
                            "riskMetric"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "riskMetricSensitivity": {
                    "description": "Sensitivity of risk metrics to protective action parameters.\nThis field describes how sensitive risk metrics are to changes in protective action parameters.",
                    "items": {
                        "properties": {
                            "affectedRiskMetrics": {
                                "description": "Risk metrics affected by this parameter",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "importance": {
                                "description": "Importance level of this parameter to risk",
                                "enum": [
                                    "HIGH",
                                    "LOW",
                                    "MEDIUM"
                                ],
                                "type": "string"
                            },
                            "parameter": {
                                "description": "Protective action parameter",
                                "type": "string"
                            },
                            "sensitivityDescription": {
                                "description": "Description of the sensitivity",
                                "type": "string"
                            }
                        },
                        "required": [
                            "affectedRiskMetrics",
                            "parameter",
                            "sensitivityDescription"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "emergencyResponseTimingBases",
                "landUseCharacteristics",
                "populationDistribution",
                "protectiveActionParameters",
                "protectiveActionUncertainty"
            ],
            "type": "object"
        },
        "QuantificationApproach": {
            "description": "Enum representing the different approaches for quantifying event sequence frequencies",
            "enum": [
                "FAULT_TREE_LINKING",
                "EVENT_TREE_BOUNDARY_CONDITIONS",
                "BINARY_DECISION_DIAGRAM",
                "MARKOV_MODEL",
                "DISCRETE_EVENT_SIMULATION",
                "MONTE_CARLO_SIMULATION"
            ],
            "type": "string"
        },
        "QuantificationReviewProcess": {
            "description": "Review process for event sequence quantification",
            "properties": {
                "familyGroupingReview": {
                    "description": "Review of event sequence family grouping",
                    "properties": {
                        "groupingCriteria": {
                            "description": "Criteria used for grouping review",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "groupingIssues": {
                            "description": "Issues identified in grouping",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "groupingCriteria",
                        "groupingIssues"
                    ],
                    "type": "object"
                },
                "plantComparison": {
                    "description": "Comparison to similar plants (if available)",
                    "properties": {
                        "comparisonPlants": {
                            "description": "Plants used for comparison",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "differenceExplanation": {
                            "description": "Explanation of differences",
                            "type": "string"
                        },
                        "keyDifferences": {
                            "description": "Key differences identified",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "comparisonPlants",
                        "differenceExplanation",
                        "keyDifferences"
                    ],
                    "type": "object"
                },
                "reviewCriteria": {
                    "description": "Review criteria used to evaluate results",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "reviewFindings": {
                    "description": "Findings from the review process",
                    "items": {
                        "properties": {
                            "correctiveActions": {
                                "description": "Actions taken to address the finding",
                                "type": "string"
                            },
                            "description": {
                                "description": "Description of the finding",
                                "type": "string"
                            },
                            "id": {
                                "description": "Finding identifier",
                                "type": "string"
                            }
                        },
                        "required": [
                            "description",
                            "id"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "reviewCriteria",
                "reviewFindings"
            ],
            "type": "object"
        },
        "RadioactiveSource": {
            "description": "Interface for representing a radioactive source in the plant.\nThis covers both in-vessel (e.g., reactor core) and ex-vessel (e.g., spent fuel pool) sources.\nIncorporates SourceDefinition to reduce fragmentation.",
            "properties": {
                "barriers": {
                    "description": "Barriers in place to prevent release",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Detailed description of the source",
                    "type": "string"
                },
                "location": {
                    "description": "Location of the source - in-vessel or ex-vessel",
                    "enum": [
                        "EX_VESSEL",
                        "IN_VESSEL"
                    ],
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "radionuclides": {
                    "description": "List of significant radionuclides present in this source",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "releasePaths": {
                    "description": "Potential release pathways for this source",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "screeningStatus": {
                    "$ref": "#/definitions/ScreeningStatus",
                    "description": "Screening status of this source"
                },
                "sourceLocation": {
                    "description": "Source location type for screening purposes",
                    "enum": [
                        "IN_CORE_SOURCE",
                        "OUT_OF_CORE_SOURCE"
                    ],
                    "type": "string"
                },
                "status": {
                    "description": "Current status of the source",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "description",
                "location",
                "name",
                "radionuclides",
                "screeningStatus",
                "status",
                "uuid"
            ],
            "type": "object"
        },
        "RadiologicalConsequenceAnalysis": {
            "description": "Represents the technical element for 4.3.17 Radiological Consequence Analysis (RC).",
            "properties": {
                "atmosphericTransportAndDispersion": {
                    "$ref": "#/definitions/AtmosphericDispersionAnalysis",
                    "description": "**4.3.17.4 Atmospheric Transport and Dispersion (RCAD)**"
                },
                "commonAssumptions": {
                    "description": "Common assumptions that apply across this technical element\nUsing the standardized BaseAssumption interface",
                    "items": {
                        "$ref": "#/definitions/BaseAssumption"
                    },
                    "type": "array"
                },
                "consequenceQuantification": {
                    "$ref": "#/definitions/ConsequenceQuantificationAnalysis",
                    "description": "**4.3.17.8 Consequence Quantification (RCQ)**"
                },
                "created": {
                    "description": "The date the technical element was created",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the technical element",
                    "type": "string"
                },
                "documentation": {
                    "$ref": "#/definitions/RadiologicalConsequenceDocumentation",
                    "description": "Documentation of the Radiological Consequence Analysis process"
                },
                "dosimetry": {
                    "$ref": "#/definitions/DosimetryAnalysis",
                    "description": "**4.3.17.5 Dosimetry (RCDO)**"
                },
                "metadata": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/TechnicalElementMetadata"
                        },
                        {
                            "properties": {
                                "additionalMetadata": {
                                    "description": "Additional metadata specific to Radiological Consequence Analysis.",
                                    "properties": {
                                        "assumptions": {
                                            "description": "Radiological consequence analysis specific assumptions",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "limitations": {
                                            "description": "Radiological consequence analysis specific limitations",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "riskIntegrationReferences": {
                                            "description": "References to risk integration results that use this analysis.\nThis provides traceability between technical elements.",
                                            "items": {
                                                "properties": {
                                                    "analysisId": {
                                                        "description": "ID of the risk integration analysis",
                                                        "type": "string"
                                                    },
                                                    "date": {
                                                        "description": "Date the analysis was performed",
                                                        "type": "string"
                                                    },
                                                    "usageDescription": {
                                                        "description": "Description of how this analysis was used in risk integration",
                                                        "type": "string"
                                                    },
                                                    "version": {
                                                        "description": "Version or revision of the analysis",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "analysisId",
                                                    "usageDescription"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "traceability": {
                                            "description": "Traceability information",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "scopeDefinition": {
                                    "$ref": "#/definitions/RadiologicalConsequenceAnalysisScope",
                                    "description": "Scope of the radiological consequence analysis."
                                }
                            },
                            "required": [
                                "scopeDefinition"
                            ],
                            "type": "object"
                        }
                    ],
                    "description": "Metadata for the Radiological Consequence Analysis."
                },
                "meteorologicalData": {
                    "$ref": "#/definitions/MeteorologicalDataAnalysis",
                    "description": "**4.3.17.3 Meteorological Data (RCME)**"
                },
                "modified": {
                    "description": "The date the technical element was last modified",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "description": "The owner of the technical element",
                    "type": "string"
                },
                "protectiveActionParameters": {
                    "$ref": "#/definitions/ProtectiveActionAnalysis",
                    "description": "**4.3.17.2 Protective Action Parameters and Other Site Data Analysis (RCPA)**"
                },
                "references": {
                    "description": "References to other technical elements",
                    "items": {
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "technicalElementId": {
                                "type": "string"
                            },
                            "technicalElementType": {
                                "$ref": "#/definitions/TechnicalElementTypes"
                            }
                        },
                        "required": [
                            "description",
                            "technicalElementId",
                            "technicalElementType"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "releaseCategoryToConsequence": {
                    "$ref": "#/definitions/ReleaseCategoryToConsequenceAnalysis",
                    "description": "**4.3.17.1 Release Category to Radiological Consequence (RCRE)**"
                },
                "riskIntegrationDescription": {
                    "description": "Documentation of the integration with risk integration.\nDescribes how this analysis is used in risk integration and how feedback is incorporated.",
                    "properties": {
                        "consequenceMetricUsage": {
                            "description": "How consequence metrics are used in risk integration",
                            "type": "string"
                        },
                        "feedbackIncorporation": {
                            "description": "How feedback from risk integration is incorporated",
                            "type": "string"
                        },
                        "integrationChallenges": {
                            "description": "Challenges in integrating with risk integration",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "keyInsights": {
                            "description": "Key insights about consequences derived from risk integration",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "supportDescription": {
                            "description": "Description of how this analysis supports risk integration",
                            "type": "string"
                        },
                        "uncertaintyPropagation": {
                            "description": "How uncertainties are propagated to risk integration",
                            "type": "string"
                        }
                    },
                    "required": [
                        "consequenceMetricUsage",
                        "supportDescription"
                    ],
                    "type": "object"
                },
                "status": {
                    "description": "The status of the technical element",
                    "enum": [
                        "APPROVED",
                        "DEPRECATED",
                        "DRAFT",
                        "REVIEW"
                    ],
                    "type": "string"
                },
                "tags": {
                    "description": "Tags associated with the technical element",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "technical-element-code": {
                    "const": "RC",
                    "type": "string"
                },
                "technical-element-type": {
                    "const": "consequence-analysis",
                    "type": "string"
                },
                "type": {
                    "const": "consequence-analysis",
                    "description": "The type of technical element",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "version": {
                    "description": "The version of the technical element",
                    "type": "string"
                }
            },
            "required": [
                "atmosphericTransportAndDispersion",
                "consequenceQuantification",
                "created",
                "dosimetry",
                "metadata",
                "meteorologicalData",
                "modified",
                "name",
                "protectiveActionParameters",
                "releaseCategoryToConsequence",
                "technical-element-code",
                "technical-element-type",
                "type",
                "uuid",
                "version"
            ],
            "type": "object"
        },
        "RadiologicalConsequenceAnalysisScope": {
            "description": "Defines the scope of the Radiological Consequence Analysis.",
            "properties": {
                "atmosphericDispersionModellingDegree": {
                    "description": "Degree to which atmospheric transport and dispersion are modelled.",
                    "type": "string"
                },
                "boundingSite": {
                    "$ref": "#/definitions/BoundingSite",
                    "description": "Description and justification of the bounding site used, if applicable."
                },
                "consequenceMetrics": {
                    "description": "Consequence measure(s) selected for the intended application of the PRA.\nReferences to metrics defined in Risk Integration.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "dosimetryModellingDegree": {
                    "description": "Degree to which dosimetry is modelled.",
                    "type": "string"
                },
                "economicFactorsModellingDegree": {
                    "description": "Degree to which economic factors are modelled.",
                    "type": "string"
                },
                "healthEffectsModellingDegree": {
                    "description": "Degree to which health effects are modelled.",
                    "type": "string"
                },
                "isSpecificSite": {
                    "description": "Indicates whether a specific site is being analysed.\nIf false, a bounding site is assumed.",
                    "type": "boolean"
                },
                "meteorologyModellingDegree": {
                    "description": "Degree to which meteorology is modelled.",
                    "type": "string"
                },
                "protectiveActionsModellingDegree": {
                    "description": "Degree to which protective actions are modelled.",
                    "type": "string"
                },
                "siteReference": {
                    "$ref": "#/definitions/SiteReference",
                    "description": "Reference to the specific site being analysed, if applicable."
                }
            },
            "required": [
                "atmosphericDispersionModellingDegree",
                "consequenceMetrics",
                "dosimetryModellingDegree",
                "economicFactorsModellingDegree",
                "healthEffectsModellingDegree",
                "isSpecificSite",
                "meteorologyModellingDegree",
                "protectiveActionsModellingDegree"
            ],
            "type": "object"
        },
        "RadiologicalConsequenceDocumentation": {
            "description": "Documentation of the Radiological Consequence Analysis process.",
            "properties": {
                "appliedMethods": {
                    "description": "Methods applied in the analysis.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "assumptions": {
                    "description": "Specific assumptions made in the radiological consequence analysis",
                    "items": {
                        "$ref": "#/definitions/BaseAssumption"
                    },
                    "type": "array"
                },
                "designInformation": {
                    "description": "Design information sources used in the analysis",
                    "items": {
                        "$ref": "#/definitions/BaseDesignInformation"
                    },
                    "type": "array"
                },
                "inputSources": {
                    "description": "Input sources used in the analysis.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "inputsDescription": {
                    "description": "Description of inputs used in the analysis",
                    "type": "string"
                },
                "methodsDescription": {
                    "description": "Description of methods applied in the analysis",
                    "type": "string"
                },
                "modelUncertaintyDocumentation": {
                    "$ref": "#/definitions/BaseModelUncertaintyDocumentation",
                    "description": "Model uncertainty documentation"
                },
                "name": {
                    "type": "string"
                },
                "peerReview": {
                    "$ref": "#/definitions/BasePeerReviewDocumentation",
                    "description": "Peer review documentation."
                },
                "processDescription": {
                    "description": "Description of the overall process used",
                    "type": "string"
                },
                "requirementReferences": {
                    "description": "Traceability to requirements",
                    "items": {
                        "properties": {
                            "implementation": {
                                "description": "How the requirement is addressed",
                                "type": "string"
                            },
                            "requirementId": {
                                "description": "Requirement identifier",
                                "type": "string"
                            }
                        },
                        "required": [
                            "implementation",
                            "requirementId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "requirementTraceability": {
                    "description": "Traceability to requirements in standards and regulations",
                    "items": {
                        "properties": {
                            "implementation": {
                                "description": "How the requirement is addressed",
                                "type": "string"
                            },
                            "requirementId": {
                                "description": "Requirement identifier",
                                "type": "string"
                            },
                            "standardReference": {
                                "description": "Standard or regulation reference",
                                "type": "string"
                            }
                        },
                        "required": [
                            "implementation",
                            "requirementId",
                            "standardReference"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "resultsDescription": {
                    "description": "Description of the results of the analysis",
                    "type": "string"
                },
                "resultsSummary": {
                    "description": "Summary of analysis results.",
                    "type": "string"
                },
                "riskIntegrationDocumentation": {
                    "description": "Documentation of the integration with risk integration.\nDescribes how this analysis is used in risk integration and how feedback is incorporated.",
                    "properties": {
                        "consequenceMetricUsage": {
                            "description": "How consequence metrics are used in risk integration",
                            "items": {
                                "properties": {
                                    "correspondingRiskMetric": {
                                        "description": "Corresponding risk metric in risk integration",
                                        "enum": [
                                            "CDF",
                                            "DOSE",
                                            "ECONOMIC",
                                            "HEALTH_EFFECTS",
                                            "LAND_CONTAMINATION",
                                            "LERF",
                                            "LRF",
                                            "OTHER",
                                            "SRF"
                                        ],
                                        "type": "string"
                                    },
                                    "metricName": {
                                        "description": "Consequence metric name",
                                        "type": "string"
                                    },
                                    "usageDescription": {
                                        "description": "Description of how the metric is used",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "metricName",
                                    "usageDescription"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "feedbackIncorporation": {
                            "description": "How feedback was incorporated",
                            "items": {
                                "properties": {
                                    "date": {
                                        "description": "Date of incorporation",
                                        "type": "string"
                                    },
                                    "feedbackReference": {
                                        "description": "Reference to the feedback",
                                        "type": "string"
                                    },
                                    "incorporationDescription": {
                                        "description": "Description of how feedback was incorporated",
                                        "type": "string"
                                    },
                                    "status": {
                                        "description": "Status of incorporation",
                                        "enum": [
                                            "COMPLETED",
                                            "IN_PROGRESS",
                                            "PENDING"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "feedbackReference",
                                    "incorporationDescription",
                                    "status"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "feedbackReceived": {
                            "description": "Feedback received from risk integration",
                            "items": {
                                "properties": {
                                    "date": {
                                        "description": "Date feedback was received",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "Description of the feedback",
                                        "type": "string"
                                    },
                                    "significance": {
                                        "$ref": "#/definitions/ImportanceLevel",
                                        "description": "Significance of the feedback"
                                    },
                                    "source": {
                                        "description": "Source of the feedback",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "description",
                                    "significance",
                                    "source"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "inconsistencyResolution": {
                            "description": "How inconsistencies were resolved",
                            "type": "string"
                        },
                        "integrationChallenges": {
                            "description": "Challenges encountered during integration",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "integrationProcessDescription": {
                            "description": "Description of the integration process",
                            "type": "string"
                        },
                        "keyInsights": {
                            "description": "Key insights about consequences derived from risk integration",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "riskIntegrationReferences": {
                            "description": "References to risk integration analyses that use this consequence analysis",
                            "items": {
                                "properties": {
                                    "analysisId": {
                                        "description": "ID of the risk integration analysis",
                                        "type": "string"
                                    },
                                    "date": {
                                        "description": "Date of the analysis",
                                        "type": "string"
                                    },
                                    "usageDescription": {
                                        "description": "Description of how this analysis was used",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "Version of the analysis",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "analysisId",
                                    "usageDescription"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "uncertaintyPropagation": {
                            "description": "How uncertainties are propagated to risk integration",
                            "type": "string"
                        }
                    },
                    "required": [
                        "consequenceMetricUsage",
                        "integrationProcessDescription"
                    ],
                    "type": "object"
                },
                "sensitivityStudies": {
                    "description": "Sensitivity studies conducted.\nUses the standardized SensitivityStudy interface from shared-patterns.",
                    "items": {
                        "$ref": "#/definitions/SensitivityStudy"
                    },
                    "type": "array"
                },
                "supportingDocumentationReferences": {
                    "description": "References to supporting documentation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uncertaintiesAndAssumptions": {
                    "description": "Documentation of uncertainties and assumptions.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "appliedMethods",
                "inputSources",
                "name",
                "processDescription",
                "resultsSummary",
                "uncertaintiesAndAssumptions",
                "uuid"
            ],
            "type": "object"
        },
        "Radionuclide": {
            "description": "Represents a specific radionuclide isotope.",
            "type": "string"
        },
        "RadionuclideBarrier": {
            "description": "Describes a barrier preventing radionuclide release",
            "properties": {
                "breachCriteria": {
                    "description": "Criteria that would indicate a breach of this barrier",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the barrier",
                    "type": "string"
                },
                "monitoringParameters": {
                    "description": "Parameters being monitored for this barrier",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "state": {
                    "$ref": "#/definitions/BarrierStatus",
                    "description": "Current status of the barrier"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "name",
                "state",
                "uuid"
            ],
            "type": "object"
        },
        "RadionuclideBarrierTreatment": {
            "description": "Treatment of radionuclide transport barriers in event sequence quantification",
            "properties": {
                "barrierCapabilityEvaluation": {
                    "$ref": "#/definitions/Record<string,{conditions:string;capability:string;failureProbability?:number|undefined;}[]>",
                    "description": "Evaluation of barrier capabilities under different conditions"
                },
                "barrierCapacityBasis": {
                    "description": "Basis for barrier capacity analysis",
                    "type": "string"
                },
                "barrierChallengesTreatment": {
                    "description": "Treatment of barrier challenges",
                    "type": "string"
                },
                "barrierFailureModes": {
                    "$ref": "#/definitions/Record<string,string[]>",
                    "description": "Failure modes for each barrier"
                },
                "barrierFailureProbabilities": {
                    "$ref": "#/definitions/Record<string,Record<string,number>>",
                    "description": "Failure probabilities for each barrier and failure mode"
                },
                "barrierIntegrationMethod": {
                    "$ref": "#/definitions/Record<string,string>",
                    "description": "Integration method for each barrier"
                },
                "barrierPhenomena": {
                    "$ref": "#/definitions/Record<string,string[]>",
                    "description": "Phenomena affecting each barrier"
                },
                "barriersConsidered": {
                    "description": "Barriers considered",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "calculationMethod": {
                    "description": "Method used to calculate barrier failure probabilities",
                    "type": "string"
                }
            },
            "required": [
                "barrierCapabilityEvaluation",
                "barrierCapacityBasis",
                "barrierChallengesTreatment",
                "barrierFailureModes",
                "barrierFailureProbabilities",
                "barrierIntegrationMethod",
                "barrierPhenomena",
                "barriersConsidered",
                "calculationMethod"
            ],
            "type": "object"
        },
        "RadionuclideReleaseQuantity": {
            "description": "Represents the quantity of a specific radionuclide released during a phase.",
            "properties": {
                "quantity": {
                    "description": "Quantity released (can be a value or a fraction of inventory)",
                    "type": "number"
                },
                "radionuclide": {
                    "description": "Radionuclide isotope",
                    "type": "string"
                },
                "uncertainty": {
                    "$ref": "#/definitions/RadionuclideReleaseUncertainty",
                    "description": "Uncertainty in the release quantity, if known"
                },
                "unit": {
                    "description": "Unit of quantity (e.g., \"Bq\", \"Ci\", or \"fraction\")",
                    "type": "string"
                }
            },
            "required": [
                "quantity",
                "radionuclide",
                "unit"
            ],
            "type": "object"
        },
        "RadionuclideReleaseUncertainty": {
            "description": "Represents the uncertainty associated with a radionuclide release quantity.",
            "properties": {
                "description": {
                    "description": "Description of the uncertainty",
                    "type": "string"
                },
                "distributionType": {
                    "$ref": "#/definitions/DistributionType",
                    "description": "Type of distribution (e.g., lognormal, uniform)"
                },
                "parameters": {
                    "$ref": "#/definitions/Record<string,number>",
                    "description": "Parameters of the distribution"
                }
            },
            "required": [
                "distributionType",
                "parameters"
            ],
            "type": "object"
        },
        "RadionuclideTransportBarrier": {
            "description": "Represents a barrier to radionuclide transport from a mechanistic source term perspective.\nThis interface focuses on the transport characteristics and effectiveness of barriers,\nwhile referencing operational status information from the Plant Operating States module.",
            "properties": {
                "affectedRadionuclides": {
                    "description": "Radionuclides primarily affected by this barrier",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "barrierReference": {
                    "description": "Reference to a barrier defined in Plant Operating States Analysis.\nThis UUID links to a RadionuclideBarrier in the Plant Operating States module,\nallowing reuse of operational status information while maintaining separation of concerns.",
                    "type": "string"
                },
                "barrierType": {
                    "description": "Type of barrier (e.g., physical, chemical)",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the barrier",
                    "type": "string"
                },
                "effectiveness": {
                    "description": "Effectiveness of the barrier in retaining radionuclides",
                    "type": "string"
                },
                "failureConditions": {
                    "description": "Conditions under which the barrier may fail or degrade",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "physicalChemicalConditions": {
                    "description": "Physical and chemical conditions within the barrier that affect radionuclide transport.",
                    "properties": {
                        "chemicalEnvironment": {
                            "description": "Chemical environment (e.g., pH, oxidation state)",
                            "type": "string"
                        },
                        "flowRate": {
                            "description": "Flow rate or fluid dynamics information",
                            "type": "string"
                        },
                        "impactOnTransport": {
                            "description": "Impact assessment of these conditions on radionuclide transport",
                            "type": "string"
                        },
                        "pressure": {
                            "description": "Pressure conditions (e.g., range, gradients)",
                            "type": "string"
                        },
                        "temperature": {
                            "description": "Temperature conditions (e.g., range, gradients)",
                            "type": "string"
                        }
                    },
                    "required": [
                        "impactOnTransport"
                    ],
                    "type": "object"
                },
                "status": {
                    "description": "Current status of the barrier in this analysis context.\nReuses the BarrierStatus enum from Plant Operating States Analysis for consistency.",
                    "enum": [
                        "BREACHED",
                        "BYPASSED",
                        "DEGRADED",
                        "INTACT",
                        "OPEN"
                    ],
                    "type": "string"
                },
                "transportMechanisms": {
                    "description": "Transport mechanisms specific to this barrier.",
                    "items": {
                        "properties": {
                            "description": {
                                "description": "Description of the mechanism",
                                "type": "string"
                            },
                            "mechanismType": {
                                "$ref": "#/definitions/TransportPhenomenonType",
                                "description": "Type of transport mechanism"
                            },
                            "significance": {
                                "$ref": "#/definitions/ImportanceLevel",
                                "description": "Significance of this mechanism for this barrier"
                            }
                        },
                        "required": [
                            "description",
                            "mechanismType",
                            "significance"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "barrierType",
                "description",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "RadionuclideTransportBarriers": {
            "additionalProperties": {
                "$ref": "#/definitions/BarrierStatus"
            },
            "description": "Interface representing radionuclide transport barriers.",
            "properties": {
                "barrier1": {
                    "$ref": "#/definitions/BarrierStatus",
                    "description": "Status of barrier 1"
                },
                "barrier2": {
                    "$ref": "#/definitions/BarrierStatus",
                    "description": "Status of barrier 2"
                }
            },
            "required": [
                "barrier1",
                "barrier2"
            ],
            "type": "object"
        },
        "ReactorCoolantSystemParameters": {
            "description": "Interface representing reactor coolant system parameter ranges.\nPer RG 1.247, POS definitions should consider decay heat level, Reactor Coolant System (RCS) configuration, \nreactor level (for reactors with liquid coolant), reactor pressure and temperature,\nand other parameters needed to determine success criteria.",
            "properties": {
                "coolantPressureAtControlVolume1": {
                    "description": "Coolant pressure range at control volume 1 [min, max]",
                    "items": [
                        {
                            "allOf": [
                                {
                                    "properties": {
                                        "typia.tag": {
                                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                            "properties": {
                                                "exclusive": {
                                                    "items": [
                                                        {
                                                            "const": "minimum",
                                                            "type": "string"
                                                        },
                                                        {
                                                            "const": "exclusiveMinimum",
                                                            "type": "string"
                                                        }
                                                    ],
                                                    "maxItems": 2,
                                                    "minItems": 2,
                                                    "type": "array"
                                                },
                                                "kind": {
                                                    "const": "minimum",
                                                    "type": "string"
                                                },
                                                "schema": {
                                                    "properties": {
                                                        "minimum": {
                                                            "const": 0,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "minimum"
                                                    ],
                                                    "type": "object"
                                                },
                                                "target": {
                                                    "const": "number",
                                                    "type": "string"
                                                },
                                                "validate": {
                                                    "const": "0 <= $input",
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "const": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "exclusive",
                                                "kind",
                                                "schema",
                                                "target",
                                                "validate",
                                                "value"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        },
                        {
                            "allOf": [
                                {
                                    "properties": {
                                        "typia.tag": {
                                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                            "properties": {
                                                "exclusive": {
                                                    "items": [
                                                        {
                                                            "const": "maximum",
                                                            "type": "string"
                                                        },
                                                        {
                                                            "const": "exclusiveMaximum",
                                                            "type": "string"
                                                        }
                                                    ],
                                                    "maxItems": 2,
                                                    "minItems": 2,
                                                    "type": "array"
                                                },
                                                "kind": {
                                                    "const": "maximum",
                                                    "type": "string"
                                                },
                                                "schema": {
                                                    "properties": {
                                                        "maximum": {
                                                            "const": 1,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "maximum"
                                                    ],
                                                    "type": "object"
                                                },
                                                "target": {
                                                    "const": "number",
                                                    "type": "string"
                                                },
                                                "validate": {
                                                    "const": "$input <= 1",
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "const": 1,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "exclusive",
                                                "kind",
                                                "schema",
                                                "target",
                                                "validate",
                                                "value"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "decayHeatLevel": {
                    "description": "Decay heat level range [min, max] as fraction of rated power",
                    "items": [
                        {
                            "allOf": [
                                {
                                    "properties": {
                                        "typia.tag": {
                                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                            "properties": {
                                                "exclusive": {
                                                    "items": [
                                                        {
                                                            "const": "minimum",
                                                            "type": "string"
                                                        },
                                                        {
                                                            "const": "exclusiveMinimum",
                                                            "type": "string"
                                                        }
                                                    ],
                                                    "maxItems": 2,
                                                    "minItems": 2,
                                                    "type": "array"
                                                },
                                                "kind": {
                                                    "const": "minimum",
                                                    "type": "string"
                                                },
                                                "schema": {
                                                    "properties": {
                                                        "minimum": {
                                                            "const": 0,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "minimum"
                                                    ],
                                                    "type": "object"
                                                },
                                                "target": {
                                                    "const": "number",
                                                    "type": "string"
                                                },
                                                "validate": {
                                                    "const": "0 <= $input",
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "const": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "exclusive",
                                                "kind",
                                                "schema",
                                                "target",
                                                "validate",
                                                "value"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        },
                        {
                            "allOf": [
                                {
                                    "properties": {
                                        "typia.tag": {
                                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                            "properties": {
                                                "exclusive": {
                                                    "items": [
                                                        {
                                                            "const": "maximum",
                                                            "type": "string"
                                                        },
                                                        {
                                                            "const": "exclusiveMaximum",
                                                            "type": "string"
                                                        }
                                                    ],
                                                    "maxItems": 2,
                                                    "minItems": 2,
                                                    "type": "array"
                                                },
                                                "kind": {
                                                    "const": "maximum",
                                                    "type": "string"
                                                },
                                                "schema": {
                                                    "properties": {
                                                        "maximum": {
                                                            "const": 1,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "maximum"
                                                    ],
                                                    "type": "object"
                                                },
                                                "target": {
                                                    "const": "number",
                                                    "type": "string"
                                                },
                                                "validate": {
                                                    "const": "$input <= 1",
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "const": 1,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "exclusive",
                                                "kind",
                                                "schema",
                                                "target",
                                                "validate",
                                                "value"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "others": {
                    "description": "Other parameter ranges [min, max]",
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "powerLevel": {
                    "description": "Power level range [min, max] as fraction of rated power",
                    "items": [
                        {
                            "allOf": [
                                {
                                    "properties": {
                                        "typia.tag": {
                                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                            "properties": {
                                                "exclusive": {
                                                    "items": [
                                                        {
                                                            "const": "minimum",
                                                            "type": "string"
                                                        },
                                                        {
                                                            "const": "exclusiveMinimum",
                                                            "type": "string"
                                                        }
                                                    ],
                                                    "maxItems": 2,
                                                    "minItems": 2,
                                                    "type": "array"
                                                },
                                                "kind": {
                                                    "const": "minimum",
                                                    "type": "string"
                                                },
                                                "schema": {
                                                    "properties": {
                                                        "minimum": {
                                                            "const": 0,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "minimum"
                                                    ],
                                                    "type": "object"
                                                },
                                                "target": {
                                                    "const": "number",
                                                    "type": "string"
                                                },
                                                "validate": {
                                                    "const": "0 <= $input",
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "const": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "exclusive",
                                                "kind",
                                                "schema",
                                                "target",
                                                "validate",
                                                "value"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        },
                        {
                            "allOf": [
                                {
                                    "properties": {
                                        "typia.tag": {
                                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                            "properties": {
                                                "exclusive": {
                                                    "items": [
                                                        {
                                                            "const": "maximum",
                                                            "type": "string"
                                                        },
                                                        {
                                                            "const": "exclusiveMaximum",
                                                            "type": "string"
                                                        }
                                                    ],
                                                    "maxItems": 2,
                                                    "minItems": 2,
                                                    "type": "array"
                                                },
                                                "kind": {
                                                    "const": "maximum",
                                                    "type": "string"
                                                },
                                                "schema": {
                                                    "properties": {
                                                        "maximum": {
                                                            "const": 1,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "maximum"
                                                    ],
                                                    "type": "object"
                                                },
                                                "target": {
                                                    "const": "number",
                                                    "type": "string"
                                                },
                                                "validate": {
                                                    "const": "$input <= 1",
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "const": 1,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "exclusive",
                                                "kind",
                                                "schema",
                                                "target",
                                                "validate",
                                                "value"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "rcsConfigurationDescription": {
                    "description": "RCS configuration description\nPer RG 1.247, POS definitions should consider RCS configuration",
                    "type": "string"
                },
                "reactorCoolantTemperatureAtControlVolume1": {
                    "description": "Reactor coolant temperature range at control volume 1 [min, max]",
                    "items": [
                        {
                            "allOf": [
                                {
                                    "properties": {
                                        "typia.tag": {
                                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                            "properties": {
                                                "exclusive": {
                                                    "items": [
                                                        {
                                                            "const": "minimum",
                                                            "type": "string"
                                                        },
                                                        {
                                                            "const": "exclusiveMinimum",
                                                            "type": "string"
                                                        }
                                                    ],
                                                    "maxItems": 2,
                                                    "minItems": 2,
                                                    "type": "array"
                                                },
                                                "kind": {
                                                    "const": "minimum",
                                                    "type": "string"
                                                },
                                                "schema": {
                                                    "properties": {
                                                        "minimum": {
                                                            "const": 0,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "minimum"
                                                    ],
                                                    "type": "object"
                                                },
                                                "target": {
                                                    "const": "number",
                                                    "type": "string"
                                                },
                                                "validate": {
                                                    "const": "0 <= $input",
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "const": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "exclusive",
                                                "kind",
                                                "schema",
                                                "target",
                                                "validate",
                                                "value"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        },
                        {
                            "allOf": [
                                {
                                    "properties": {
                                        "typia.tag": {
                                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                            "properties": {
                                                "exclusive": {
                                                    "items": [
                                                        {
                                                            "const": "maximum",
                                                            "type": "string"
                                                        },
                                                        {
                                                            "const": "exclusiveMaximum",
                                                            "type": "string"
                                                        }
                                                    ],
                                                    "maxItems": 2,
                                                    "minItems": 2,
                                                    "type": "array"
                                                },
                                                "kind": {
                                                    "const": "maximum",
                                                    "type": "string"
                                                },
                                                "schema": {
                                                    "properties": {
                                                        "maximum": {
                                                            "const": 1,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "maximum"
                                                    ],
                                                    "type": "object"
                                                },
                                                "target": {
                                                    "const": "number",
                                                    "type": "string"
                                                },
                                                "validate": {
                                                    "const": "$input <= 1",
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "const": 1,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "exclusive",
                                                "kind",
                                                "schema",
                                                "target",
                                                "validate",
                                                "value"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "reactorLevel": {
                    "description": "For reactors with liquid coolant, reactor level range [min, max] \nPer RG 1.247, POS definitions should consider reactor level (for reactors with liquid coolant)",
                    "items": [
                        {
                            "allOf": [
                                {
                                    "properties": {
                                        "typia.tag": {
                                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                            "properties": {
                                                "exclusive": {
                                                    "items": [
                                                        {
                                                            "const": "minimum",
                                                            "type": "string"
                                                        },
                                                        {
                                                            "const": "exclusiveMinimum",
                                                            "type": "string"
                                                        }
                                                    ],
                                                    "maxItems": 2,
                                                    "minItems": 2,
                                                    "type": "array"
                                                },
                                                "kind": {
                                                    "const": "minimum",
                                                    "type": "string"
                                                },
                                                "schema": {
                                                    "properties": {
                                                        "minimum": {
                                                            "const": 0,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "minimum"
                                                    ],
                                                    "type": "object"
                                                },
                                                "target": {
                                                    "const": "number",
                                                    "type": "string"
                                                },
                                                "validate": {
                                                    "const": "0 <= $input",
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "const": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "exclusive",
                                                "kind",
                                                "schema",
                                                "target",
                                                "validate",
                                                "value"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        },
                        {
                            "allOf": [
                                {
                                    "properties": {
                                        "typia.tag": {
                                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                            "properties": {
                                                "exclusive": {
                                                    "items": [
                                                        {
                                                            "const": "maximum",
                                                            "type": "string"
                                                        },
                                                        {
                                                            "const": "exclusiveMaximum",
                                                            "type": "string"
                                                        }
                                                    ],
                                                    "maxItems": 2,
                                                    "minItems": 2,
                                                    "type": "array"
                                                },
                                                "kind": {
                                                    "const": "maximum",
                                                    "type": "string"
                                                },
                                                "schema": {
                                                    "properties": {
                                                        "maximum": {
                                                            "const": 1,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "maximum"
                                                    ],
                                                    "type": "object"
                                                },
                                                "target": {
                                                    "const": "number",
                                                    "type": "string"
                                                },
                                                "validate": {
                                                    "const": "$input <= 1",
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "const": 1,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "exclusive",
                                                "kind",
                                                "schema",
                                                "target",
                                                "validate",
                                                "value"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "timeAfterShutdown": {
                    "description": "Time after shutdown or scram, if applicable [hours]\nAffects decay heat calculations and time-to-boil estimates",
                    "type": "number"
                }
            },
            "required": [
                "coolantPressureAtControlVolume1",
                "decayHeatLevel",
                "powerLevel",
                "reactorCoolantTemperatureAtControlVolume1"
            ],
            "type": "object"
        },
        "Record<ComponentReference,Component>": {
            "type": "object"
        },
        "Record<DependencyType,{treatmentDescription:string;modelingMethod:string;examples:string[];}>": {
            "properties": {
                "COMMON_CAUSE": {
                    "properties": {
                        "examples": {
                            "description": "Specific examples of this dependency type in the model",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "modelingMethod": {
                            "description": "Method used to model this dependency type",
                            "type": "string"
                        },
                        "treatmentDescription": {
                            "description": "Description of how this dependency type is addressed",
                            "type": "string"
                        }
                    },
                    "required": [
                        "examples",
                        "modelingMethod",
                        "treatmentDescription"
                    ],
                    "type": "object"
                },
                "FUNCTIONAL": {
                    "properties": {
                        "examples": {
                            "description": "Specific examples of this dependency type in the model",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "modelingMethod": {
                            "description": "Method used to model this dependency type",
                            "type": "string"
                        },
                        "treatmentDescription": {
                            "description": "Description of how this dependency type is addressed",
                            "type": "string"
                        }
                    },
                    "required": [
                        "examples",
                        "modelingMethod",
                        "treatmentDescription"
                    ],
                    "type": "object"
                },
                "HUMAN": {
                    "properties": {
                        "examples": {
                            "description": "Specific examples of this dependency type in the model",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "modelingMethod": {
                            "description": "Method used to model this dependency type",
                            "type": "string"
                        },
                        "treatmentDescription": {
                            "description": "Description of how this dependency type is addressed",
                            "type": "string"
                        }
                    },
                    "required": [
                        "examples",
                        "modelingMethod",
                        "treatmentDescription"
                    ],
                    "type": "object"
                },
                "OPERATIONAL": {
                    "properties": {
                        "examples": {
                            "description": "Specific examples of this dependency type in the model",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "modelingMethod": {
                            "description": "Method used to model this dependency type",
                            "type": "string"
                        },
                        "treatmentDescription": {
                            "description": "Description of how this dependency type is addressed",
                            "type": "string"
                        }
                    },
                    "required": [
                        "examples",
                        "modelingMethod",
                        "treatmentDescription"
                    ],
                    "type": "object"
                },
                "PHENOMENOLOGICAL": {
                    "properties": {
                        "examples": {
                            "description": "Specific examples of this dependency type in the model",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "modelingMethod": {
                            "description": "Method used to model this dependency type",
                            "type": "string"
                        },
                        "treatmentDescription": {
                            "description": "Description of how this dependency type is addressed",
                            "type": "string"
                        }
                    },
                    "required": [
                        "examples",
                        "modelingMethod",
                        "treatmentDescription"
                    ],
                    "type": "object"
                },
                "PHYSICAL": {
                    "properties": {
                        "examples": {
                            "description": "Specific examples of this dependency type in the model",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "modelingMethod": {
                            "description": "Method used to model this dependency type",
                            "type": "string"
                        },
                        "treatmentDescription": {
                            "description": "Description of how this dependency type is addressed",
                            "type": "string"
                        }
                    },
                    "required": [
                        "examples",
                        "modelingMethod",
                        "treatmentDescription"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "COMMON_CAUSE",
                "FUNCTIONAL",
                "HUMAN",
                "OPERATIONAL",
                "PHENOMENOLOGICAL",
                "PHYSICAL"
            ],
            "type": "object"
        },
        "Record<EventSequenceFamilyReference,EventSequenceFamily>": {
            "type": "object"
        },
        "Record<EventSequenceReference,EventSequence>": {
            "type": "object"
        },
        "Record<EventSequenceReference,{releaseCategoryReference:ReleaseCategoryReference;justification:string;}>": {
            "type": "object"
        },
        "Record<HumanActionReference,{system:SystemReference;description:string;}>": {
            "type": "object"
        },
        "Record<ReleaseCategoryReference,ReleaseCategory>": {
            "type": "object"
        },
        "Record<ReleaseCategoryReference,ReleaseCategoryBasis>": {
            "type": "object"
        },
        "Record<ReleaseCategoryReference,string>": {
            "type": "object"
        },
        "Record<ReleaseCategoryReference,{phenomena:string[];description:string;}>": {
            "type": "object"
        },
        "Record<ReleaseCategoryReference,{riskSignificance?:ImportanceLevel|undefined;insights?:string[]|undefined;recommendations?:string[]|undefined;status?:\"IN_PROGRESS\"|\"PENDING\"|\"ADDRESSED\"|\"DEFERRED\"|undefined;}>": {
            "type": "object"
        },
        "Record<SourceLocationType,ScreeningStatus>": {
            "properties": {
                "IN_CORE_SOURCE": {
                    "$ref": "#/definitions/ScreeningStatus"
                },
                "OUT_OF_CORE_SOURCE": {
                    "$ref": "#/definitions/ScreeningStatus"
                }
            },
            "required": [
                "IN_CORE_SOURCE",
                "OUT_OF_CORE_SOURCE"
            ],
            "type": "object"
        },
        "Record<SourceTermDefinitionReference,SourceTermDefinition>": {
            "type": "object"
        },
        "Record<SourceTermDefinitionReference,{analysisDescription:string;keyFindings:string[];}>": {
            "type": "object"
        },
        "Record<SourceTermDefinitionReference,{parameterValues:string;uncertaintyAssessment:string;}>": {
            "type": "object"
        },
        "Record<SourceTermDefinitionReference,{riskSignificance?:ImportanceLevel|undefined;insights?:string[]|undefined;recommendations?:string[]|undefined;keyUncertainties?:string[]|undefined;status?:\"IN_PROGRESS\"|\"PENDING\"|\"ADDRESSED\"|\"DEFERRED\"|undefined;}>": {
            "type": "object"
        },
        "Record<SuccessCriteriaId,OverallSuccessCriteriaDefinition>": {
            "type": "object"
        },
        "Record<SystemReference,SystemDefinition>": {
            "type": "object"
        },
        "Record<SystemReference,SystemModelEvaluation>": {
            "type": "object"
        },
        "Record<SystemReference,SystemStatus>": {
            "type": "object"
        },
        "Record<SystemReference,SystemUncertaintyAnalysis>": {
            "type": "object"
        },
        "Record<SystemReference,string>": {
            "type": "object"
        },
        "Record<SystemReference,string>_1": {
            "type": "object"
        },
        "Record<SystemReference,string[]>": {
            "type": "object"
        },
        "Record<SystemReference,{assumptions:string[];impact:string;}>": {
            "type": "object"
        },
        "Record<SystemReference,{criteria:string;relationshipToEventSequences:string;}>": {
            "type": "object"
        },
        "Record<SystemReference,{description:string;modelingApproach:string;specialConsiderations?:string|undefined;}>": {
            "type": "object"
        },
        "Record<SystemReference,{description:string;uncertaintyEvaluation:string;}>": {
            "type": "object"
        },
        "Record<SystemReference,{includedComponents:string[];excludedComponents:string[];justificationForExclusion:string;includedFailureModes:string[];excludedFailureModes:string[];justificationForFailureModeExclusion:string;}>": {
            "type": "object"
        },
        "Record<SystemReference,{reference:string;description:string;}>": {
            "type": "object"
        },
        "Record<SystemReference,{studyDescription:string;results:string;}[]>": {
            "type": "object"
        },
        "Record<SystemReference,{topEventProbability:number;otherResults:Record<string,string>;}>": {
            "type": "object"
        },
        "Record<SystemReference,{uncertainties:string[];impact:string;}>": {
            "type": "object"
        },
        "Record<string,\"OPEN\"|\"INTACT\"|\"BREACHED\"|\"DEGRADED\"|\"BYPASSED\">": {
            "type": "object"
        },
        "Record<string,AnalystQualification>": {
            "type": "object"
        },
        "Record<string,CircularLogic>": {
            "type": "object"
        },
        "Record<string,CommonCauseFailureGroup>": {
            "type": "object"
        },
        "Record<string,ComponentMissionTimeDefinition>": {
            "type": "object"
        },
        "Record<string,ComponentSuccessCriteriaDefinition>": {
            "type": "object"
        },
        "Record<string,ComputerCodeValidation>": {
            "type": "object"
        },
        "Record<string,ConsistencyVerification>": {
            "type": "object"
        },
        "Record<string,DigitalInstrumentationAndControl>": {
            "type": "object"
        },
        "Record<string,EngineeringAnalysis>": {
            "type": "object"
        },
        "Record<string,EventSequenceFamilyQuantification>": {
            "type": "object"
        },
        "Record<string,EventSequenceFrequencyEstimate>": {
            "type": "object"
        },
        "Record<string,ExpertJudgment>": {
            "type": "object"
        },
        "Record<string,FaultTreeNode>": {
            "type": "object"
        },
        "Record<string,FlagEvent>": {
            "type": "object"
        },
        "Record<string,HumanActionSuccessCriteriaDefinition>": {
            "type": "object"
        },
        "Record<string,ImportanceAnalysis>": {
            "type": "object"
        },
        "Record<string,InitiatingEventGroup>": {
            "type": "object"
        },
        "Record<string,InitiatingEventQuantification>": {
            "type": "object"
        },
        "Record<string,InitiatorDefinition>": {
            "type": "object"
        },
        "Record<string,IntermediateEndState>": {
            "type": "object"
        },
        "Record<string,MechanisticSourceTermUncertaintyAnalysis>": {
            "type": "object"
        },
        "Record<string,MissionTimeDefinition>": {
            "type": "object"
        },
        "Record<string,ModelUncertainty>": {
            "type": "object"
        },
        "Record<string,MutuallyExclusiveEvents>": {
            "type": "object"
        },
        "Record<string,PassiveSystemsTreatment>": {
            "type": "object"
        },
        "Record<string,PlantSpecificDesignInformation>": {
            "type": "object"
        },
        "Record<string,RadioactiveSource>": {
            "type": "object"
        },
        "Record<string,RadionuclideBarrier>": {
            "type": "object"
        },
        "Record<string,RadionuclideTransportBarrier>": {
            "type": "object"
        },
        "Record<string,Record<string,number>>": {
            "type": "object"
        },
        "Record<string,ReleasePhase>": {
            "type": "object"
        },
        "Record<string,SafetyFunction>": {
            "type": "object"
        },
        "Record<string,SensitivityStudy>": {
            "type": "object"
        },
        "Record<string,SequenceDesignator>": {
            "type": "object"
        },
        "Record<string,SharedResourceDefinition>": {
            "type": "object"
        },
        "Record<string,SourceTermModel>": {
            "type": "object"
        },
        "Record<string,StructuralAnalysis>": {
            "type": "object"
        },
        "Record<string,SuccessCriteriaAssumption>": {
            "type": "object"
        },
        "Record<string,SuccessCriteriaSensitivityStudy>": {
            "type": "object"
        },
        "Record<string,SystemDefinition>": {
            "type": "object"
        },
        "Record<string,SystemLogicModel>": {
            "type": "object"
        },
        "Record<string,SystemStatus>": {
            "type": "object"
        },
        "Record<string,SystemSuccessCriteriaDefinition>": {
            "type": "object"
        },
        "Record<string,ThermalFluidAnalysis>": {
            "type": "object"
        },
        "Record<string,TransportMechanism>": {
            "type": "object"
        },
        "Record<string,TransportPhenomena>": {
            "type": "object"
        },
        "Record<string,[number,number]>": {
            "type": "object"
        },
        "Record<string,number>": {
            "type": "object"
        },
        "Record<string,number[]>": {
            "type": "object"
        },
        "Record<string,string>": {
            "type": "object"
        },
        "Record<string,string[]>": {
            "type": "object"
        },
        "Record<string,string|number>": {
            "type": "object"
        },
        "Record<string,unknown>": {
            "type": "object"
        },
        "Record<string,{barrier:string;state:BarrierStatus;timing:string;mechanism:string;}>": {
            "type": "object"
        },
        "Record<string,{conditions:string;capability:string;failureProbability?:number|undefined;}[]>": {
            "type": "object"
        },
        "Record<string,{description:string;probability:number;uncertainty?:Uncertainty|undefined;}>": {
            "type": "object"
        },
        "Record<string,{description:string;threshold:number;consequences:string[];}>": {
            "type": "object"
        },
        "Record<string,{failureModes:string[];justificationForInclusion?:string|undefined;componentGroup?:string|undefined;}>": {
            "type": "object"
        },
        "Record<string,{id:string;name:string;description:string;component_id:string;failureMode:string;}>": {
            "type": "object"
        },
        "Record<string,{location:string;systems:SystemReference[];components:string[];hazards:string[];}>": {
            "type": "object"
        },
        "Record<string,{metricDefinition:string;relationshipToReleaseCategories:string;}>": {
            "type": "object"
        },
        "Record<string,{mode:string;causes:string[];local_effects:string[];system_effects:string[];detection:string[];safeguards:string[];severity:number;probability:number;}>": {
            "type": "object"
        },
        "Record<string,{modelName:string;purpose:string;keyFeatures:string[];}>": {
            "type": "object"
        },
        "Record<string,{module:string;state:ModuleState;propagation_path?:string|undefined;timing?:string|undefined;}>": {
            "type": "object"
        },
        "Record<string,{name:string;function:string;boundaries:string[];}>": {
            "type": "object"
        },
        "Record<string,{name:string;parameters:string[];normal_ranges:[number,number][];}>": {
            "type": "object"
        },
        "Record<string,{parameter:string;setpoint:number;uncertainty:number;basis:string;}>": {
            "type": "object"
        },
        "Record<string,{source:Format<\"uuid\">;description:string;inventoryBasis:string;}>": {
            "type": "object"
        },
        "Record<string,{system:SystemReference;component:string;considerations:string;calculationReferences?:string[]|undefined;}>": {
            "type": "object"
        },
        "Record<string,{system:SystemReference;description:string;moduleReference?:string|undefined;cutsetReference?:string|undefined;}>": {
            "type": "object"
        },
        "Record<string,{system:SystemReference;loopDescription:string;resolution:string;}>": {
            "type": "object"
        },
        "Record<string,{system:string;function:string;success_criteria:string|string[]|SuccessCriteriaId;dependencies:string[];}>": {
            "type": "object"
        },
        "RecoveryActionTreatment": {
            "description": "Treatment of recovery actions in event sequence quantification",
            "properties": {
                "modelingMethod": {
                    "description": "Method used to incorporate recovery actions into the quantification",
                    "type": "string"
                },
                "recoveryActions": {
                    "description": "List of recovery actions with their IDs and descriptions",
                    "items": {
                        "properties": {
                            "description": {
                                "description": "Description of the recovery action",
                                "type": "string"
                            },
                            "id": {
                                "description": "Unique identifier for the recovery action",
                                "type": "string"
                            }
                        },
                        "required": [
                            "description",
                            "id"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "modelingMethod",
                "recoveryActions"
            ],
            "type": "object"
        },
        "ReleaseCategory": {
            "description": "Defines a single release category for the Mechanistic Source Term Analysis.",
            "properties": {
                "boundingSequenceJustification": {
                    "description": "Justification for the selection of the bounding sequence",
                    "type": "string"
                },
                "boundingSequenceReference": {
                    "$ref": "#/definitions/EventSequenceReference",
                    "description": "Bounding sequence representing this release category (MS-A5)"
                },
                "description": {
                    "description": "Detailed description of the release category",
                    "type": "string"
                },
                "eventSequenceFamilies": {
                    "description": "Event sequence families assigned to this release category",
                    "items": {
                        "$ref": "#/definitions/EventSequenceReference"
                    },
                    "type": "array"
                },
                "groupingJustification": {
                    "description": "Justification for the grouping of sequences into this release category",
                    "type": "string"
                },
                "magnitudeClassification": {
                    "description": "Magnitude classification of this release (e.g., large, small)",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "preOperationalAssumptions": {
                    "description": "Pre-operational assumptions that influence release category definition and characterization",
                    "items": {
                        "properties": {
                            "basis": {
                                "description": "Basis or rationale for making this assumption",
                                "type": "string"
                            },
                            "description": {
                                "description": "Description of the assumption",
                                "type": "string"
                            },
                            "influence": {
                                "description": "How this assumption influences the release category definition or characterization",
                                "type": "string"
                            },
                            "validationNeeded": {
                                "description": "Information needed to validate or refine this assumption during later stages",
                                "type": "string"
                            }
                        },
                        "required": [
                            "description",
                            "influence"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "radiologicalConsequenceConsistency": {
                    "description": "Consistency with Radiological Consequence Analysis requirements (MS-A2)",
                    "properties": {
                        "description": {
                            "type": "string"
                        },
                        "justification": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "description",
                        "justification"
                    ],
                    "type": "object"
                },
                "releaseTerminationTime": {
                    "description": "Termination time for radiological releases consideration (MS-A4)",
                    "properties": {
                        "justification": {
                            "type": "string"
                        },
                        "unit": {
                            "type": "string"
                        },
                        "value": {
                            "type": "number"
                        }
                    },
                    "required": [
                        "justification",
                        "unit",
                        "value"
                    ],
                    "type": "object"
                },
                "timingClassification": {
                    "description": "Timing classification of this release (e.g., early, late)",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "description",
                "eventSequenceFamilies",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "ReleaseCategoryBasis": {
            "description": "Technical basis for the adequacy of the definition of a release category.",
            "properties": {
                "regulatoryAlignment": {
                    "description": "Description of how this release category aligns with regulatory expectations",
                    "type": "string"
                },
                "releaseCategoryReference": {
                    "$ref": "#/definitions/ReleaseCategoryReference_1",
                    "description": "Reference to the release category"
                },
                "supportingReferences": {
                    "description": "References to supporting analyses or documents",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "technicalBasis": {
                    "description": "Technical basis for the definition of the release category",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "releaseCategoryReference",
                "technicalBasis",
                "uuid"
            ],
            "type": "object"
        },
        "ReleaseCategoryInputs": {
            "description": "Inputs required for the off-site Radiological Consequence Analysis methodology for a specific release category.",
            "properties": {
                "releaseCategory": {
                    "$ref": "#/definitions/ReleaseCategoryReference_2",
                    "description": "Reference to the release category."
                },
                "releaseCharacteristics": {
                    "$ref": "#/definitions/ReleaseCharacteristics",
                    "description": "Characteristics of the radionuclide release for this category."
                }
            },
            "required": [
                "releaseCategory",
                "releaseCharacteristics"
            ],
            "type": "object"
        },
        "ReleaseCategoryMapping": {
            "description": "Interface representing the mapping of event sequences to release categories.\nUsed to define how event sequences are mapped to release categories for source term analysis.",
            "properties": {
                "commonCharacteristics": {
                    "description": "Description of the common characteristics",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "eventSequenceIds": {
                    "description": "References to the event sequences mapped to this release category",
                    "items": {
                        "$ref": "#/definitions/EventSequenceReference"
                    },
                    "type": "array"
                },
                "frequencyInformation": {
                    "description": "Frequency information for this mapping, if available at this stage.\nThis may be populated during event sequence quantification and used by risk integration.",
                    "properties": {
                        "mean": {
                            "description": "Mean frequency value",
                            "type": "number"
                        },
                        "uncertainty": {
                            "description": "Uncertainty in the frequency",
                            "properties": {
                                "distribution": {
                                    "description": "Distribution type",
                                    "enum": [
                                        "beta",
                                        "binomial",
                                        "exponential",
                                        "gamma",
                                        "lognormal",
                                        "normal",
                                        "point_estimate",
                                        "poisson",
                                        "uniform",
                                        "weibull"
                                    ],
                                    "type": "string"
                                },
                                "parameters": {
                                    "$ref": "#/definitions/Record<string,number>",
                                    "description": "Distribution parameters"
                                }
                            },
                            "type": "object"
                        },
                        "units": {
                            "description": "Frequency unit",
                            "enum": [
                                "per-calendar-year",
                                "per-critical-year",
                                "per-demand",
                                "per-reactor-year"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "mappingBasis": {
                    "description": "Basis for mapping these sequences to this release category",
                    "type": "string"
                },
                "processedByRiskIntegration": {
                    "description": "Flag indicating whether this mapping has been processed by risk integration.\nUsed for traceability between technical elements.",
                    "type": "boolean"
                },
                "releaseCategoryId": {
                    "$ref": "#/definitions/ReleaseCategoryReference",
                    "description": "Reference to the release category"
                },
                "sourceTermId": {
                    "$ref": "#/definitions/SourceTermReference",
                    "description": "Reference to the source term associated with this release category"
                },
                "supportingAnalysisReferences": {
                    "description": "References to supporting analyses",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "commonCharacteristics",
                "eventSequenceIds",
                "mappingBasis",
                "releaseCategoryId",
                "uuid"
            ],
            "type": "object"
        },
        "ReleaseCategoryReference": {
            "allOf": [
                {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "pattern",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "pattern": {
                                            "const": "^RC-[0-9]+$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "pattern"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "RegExp(\"^RC-[0-9]+$\").test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "^RC-[0-9]+$",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ],
            "description": "Type for release category references.\nFormat: RC-[NUMBER]\nExample: RC-001"
        },
        "ReleaseCategoryReference_1": {
            "allOf": [
                {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "pattern",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "pattern": {
                                            "const": "^RC-[A-Za-z0-9_-]+$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "pattern"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "RegExp(\"^RC-[A-Za-z0-9_-]+$\").test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "^RC-[A-Za-z0-9_-]+$",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ],
            "description": "Type for release category IDs.\nFormat: RC-[NAME] (e.g., RC-LER)"
        },
        "ReleaseCategoryReference_2": {
            "allOf": [
                {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "pattern",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "pattern": {
                                            "const": "^RCAT-[1-9]+$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "pattern"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "RegExp(\"^RCAT-[1-9]+$\").test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "^RCAT-[1-9]+$",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ],
            "description": "Reference to a release category."
        },
        "ReleaseCategoryToConsequenceAnalysis": {
            "description": "Represents the analysis linking release categories to radiological consequences.",
            "properties": {
                "meteorologicalDataAssumptionsForBoundingSite": {
                    "description": "Assumptions made due to the lack of site details related to meteorological data for bounding site PRAs.\nRequired by **RCME-A11** (within the scope of RCRE).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "releaseCategoryAndSourceTermReviewed": {
                    "description": "Indicates that the release category definitions (ES-C1) and mechanistic source term parameters (HLR-MS-A) were reviewed for the identification of inputs.",
                    "type": "boolean"
                },
                "releaseCategoryInputs": {
                    "description": "Inputs required for the off-site Radiological Consequence Analysis methodology for each release category.\nIncludes characteristics like number of plumes, radionuclide release quantities, isotopes, timing, energy, height, particle size, and uncertainties.\nDerived from **RCRE-A2** and informed by **ES-C1** and **HLR-MS-A** (**RCRE-A3**).",
                    "items": {
                        "$ref": "#/definitions/ReleaseCategoryInputs"
                    },
                    "type": "array"
                },
                "releaseCategoryLinkageDocumentation": {
                    "description": "Documents the linkage between modeled plant operating states, initiating events, and event sequences leading to defined release categories.",
                    "type": "string"
                },
                "riskIntegrationFeedback": {
                    "description": "Feedback from risk integration related to release categories.\nThis field contains feedback from risk integration that should be considered\nin future revisions of the radiological consequence analysis.",
                    "properties": {
                        "analysisId": {
                            "description": "ID of the risk integration analysis that provided the feedback",
                            "type": "string"
                        },
                        "feedbackDate": {
                            "description": "Date the feedback was received",
                            "type": "string"
                        },
                        "generalFeedback": {
                            "description": "General feedback on the release category analysis",
                            "type": "string"
                        },
                        "releaseCategoryFeedback": {
                            "description": "Feedback on specific release categories",
                            "items": {
                                "properties": {
                                    "insights": {
                                        "description": "Insights from risk integration",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "recommendations": {
                                        "description": "Recommendations for improving the analysis of this release category",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "releaseCategory": {
                                        "$ref": "#/definitions/ReleaseCategoryReference_2",
                                        "description": "Release category"
                                    },
                                    "riskSignificance": {
                                        "description": "Risk significance level determined by risk integration",
                                        "enum": [
                                            "HIGH",
                                            "LOW",
                                            "MEDIUM"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "releaseCategory"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "response": {
                            "description": "Response to the feedback",
                            "properties": {
                                "changes": {
                                    "description": "Changes made or planned in response to the feedback",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "description": {
                                    "description": "Description of how the feedback was or will be addressed",
                                    "type": "string"
                                },
                                "status": {
                                    "description": "Status of the response",
                                    "enum": [
                                        "COMPLETED",
                                        "IN_PROGRESS",
                                        "PENDING"
                                    ],
                                    "type": "string"
                                }
                            },
                            "required": [
                                "description",
                                "status"
                            ],
                            "type": "object"
                        }
                    },
                    "required": [
                        "analysisId"
                    ],
                    "type": "object"
                },
                "riskMetricMapping": {
                    "description": "Mapping between release categories and risk metrics used in risk integration.\nThis provides a direct link between radiological consequence analysis and risk integration.",
                    "items": {
                        "properties": {
                            "releaseCategory": {
                                "$ref": "#/definitions/ReleaseCategoryReference_2",
                                "description": "Reference to the release category"
                            },
                            "riskMetrics": {
                                "description": "Corresponding risk metrics in risk integration",
                                "items": {
                                    "properties": {
                                        "contributionDescription": {
                                            "description": "Description of how the release category contributes to this risk metric",
                                            "type": "string"
                                        },
                                        "riskMetric": {
                                            "description": "Risk metric type from risk integration",
                                            "type": "string"
                                        },
                                        "significance": {
                                            "description": "Significance of this release category to the risk metric",
                                            "enum": [
                                                "HIGH",
                                                "LOW",
                                                "MEDIUM"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "contributionDescription",
                                        "riskMetric"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "releaseCategory",
                            "riskMetrics"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "riskSignificanceCriteria": {
                    "description": "Risk significance criteria used to evaluate release categories.\nThis provides information on how release categories are evaluated in terms of risk significance.",
                    "items": {
                        "properties": {
                            "criteriaType": {
                                "description": "Type of risk significance criteria",
                                "type": "string"
                            },
                            "description": {
                                "description": "Description of the criteria",
                                "type": "string"
                            },
                            "thresholds": {
                                "description": "Threshold values for different significance levels",
                                "items": {
                                    "properties": {
                                        "level": {
                                            "$ref": "#/definitions/ImportanceLevel",
                                            "description": "Significance level"
                                        },
                                        "units": {
                                            "description": "Units of the threshold value",
                                            "type": "string"
                                        },
                                        "value": {
                                            "description": "Threshold value",
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "level",
                                        "value"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "criteriaType",
                            "description"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "selectedConsequenceMeasures": {
                    "description": "Consequence measure(s) selected for the intended application of the PRA as per RI-A1.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "siteInformation": {
                    "anyOf": [
                        {
                            "properties": {
                                "isBounding": {
                                    "const": false,
                                    "type": "boolean"
                                },
                                "siteReference": {
                                    "$ref": "#/definitions/SiteReference"
                                }
                            },
                            "required": [
                                "isBounding",
                                "siteReference"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "boundingSite": {
                                    "$ref": "#/definitions/BoundingSite"
                                },
                                "isBounding": {
                                    "const": true,
                                    "type": "boolean"
                                }
                            },
                            "required": [
                                "boundingSite",
                                "isBounding"
                            ],
                            "type": "object"
                        }
                    ],
                    "description": "Identification of the specific site or description of the bounding site used.\nRequired by **RCRE-A1**."
                }
            },
            "required": [
                "releaseCategoryAndSourceTermReviewed",
                "releaseCategoryInputs",
                "selectedConsequenceMeasures",
                "siteInformation"
            ],
            "type": "object"
        },
        "ReleaseCharacteristics": {
            "description": "Represents characteristics of a radionuclide release for consequence analysis.",
            "properties": {
                "hazardsImpactingProtectiveActions": {
                    "description": "Hazards impacting protective actions.",
                    "type": "string"
                },
                "importantRadionuclides": {
                    "description": "Radionuclide isotopes important to dose or health effects.\nRequired by **RCRE-A2(c)**.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "importantRadionuclidesJustification": {
                    "description": "Brief justification for why these radionuclides are important to health effects.",
                    "type": "string"
                },
                "numberOfPlumes": {
                    "description": "The number of plumes associated with the release.",
                    "type": "number"
                },
                "radionuclideGroupFractions": {
                    "$ref": "#/definitions/Record<string,number>",
                    "description": "Fractions of radionuclide groups released."
                },
                "radionuclideQuantities": {
                    "$ref": "#/definitions/Record<string,number[]>",
                    "description": "Quantity of each radionuclide released by species in each time phase of release (in Becquerels or Curies).\nThis is a record where the key is the radionuclide (e.g., \"Cs-137\") and the value is an array of quantities for each time phase."
                },
                "releaseDuration": {
                    "description": "Release duration for each release phase in hours.",
                    "type": "string"
                },
                "releaseEnergy": {
                    "description": "Thermal energy of the release(s) in Joules.",
                    "type": "number"
                },
                "releaseEnergyDescription": {
                    "description": "Thermal energy description.",
                    "type": "string"
                },
                "releaseHeight": {
                    "description": "Release height in meters above ground level.",
                    "type": "number"
                },
                "releaseHeightDescription": {
                    "description": "Release height description.",
                    "type": "string"
                },
                "releaseTiming": {
                    "description": "Release timing (start time) for each release phase in hours.",
                    "type": "string"
                },
                "releaseTimingAndDuration": {
                    "description": "Release timing and duration of each release phase in hours.\nArray representing start time and duration for each phase.",
                    "items": {
                        "items": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "number"
                            }
                        ],
                        "maxItems": 2,
                        "minItems": 2,
                        "type": "array"
                    },
                    "type": "array"
                },
                "releaseUncertainties": {
                    "description": "Uncertainties associated with the release characteristics.",
                    "type": "string"
                },
                "releasedParticleSize": {
                    "description": "Released particle size in micrometers (e.g., activity median aerodynamic diameter - AMAD).",
                    "type": "number"
                },
                "releasedParticleSizeDescription": {
                    "description": "Released particle size description.",
                    "type": "string"
                },
                "warningTime": {
                    "description": "Warning time before the start of release or releases in hours.",
                    "type": "number"
                },
                "warningTimeDescription": {
                    "description": "Warning time as a string description.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ReleaseForm": {
            "description": "Represents the physical and chemical form of a released substance.",
            "enum": [
                "ELEMENTAL",
                "AEROSOL",
                "DUST",
                "OTHER"
            ],
            "type": "string"
        },
        "ReleasePhase": {
            "description": "Represents a time phase of a release.",
            "properties": {
                "description": {
                    "description": "Description of the release phase",
                    "type": "string"
                },
                "endTime": {
                    "description": "End time of the phase",
                    "type": "number"
                },
                "name": {
                    "description": "Name of the release phase",
                    "type": "string"
                },
                "startTime": {
                    "description": "Start time of the phase (e.g., in seconds after the initiating event)",
                    "type": "number"
                },
                "timeUnit": {
                    "description": "Unit of time measurement",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "endTime",
                "name",
                "startTime",
                "uuid"
            ],
            "type": "object"
        },
        "RiskContributor": {
            "description": "Risk contributor with importance metrics.",
            "properties": {
                "context": {
                    "description": "Additional contextual information about this contributor",
                    "type": "string"
                },
                "contributorType": {
                    "description": "Type of contributor (e.g., \"event-sequence\", \"component\")",
                    "type": "string"
                },
                "importanceLevel": {
                    "description": "Importance level of this contributor",
                    "enum": [
                        "HIGH",
                        "LOW",
                        "MEDIUM"
                    ],
                    "type": "string"
                },
                "importanceMetrics": {
                    "additionalProperties": {
                        "type": "number"
                    },
                    "description": "Importance metrics for this contributor",
                    "properties": {
                        "birnbaum": {
                            "description": "Birnbaum importance measure",
                            "type": "number"
                        },
                        "fussellVesely": {
                            "description": "Fussell-Vesely importance measure",
                            "type": "number"
                        },
                        "raw": {
                            "description": "Risk Achievement Worth",
                            "type": "number"
                        },
                        "rrw": {
                            "description": "Risk Reduction Worth",
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "insights": {
                    "description": "Risk insights derived from this contributor",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "riskContribution": {
                    "description": "Estimated contribution to total risk",
                    "type": "number"
                },
                "sourceElement": {
                    "$ref": "#/definitions/TechnicalElementTypes",
                    "description": "Original technical element where this contributor is defined"
                },
                "sourceId": {
                    "description": "Reference ID to the original entity in its technical element",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "contributorType",
                "name",
                "sourceElement",
                "sourceId",
                "uuid"
            ],
            "type": "object"
        },
        "RiskIntegration": {
            "description": "Comprehensive interface for the Risk Integration technical element.\n\nThe objectives of Risk Integration ensure that:\n- (a) The criteria for establishing the appropriate absolute or relative risk significance of event\n      sequences, event sequence families, structures, systems and components, and basic events\n      modeled in the PRA are defined in a manner that is consistent with the intended applications\n      of the PRA.\n- (b) The overall risk is calculated and the significant risk contributors are identified using risk\n      metrics consistent with the selected risk significance criteria and appropriate for the\n      intended PRA applications.\n- (c) The uncertainties in the calculated risk metrics are characterized and quantified to the extent\n      practical. Key sources of model uncertainty and assumptions are identified, and their\n      potential impact on the results is understood.\n- (d) The Risk Integration is documented to provide traceability of the work.",
            "properties": {
                "additionalMetadata": {
                    "description": "Additional metadata specific to Risk Integration.",
                    "properties": {
                        "assumptions": {
                            "description": "Risk integration specific assumptions",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "eventSequenceAnalysisReferences": {
                            "description": "References to event sequence analysis results used as input.\nThis provides traceability between technical elements.",
                            "items": {
                                "properties": {
                                    "analysisId": {
                                        "description": "ID of the event sequence analysis",
                                        "type": "string"
                                    },
                                    "date": {
                                        "description": "Date the analysis was performed",
                                        "type": "string"
                                    },
                                    "usageDescription": {
                                        "description": "Description of how the analysis was used",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "Version or revision of the analysis",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "analysisId",
                                    "usageDescription"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "limitations": {
                            "description": "Risk integration specific limitations",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "mechanisticSourceTermReferences": {
                            "description": "References to mechanistic source term analysis results used as input.\nThis provides traceability between technical elements.",
                            "items": {
                                "properties": {
                                    "analysisId": {
                                        "description": "ID of the mechanistic source term analysis",
                                        "type": "string"
                                    },
                                    "date": {
                                        "description": "Date the analysis was performed",
                                        "type": "string"
                                    },
                                    "usageDescription": {
                                        "description": "Description of how the analysis was used",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "Version or revision of the analysis",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "analysisId",
                                    "usageDescription"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "traceability": {
                            "description": "Traceability information",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "commonAssumptions": {
                    "description": "Common assumptions that apply across this technical element\nUsing the standardized BaseAssumption interface",
                    "items": {
                        "$ref": "#/definitions/BaseAssumption"
                    },
                    "type": "array"
                },
                "created": {
                    "description": "The date the technical element was created",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the technical element",
                    "type": "string"
                },
                "documentation": {
                    "$ref": "#/definitions/RiskIntegrationDocumentation",
                    "description": "Documentation of the risk integration."
                },
                "eventSequenceAnalysisFeedback": {
                    "description": "Feedback to event sequence analysis.\nThis field contains information that should be fed back to the event sequence analysis\nbased on the results of risk integration.",
                    "properties": {
                        "analysisId": {
                            "description": "ID of the event sequence analysis to update",
                            "type": "string"
                        },
                        "eventSequenceFamilyFeedback": {
                            "description": "Feedback on event sequence families",
                            "items": {
                                "properties": {
                                    "familyId": {
                                        "$ref": "#/definitions/EventSequenceFamilyReference",
                                        "description": "ID of the event sequence family"
                                    },
                                    "insights": {
                                        "description": "Insights from risk integration",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "recommendations": {
                                        "description": "Recommendations for improving the family definition",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "riskSignificance": {
                                        "description": "Risk significance level",
                                        "enum": [
                                            "HIGH",
                                            "LOW",
                                            "MEDIUM"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "familyId"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "generalFeedback": {
                            "description": "General feedback on the event sequence analysis",
                            "type": "string"
                        },
                        "releaseCategoryMappingFeedback": {
                            "description": "Feedback on release category mappings",
                            "items": {
                                "properties": {
                                    "insights": {
                                        "description": "Additional insights from risk integration",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "originalMappingId": {
                                        "description": "ID of the original mapping in event sequence analysis",
                                        "type": "string"
                                    },
                                    "recommendations": {
                                        "description": "Recommendations for improving the mapping",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "updatedFrequency": {
                                        "description": "Updated frequency information",
                                        "type": "number"
                                    },
                                    "updatedFrequencyUnit": {
                                        "description": "Updated frequency unit",
                                        "enum": [
                                            "per-calendar-year",
                                            "per-critical-year",
                                            "per-demand",
                                            "per-reactor-year"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "originalMappingId"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "analysisId"
                    ],
                    "type": "object"
                },
                "eventSequenceToReleaseCategoryMappings": {
                    "description": "Mappings between event sequences and release categories.",
                    "items": {
                        "$ref": "#/definitions/EventSequenceToReleaseCategory"
                    },
                    "type": "array"
                },
                "integratedRiskResults": {
                    "$ref": "#/definitions/IntegratedRiskResults",
                    "description": "Integrated risk results."
                },
                "integrationMethods": {
                    "description": "Methods and codes used for risk integration.",
                    "items": {
                        "$ref": "#/definitions/RiskIntegrationMethod"
                    },
                    "type": "array"
                },
                "keyAssumptions": {
                    "description": "Key assumptions in the risk integration.",
                    "items": {
                        "$ref": "#/definitions/RiskIntegrationAssumption"
                    },
                    "type": "array"
                },
                "mechanisticSourceTermFeedback": {
                    "description": "Feedback to mechanistic source term analysis.\nThis field contains information that should be fed back to the mechanistic source term analysis\nbased on the results of risk integration.",
                    "properties": {
                        "analysisId": {
                            "description": "ID of the mechanistic source term analysis to update",
                            "type": "string"
                        },
                        "generalFeedback": {
                            "description": "General feedback on the mechanistic source term analysis",
                            "type": "string"
                        },
                        "mappingFeedback": {
                            "description": "Feedback on event sequence to release category mappings",
                            "items": {
                                "properties": {
                                    "insights": {
                                        "description": "Insights from risk integration",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "originalMappingId": {
                                        "description": "ID of the original mapping in mechanistic source term analysis",
                                        "type": "string"
                                    },
                                    "recommendations": {
                                        "description": "Recommendations for improving the mapping",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "riskSignificance": {
                                        "description": "Risk significance level",
                                        "enum": [
                                            "HIGH",
                                            "LOW",
                                            "MEDIUM"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "originalMappingId"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "releaseCategoryFeedback": {
                            "description": "Feedback on release categories",
                            "items": {
                                "properties": {
                                    "insights": {
                                        "description": "Insights from risk integration",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "recommendations": {
                                        "description": "Recommendations for improving the release category definition",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "releaseCategoryId": {
                                        "$ref": "#/definitions/ReleaseCategoryReference_1",
                                        "description": "ID of the release category"
                                    },
                                    "riskSignificance": {
                                        "description": "Risk significance level",
                                        "enum": [
                                            "HIGH",
                                            "LOW",
                                            "MEDIUM"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "releaseCategoryId"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "sourceTermDefinitionFeedback": {
                            "description": "Feedback on source term definitions",
                            "items": {
                                "properties": {
                                    "insights": {
                                        "description": "Insights from risk integration",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "keyUncertainties": {
                                        "description": "Key uncertainties identified during risk integration",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "recommendations": {
                                        "description": "Recommendations for improving the source term definition",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "riskSignificance": {
                                        "description": "Risk significance level",
                                        "enum": [
                                            "HIGH",
                                            "LOW",
                                            "MEDIUM"
                                        ],
                                        "type": "string"
                                    },
                                    "sourceTermDefinitionId": {
                                        "$ref": "#/definitions/SourceTermDefinitionReference",
                                        "description": "ID of the source term definition"
                                    }
                                },
                                "required": [
                                    "sourceTermDefinitionId"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "analysisId"
                    ],
                    "type": "object"
                },
                "modified": {
                    "description": "The date the technical element was last modified",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "description": "The owner of the technical element",
                    "type": "string"
                },
                "preOperationalAssumptions": {
                    "description": "For pre-operational PRAs, assumptions and limitations due to the lack of as-built, as-operated details.",
                    "items": {
                        "properties": {
                            "assumption": {
                                "type": "string"
                            },
                            "impact": {
                                "type": "string"
                            },
                            "validationPlan": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "assumption",
                            "impact",
                            "validationPlan"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "references": {
                    "description": "References to other technical elements",
                    "items": {
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "technicalElementId": {
                                "type": "string"
                            },
                            "technicalElementType": {
                                "$ref": "#/definitions/TechnicalElementTypes"
                            }
                        },
                        "required": [
                            "description",
                            "technicalElementId",
                            "technicalElementType"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "riskSignificanceCriteria": {
                    "description": "Risk significance criteria defined for the PRA.",
                    "items": {
                        "$ref": "#/definitions/RiskSignificanceCriteria"
                    },
                    "type": "array"
                },
                "riskSignificanceEvaluations": {
                    "description": "Risk significance evaluations for specific PRA elements.",
                    "items": {
                        "$ref": "#/definitions/RiskSignificanceEvaluation"
                    },
                    "type": "array"
                },
                "scopeDefinition": {
                    "description": "Definition of the scope of the risk integration analysis",
                    "properties": {
                        "consequenceMeasures": {
                            "description": "Consequence measures included in the analysis",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "eventSequenceFamilyIds": {
                            "description": "Event sequence families included in the analysis.\nThis provides a direct link to the event sequence analysis.",
                            "items": {
                                "$ref": "#/definitions/EventSequenceFamilyReference"
                            },
                            "type": "array"
                        },
                        "hazardGroups": {
                            "description": "Hazard groups included in the analysis",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "plantOperatingStateIds": {
                            "description": "Plant operating states included in the analysis",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "radioactiveMaterialSources": {
                            "description": "Sources of radioactive material within scope",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "releaseCategoryIds": {
                            "description": "Release categories included in the analysis.\nThis provides a direct link to the mechanistic source term analysis.",
                            "items": {
                                "$ref": "#/definitions/ReleaseCategoryReference_1"
                            },
                            "type": "array"
                        },
                        "sourceTermDefinitionIds": {
                            "description": "Source term definitions included in the analysis.\nThis provides a direct link to the mechanistic source term analysis.",
                            "items": {
                                "$ref": "#/definitions/SourceTermDefinitionReference"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "consequenceMeasures",
                        "hazardGroups",
                        "plantOperatingStateIds",
                        "radioactiveMaterialSources"
                    ],
                    "type": "object"
                },
                "sensitivityStudies": {
                    "description": "Sensitivity studies for uncertainty assessment",
                    "items": {
                        "$ref": "#/definitions/SensitivityStudy"
                    },
                    "type": "array"
                },
                "significantContributors": {
                    "$ref": "#/definitions/SignificantRiskContributors",
                    "description": "Significant risk contributors identified from the integrated risk results."
                },
                "status": {
                    "description": "The status of the technical element",
                    "enum": [
                        "APPROVED",
                        "DEPRECATED",
                        "DRAFT",
                        "REVIEW"
                    ],
                    "type": "string"
                },
                "tags": {
                    "description": "Tags associated with the technical element",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "const": "risk-integration",
                    "description": "The type of technical element",
                    "type": "string"
                },
                "uncertaintyAnalyses": {
                    "description": "Uncertainty analyses for the calculated risk metrics.",
                    "items": {
                        "$ref": "#/definitions/RiskUncertaintyAnalysis"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "validationRules": {
                    "$ref": "#/definitions/RiskIntegrationValidationRules",
                    "description": "Validation rules for the risk integration analysis"
                },
                "version": {
                    "description": "The version of the technical element",
                    "type": "string"
                }
            },
            "required": [
                "created",
                "documentation",
                "eventSequenceToReleaseCategoryMappings",
                "integratedRiskResults",
                "integrationMethods",
                "modified",
                "name",
                "riskSignificanceCriteria",
                "significantContributors",
                "type",
                "uncertaintyAnalyses",
                "uuid",
                "version"
            ],
            "type": "object"
        },
        "RiskIntegrationAssumption": {
            "description": "Interface representing a key assumption in the risk integration.",
            "properties": {
                "alternatives": {
                    "description": "Alternative assumptions that could have been made",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "basis": {
                    "description": "Basis for the assumption",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the assumption",
                    "type": "string"
                },
                "impact": {
                    "description": "Impact of the assumption on risk results",
                    "type": "string"
                },
                "originatingElement": {
                    "$ref": "#/definitions/TechnicalElementTypes",
                    "description": "Technical element where this assumption originates"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "validationPlan": {
                    "description": "For pre-operational PRAs, plan for validation once the plant is operational",
                    "type": "string"
                },
                "validationStatus": {
                    "description": "Status of the assumption validation",
                    "enum": [
                        "INVALIDATED",
                        "PENDING",
                        "VALIDATED"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "basis",
                "description",
                "impact",
                "originatingElement",
                "uuid"
            ],
            "type": "object"
        },
        "RiskIntegrationDocumentation": {
            "description": "Interface for documenting the Risk Integration analysis.",
            "properties": {
                "calculationMethodsDescription": {
                    "description": "Description of the methods used to calculate the overall risk [156, RI-D1(c)].\nIncludes approaches for calculating integrated risk metrics.",
                    "type": "string"
                },
                "eventSequenceIntegrationDescription": {
                    "description": "Documentation of the integration with event sequence analysis.\nDescribes how event sequence analysis results were used in risk integration.",
                    "properties": {
                        "feedbackProvided": {
                            "description": "Feedback provided to event sequence analysis",
                            "type": "string"
                        },
                        "frequencyDerivationApproach": {
                            "description": "How frequencies were derived or adjusted",
                            "type": "string"
                        },
                        "inconsistencyResolution": {
                            "description": "How inconsistencies were resolved",
                            "type": "string"
                        },
                        "integrationChallenges": {
                            "description": "Challenges encountered during integration",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "integrationProcessDescription": {
                            "description": "Description of the integration process",
                            "type": "string"
                        },
                        "mappingApproach": {
                            "description": "How event sequence families were mapped to release categories",
                            "type": "string"
                        }
                    },
                    "required": [
                        "frequencyDerivationApproach",
                        "integrationProcessDescription",
                        "mappingApproach"
                    ],
                    "type": "object"
                },
                "keyAssumptionsDescription": {
                    "description": "Description of the key assumptions made in the Risk Integration [156, RI-D1(e)].\nIncludes sources of model uncertainty and related assumptions.",
                    "type": "string"
                },
                "limitationsDescription": {
                    "description": "Description of the limitations of the Risk Integration analysis [156, RI-D1(f)].\nIncludes limitations due to the lack of as-built, as-operated details.",
                    "type": "string"
                },
                "mechanisticSourceTermIntegrationDescription": {
                    "description": "Documentation of the integration with mechanistic source term analysis.\nDescribes how mechanistic source term analysis results were used in risk integration.",
                    "properties": {
                        "feedbackProvided": {
                            "description": "Feedback provided to mechanistic source term analysis",
                            "type": "string"
                        },
                        "inconsistencyResolution": {
                            "description": "How inconsistencies were resolved",
                            "type": "string"
                        },
                        "integrationChallenges": {
                            "description": "Challenges encountered during integration",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "integrationProcessDescription": {
                            "description": "Description of the integration process",
                            "type": "string"
                        },
                        "releaseCategoryIntegrationApproach": {
                            "description": "How release categories were incorporated into risk metrics",
                            "type": "string"
                        },
                        "sourceTermInsights": {
                            "description": "Key insights about source terms derived from risk integration",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "sourceTermUtilizationApproach": {
                            "description": "How source term definitions were used in risk calculations",
                            "type": "string"
                        },
                        "uncertaintyPropagationApproach": {
                            "description": "How uncertainties in source terms were propagated to risk results",
                            "type": "string"
                        }
                    },
                    "required": [
                        "integrationProcessDescription",
                        "releaseCategoryIntegrationApproach",
                        "sourceTermUtilizationApproach"
                    ],
                    "type": "object"
                },
                "peerReviewFindings": {
                    "description": "Peer review findings and resolutions.",
                    "items": {
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "findingId": {
                                "type": "string"
                            },
                            "resolution": {
                                "type": "string"
                            },
                            "significance": {
                                "$ref": "#/definitions/ImportanceLevel"
                            },
                            "status": {
                                "enum": [
                                    "CLOSED",
                                    "IN_PROGRESS",
                                    "OPEN"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "description",
                            "findingId",
                            "resolution",
                            "significance",
                            "status"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "preOperationalAssumptions": {
                    "description": "For pre-operational PRAs, documentation of assumptions and limitations [156, RI-D3].\nIncludes plans for validation once the plant is operational.",
                    "items": {
                        "properties": {
                            "assumption": {
                                "type": "string"
                            },
                            "impact": {
                                "type": "string"
                            },
                            "validationPlan": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "assumption",
                            "impact",
                            "validationPlan"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "processDescription": {
                    "description": "Description of the process used in the Risk Integration analysis [156, RI-D1(a)].\nIncludes what is used as input, the applied methods, and the results.",
                    "type": "string"
                },
                "references": {
                    "description": "References to supporting analyses and documentation.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "riskInsights": {
                    "description": "Risk insights derived from the Risk Integration analysis [156, RI-D1(g)].\nIncludes insights about significant contributors to risk.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "riskSignificanceCriteriaDescription": {
                    "description": "Description of the risk significance criteria used [156, RI-D1(b)].\nIncludes both absolute and relative criteria.",
                    "type": "string"
                },
                "uncertaintyAnalysisDescription": {
                    "description": "Description of the uncertainty analysis performed [156, RI-D1(d)].\nIncludes characterization and quantification of uncertainties.",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "calculationMethodsDescription",
                "keyAssumptionsDescription",
                "limitationsDescription",
                "processDescription",
                "riskSignificanceCriteriaDescription",
                "uncertaintyAnalysisDescription",
                "uuid"
            ],
            "type": "object"
        },
        "RiskIntegrationMethod": {
            "description": "Interface for documenting the methods and codes used for Risk Integration.",
            "properties": {
                "applicability": {
                    "description": "Scope of applicability",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the method or code [153, RI-B7].",
                    "type": "string"
                },
                "justification": {
                    "description": "Justification for the application of the method or code, considering its limitations and the PRA scope [153, RI-B7].",
                    "type": "string"
                },
                "limitations": {
                    "description": "Limitations of the method or code [153, RI-B7].",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "sqaReference": {
                    "description": "Reference to software quality assurance documentation, if applicable",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "verificationStatus": {
                    "description": "Verification and validation status",
                    "properties": {
                        "verificationDate": {
                            "type": "string"
                        },
                        "verificationMethod": {
                            "type": "string"
                        },
                        "verified": {
                            "type": "boolean"
                        },
                        "verifier": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "verified"
                    ],
                    "type": "object"
                },
                "version": {
                    "description": "Version of the method or code.",
                    "type": "string"
                }
            },
            "required": [
                "justification",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "RiskIntegrationMethodReference": {
            "allOf": [
                {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "pattern",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "pattern": {
                                            "const": "^RIM-[A-Za-z0-9_-]+$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "pattern"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "RegExp(\"^RIM-[A-Za-z0-9_-]+$\").test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "^RIM-[A-Za-z0-9_-]+$",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ],
            "description": "Reference to a risk integration method by its unique identifier."
        },
        "RiskIntegrationValidationRules": {
            "description": "Interface representing risk integration validation rules.\nUsed to validate the risk integration analysis for completeness and consistency.",
            "properties": {
                "documentationRules": {
                    "description": "Rules for documentation validation",
                    "properties": {
                        "description": {
                            "description": "Validation description",
                            "type": "string"
                        },
                        "documentationCriteria": {
                            "description": "Documentation criteria",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "requiredDocumentation": {
                            "description": "Required documentation elements",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "description",
                        "documentationCriteria",
                        "requiredDocumentation"
                    ],
                    "type": "object"
                },
                "integratedRiskResultsRules": {
                    "description": "Rules for integrated risk results validation",
                    "properties": {
                        "description": {
                            "description": "Validation description",
                            "type": "string"
                        },
                        "requiredElements": {
                            "description": "Required analysis elements",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "validationMethod": {
                            "description": "Validation method",
                            "type": "string"
                        }
                    },
                    "required": [
                        "description",
                        "requiredElements",
                        "validationMethod"
                    ],
                    "type": "object"
                },
                "riskSignificanceCriteriaRules": {
                    "description": "Rules for risk significance criteria validation",
                    "properties": {
                        "description": {
                            "description": "Validation description",
                            "type": "string"
                        },
                        "requiredElements": {
                            "description": "Required criteria elements",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "validationMethod": {
                            "description": "Validation method",
                            "type": "string"
                        }
                    },
                    "required": [
                        "description",
                        "requiredElements",
                        "validationMethod"
                    ],
                    "type": "object"
                },
                "significantContributorRules": {
                    "description": "Rules for significant contributor identification validation",
                    "properties": {
                        "description": {
                            "description": "Validation description",
                            "type": "string"
                        },
                        "documentationRequirements": {
                            "description": "Documentation requirements",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "requiredContributorTypes": {
                            "description": "Contributor types that must be addressed",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "description",
                        "documentationRequirements",
                        "requiredContributorTypes"
                    ],
                    "type": "object"
                },
                "uncertaintyAnalysisRules": {
                    "description": "Rules for uncertainty analysis validation",
                    "properties": {
                        "characterizationCriteria": {
                            "description": "Uncertainty characterization criteria",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "description": {
                            "description": "Validation description",
                            "type": "string"
                        },
                        "requiredElements": {
                            "description": "Required uncertainty elements",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "characterizationCriteria",
                        "description",
                        "requiredElements"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "documentationRules",
                "integratedRiskResultsRules",
                "riskSignificanceCriteriaRules",
                "significantContributorRules",
                "uncertaintyAnalysisRules"
            ],
            "type": "object"
        },
        "RiskMetric": {
            "description": "Interface for a risk metric with value and uncertainty.",
            "properties": {
                "acceptanceCriteria": {
                    "description": "Applicable acceptance criteria (if any)",
                    "properties": {
                        "basis": {
                            "type": "string"
                        },
                        "complianceStatus": {
                            "enum": [
                                "COMPLIANT",
                                "INDETERMINATE",
                                "NON_COMPLIANT"
                            ],
                            "type": "string"
                        },
                        "limit": {
                            "type": "number"
                        }
                    },
                    "required": [
                        "basis",
                        "complianceStatus",
                        "limit"
                    ],
                    "type": "object"
                },
                "description": {
                    "description": "Description of the risk metric",
                    "type": "string"
                },
                "metricType": {
                    "description": "Type of risk metric",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "uncertainty": {
                    "$ref": "#/definitions/Uncertainty",
                    "description": "Uncertainty associated with the risk metric value"
                },
                "units": {
                    "description": "Units for the metric (e.g., \"per reactor year\")",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "value": {
                    "description": "Point estimate value of the risk metric",
                    "type": "number"
                }
            },
            "required": [
                "metricType",
                "name",
                "units",
                "uuid",
                "value"
            ],
            "type": "object"
        },
        "RiskMetricType": {
            "description": "Enum representing risk metric types used in risk integration.",
            "enum": [
                "CDF",
                "LRF",
                "LERF",
                "SRF",
                "DOSE",
                "HEALTH_EFFECTS",
                "ECONOMIC",
                "LAND_CONTAMINATION",
                "OTHER"
            ],
            "type": "string"
        },
        "RiskSignificanceCriteria": {
            "description": "Interface defining the criteria used to establish risk significance.",
            "properties": {
                "absoluteThresholds": {
                    "additionalProperties": {
                        "type": "number"
                    },
                    "description": "Absolute thresholds for determining risk significance [151, RI-A2, RI-A3].\nDifferent thresholds can be defined for different PRA elements.",
                    "properties": {
                        "basic": {
                            "description": "Threshold for basic events",
                            "type": "number"
                        },
                        "component": {
                            "description": "Threshold for components",
                            "type": "number"
                        },
                        "eventSequence": {
                            "description": "Threshold for event sequences",
                            "type": "number"
                        },
                        "eventSequenceFamily": {
                            "description": "Threshold for event sequence families",
                            "type": "number"
                        },
                        "humanFailure": {
                            "description": "Threshold for human failure events",
                            "type": "number"
                        },
                        "system": {
                            "description": "Threshold for systems",
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "criteriaType": {
                    "default": "RiskSignificanceCriteriaType.ABSOLUTE",
                    "description": "The type of risk significance criteria used.",
                    "type": "string"
                },
                "description": {
                    "description": "Detailed description of the risk significance criteria [151, RI-A1].",
                    "type": "string"
                },
                "intendedApplications": {
                    "description": "PRA applications this criteria is intended to support.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "justification": {
                    "description": "Justification for the selected risk significance criteria, ensuring consistency with the\nintended PRA applications [151, RI-A4].",
                    "type": "string"
                },
                "metricType": {
                    "description": "The risk metric this criteria applies to.",
                    "type": "string"
                },
                "minimumReportingConsequence": {
                    "description": "Minimum reporting consequence level, or justification for an alternative [152, RI-A5].",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "references": {
                    "description": "References to any supporting documents, standards, or guidance.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "relativeThresholds": {
                    "additionalProperties": {
                        "type": "number"
                    },
                    "description": "Relative thresholds (as fraction of total) for determining risk significance [151, RI-A2, RI-A3].\nDifferent thresholds can be defined for different PRA elements.",
                    "properties": {
                        "basic": {
                            "description": "Threshold for basic events",
                            "type": "number"
                        },
                        "component": {
                            "description": "Threshold for components",
                            "type": "number"
                        },
                        "eventSequence": {
                            "description": "Threshold for event sequences (e.g. 0.01 for 1% of total)",
                            "type": "number"
                        },
                        "eventSequenceFamily": {
                            "description": "Threshold for event sequence families",
                            "type": "number"
                        },
                        "humanFailure": {
                            "description": "Threshold for human failure events",
                            "type": "number"
                        },
                        "system": {
                            "description": "Threshold for systems",
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "criteriaType",
                "justification",
                "metricType",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "RiskSignificanceCriteriaReference": {
            "allOf": [
                {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "pattern",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "pattern": {
                                            "const": "^RSC-[A-Za-z0-9_-]+$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "pattern"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "RegExp(\"^RSC-[A-Za-z0-9_-]+$\").test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "^RSC-[A-Za-z0-9_-]+$",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ],
            "description": "Used to reference risk significance criteria without creating circular dependencies."
        },
        "RiskSignificanceCriteriaType": {
            "description": "Enum representing the type of risk significance criteria.",
            "enum": [
                "ABSOLUTE",
                "RELATIVE",
                "HYBRID",
                "SENSITIVITY_BASED",
                "OTHER"
            ],
            "type": "string"
        },
        "RiskSignificanceEvaluation": {
            "description": "Interface for risk significance evaluation of a specific PRA element.",
            "properties": {
                "criteriaReference": {
                    "$ref": "#/definitions/RiskSignificanceCriteriaReference",
                    "description": "Reference to the risk significance criteria being applied"
                },
                "elementId": {
                    "description": "ID of the element being evaluated",
                    "type": "string"
                },
                "elementType": {
                    "description": "Type of PRA element being evaluated (e.g., \"event-sequence\", \"basic-event\")",
                    "type": "string"
                },
                "evaluationResults": {
                    "description": "Results of the significance evaluation",
                    "properties": {
                        "absoluteValue": {
                            "description": "Absolute risk value of the element",
                            "type": "number"
                        },
                        "isSignificant": {
                            "description": "Whether the element is considered risk-significant",
                            "type": "boolean"
                        },
                        "relativeValue": {
                            "description": "Relative contribution (as fraction of total)",
                            "type": "number"
                        },
                        "significanceBasis": {
                            "description": "Basis for the significance determination",
                            "type": "string"
                        }
                    },
                    "required": [
                        "isSignificant",
                        "significanceBasis"
                    ],
                    "type": "object"
                },
                "insights": {
                    "description": "Additional insights from this evaluation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "criteriaReference",
                "elementId",
                "elementType",
                "evaluationResults",
                "uuid"
            ],
            "type": "object"
        },
        "RiskUncertaintyAnalysis": {
            "description": "Interface representing the characterization and quantification of uncertainties in the calculated risk metrics.",
            "properties": {
                "description": {
                    "description": "Description of the uncertainty analysis [153, RI-C1].",
                    "type": "string"
                },
                "deterministicComparison": {
                    "description": "Comparison with deterministic safety analyses, if applicable [155, RI-C3].",
                    "type": "string"
                },
                "keyContributorIdentificationMethod": {
                    "description": "Method used to identify key uncertainty contributors [155, RI-C5].\nDocuments the approach used to determine which sources of uncertainty contribute most to the results.",
                    "properties": {
                        "description": {
                            "description": "Description of the method",
                            "type": "string"
                        },
                        "justification": {
                            "description": "Justification for the method",
                            "type": "string"
                        },
                        "significanceCriteria": {
                            "description": "Criteria used to determine significance",
                            "type": "string"
                        }
                    },
                    "required": [
                        "description",
                        "justification",
                        "significanceCriteria"
                    ],
                    "type": "object"
                },
                "keyUncertaintyContributors": {
                    "description": "Identification of key sources of uncertainty that contribute most to the uncertainty in risk results [155, RI-C5].\nThis explicitly addresses the RI-C5 requirement to identify the key sources of uncertainty.",
                    "items": {
                        "properties": {
                            "basis": {
                                "description": "Basis for determining this is a key contributor",
                                "type": "string"
                            },
                            "contribution": {
                                "description": "Contribution to overall uncertainty (e.g., percentage or qualitative assessment)",
                                "type": [
                                    "string",
                                    "number"
                                ]
                            },
                            "potentialImpactRange": {
                                "description": "Potential risk impact range",
                                "properties": {
                                    "lowerBound": {
                                        "type": "number"
                                    },
                                    "unit": {
                                        "type": "string"
                                    },
                                    "upperBound": {
                                        "type": "number"
                                    }
                                },
                                "required": [
                                    "lowerBound",
                                    "upperBound"
                                ],
                                "type": "object"
                            },
                            "priority": {
                                "description": "Priority for addressing this uncertainty",
                                "enum": [
                                    "HIGH",
                                    "LOW",
                                    "MEDIUM"
                                ],
                                "type": "string"
                            },
                            "recommendedActions": {
                                "description": "Recommended actions to reduce this uncertainty",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "sourceId": {
                                "description": "ID of the uncertainty source",
                                "type": "string"
                            },
                            "sourceName": {
                                "description": "Name of the uncertainty source",
                                "type": "string"
                            }
                        },
                        "required": [
                            "basis",
                            "contribution",
                            "sourceId",
                            "sourceName"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "keyUncertaintySources": {
                    "description": "Key sources of model uncertainty identified in each technical element [153, 154, RI-C1].",
                    "items": {
                        "$ref": "#/definitions/ModelUncertaintySource"
                    },
                    "type": "array"
                },
                "metric": {
                    "description": "The risk metric being analyzed",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parameterUncertainty": {
                    "description": "Parameter uncertainty results (quantitative)",
                    "properties": {
                        "distribution": {
                            "$ref": "#/definitions/DistributionType",
                            "description": "Distribution type representing the uncertainty"
                        },
                        "parameters": {
                            "$ref": "#/definitions/Record<string,number>",
                            "description": "Distribution parameters (e.g., percentiles, mean, variance)"
                        }
                    },
                    "required": [
                        "distribution",
                        "parameters"
                    ],
                    "type": "object"
                },
                "prioritization": {
                    "description": "Prioritization of key uncertainty sources based on their impact",
                    "items": {
                        "properties": {
                            "basis": {
                                "type": "string"
                            },
                            "priorityLevel": {
                                "$ref": "#/definitions/ImportanceLevel"
                            },
                            "uncertaintySourceId": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "basis",
                            "priorityLevel",
                            "uncertaintySourceId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "propagationMethod": {
                    "description": "Method used to propagate uncertainties",
                    "type": "string"
                },
                "relatedAssumptions": {
                    "description": "Assumptions related to the risk metric uncertainty analysis [153, RI-C1].",
                    "items": {
                        "$ref": "#/definitions/Assumption_1"
                    },
                    "type": "array"
                },
                "sensitivityStudies": {
                    "description": "Sensitivity studies performed to explore the impact of uncertainties [154, RI-C2].",
                    "items": {
                        "$ref": "#/definitions/SensitivityStudy"
                    },
                    "type": "array"
                },
                "uncertaintyRangeDiscussion": {
                    "description": "Discussion of the range of the uncertainty, consistent with parameter uncertainties [155, RI-C4].",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "metric",
                "name",
                "propagationMethod",
                "uuid"
            ],
            "type": "object"
        },
        "SafetyFunction": {
            "description": "Interface representing a safety function in the plant operating state.\n\nSafety functions include reactivity control, reactor coolant chemistry control,\ndecay heat removal control, RCS inventory/barrier control, radionuclide transport\nbarrier control, and ex-vessel fission product control.\n\nPer RG 1.247, \"The POS safety functions to consider include reactivity control, \nreactor coolant chemistry control, decay heat removal control, reactor coolant system (RCS) \ninventory/barrier control, radionuclide transport barrier control, and ex-vessel \nfission product control (e.g., off-gas tanks/fuel salt storage tanks/spent fuel pools).\"",
            "properties": {
                "category": {
                    "description": "Category of safety function\nTechnology-agnostic categorization of the safety function",
                    "type": "string"
                },
                "criteria": {
                    "description": "Success and failure criteria",
                    "properties": {
                        "failure": {
                            "type": "string"
                        },
                        "success": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "failure",
                        "success"
                    ],
                    "type": "object"
                },
                "degradationMechanisms": {
                    "description": "Degradation mechanisms that could affect this safety function",
                    "items": {
                        "properties": {
                            "description": {
                                "description": "Description of the mechanism",
                                "type": "string"
                            },
                            "mitigationMeasures": {
                                "description": "Mitigation measures in place",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "name": {
                                "description": "Name of the degradation mechanism",
                                "type": "string"
                            },
                            "status": {
                                "description": "Current status of this degradation mechanism",
                                "type": "string"
                            }
                        },
                        "required": [
                            "description",
                            "name",
                            "status"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "dependencies": {
                    "description": "Dependencies for this safety function",
                    "items": {
                        "properties": {
                            "description": {
                                "description": "Description of the dependency",
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of dependency",
                                "type": "string"
                            }
                        },
                        "required": [
                            "description",
                            "type"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the safety function",
                    "type": "string"
                },
                "implementationMechanisms": {
                    "description": "Implementation mechanisms for this safety function\nTechnology-agnostic description of how the safety function is implemented",
                    "items": {
                        "properties": {
                            "description": {
                                "description": "Description of the mechanism",
                                "type": "string"
                            },
                            "name": {
                                "description": "Name of the mechanism",
                                "type": "string"
                            },
                            "reliability": {
                                "description": "Reliability information for this mechanism",
                                "properties": {
                                    "mtbf": {
                                        "description": "Mean time between failures (hours)",
                                        "type": "number"
                                    },
                                    "pfd": {
                                        "description": "Probability of failure on demand",
                                        "type": "number"
                                    }
                                },
                                "type": "object"
                            },
                            "status": {
                                "description": "Current operational status of this mechanism",
                                "type": "string"
                            },
                            "statusDetails": {
                                "description": "Detailed status information",
                                "type": "string"
                            },
                            "type": {
                                "description": "Whether this is an active or passive mechanism",
                                "type": "string"
                            }
                        },
                        "required": [
                            "description",
                            "name",
                            "status",
                            "type"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "initiatingEvents": {
                    "description": "Initiating events this safety function responds to\nThese reference initiating events defined in the core/events module",
                    "items": {
                        "properties": {
                            "effectiveness": {
                                "description": "How effective this safety function is against this initiating event",
                                "type": "string"
                            },
                            "id": {
                                "description": "ID of the initiating event",
                                "type": "string"
                            },
                            "name": {
                                "description": "Name of the initiating event (for convenience)",
                                "type": "string"
                            }
                        },
                        "required": [
                            "id"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "operationalParameters": {
                    "description": "Operational parameters relevant to this safety function\nTechnology-agnostic parameters that affect the function's performance",
                    "items": {
                        "properties": {
                            "acceptableRange": {
                                "description": "Acceptable range for this parameter",
                                "items": [
                                    {
                                        "type": "number"
                                    },
                                    {
                                        "type": "number"
                                    }
                                ],
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array"
                            },
                            "monitored": {
                                "description": "Whether this parameter is being monitored",
                                "type": "boolean"
                            },
                            "monitoringInstruments": {
                                "description": "Instruments used to monitor this parameter",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "name": {
                                "description": "Name of the parameter",
                                "type": "string"
                            },
                            "units": {
                                "description": "Units of measurement, if applicable",
                                "type": "string"
                            },
                            "value": {
                                "description": "Current value or state of the parameter",
                                "type": [
                                    "string",
                                    "number"
                                ]
                            }
                        },
                        "required": [
                            "monitored",
                            "name",
                            "value"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "preventionMitigationLevel": {
                    "description": "Prevention or mitigation level provided by this safety function",
                    "type": "string"
                },
                "state": {
                    "description": "Current state of the safety function",
                    "enum": [
                        "FAILURE",
                        "SUCCESS"
                    ],
                    "type": "string"
                },
                "successCriteriaIds": {
                    "description": "References to success criteria for this safety function\nThese IDs reference success criteria defined in the success-criteria module\nFormat: SC-[SYSTEM]-[NUMBER], e.g., \"SC-RCIC-001\"",
                    "items": {
                        "$ref": "#/definitions/SuccessCriteriaId"
                    },
                    "type": "array"
                },
                "systemResponses": {
                    "description": "System responses related to this safety function",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "category",
                "implementationMechanisms",
                "name",
                "state",
                "uuid"
            ],
            "type": "object"
        },
        "SafetyFunctionReference": {
            "description": "Used to reference safety functions without creating circular dependencies",
            "type": "string"
        },
        "ScreeningCriteria": {
            "description": "Standardized interface for screening criteria across technical elements.\n\nThis interface consolidates common patterns for screening criteria found in:\n- Initiating Event Analysis\n- Event Sequence Analysis\n- Plant Operating States Analysis\n- Hazard Analysis\n\nIt provides a consistent structure for documenting screening criteria\nwhile allowing for technical element-specific extensions.",
            "properties": {
                "basis": {
                    "description": "Basis for screening criteria",
                    "type": "string"
                },
                "damage_frequency_criterion": {
                    "description": "Damage frequency screening criterion (if applicable)",
                    "type": "number"
                },
                "elementSpecificProperties": {
                    "$ref": "#/definitions/Record<string,unknown>",
                    "description": "Technical element specific properties\nAllows for extension with properties specific to a technical element"
                },
                "frequency_criterion": {
                    "description": "Frequency-based screening criterion (if applicable)",
                    "type": "number"
                },
                "risk_criterion": {
                    "description": "Risk-based screening criterion (if applicable)",
                    "type": "number"
                },
                "screened_out_elements": {
                    "description": "List of screened-out elements",
                    "items": {
                        "properties": {
                            "element_id": {
                                "description": "ID of the screened-out element",
                                "type": "string"
                            },
                            "justification": {
                                "description": "Detailed justification for screening decision",
                                "type": "string"
                            },
                            "reason": {
                                "description": "Reason for screening out",
                                "type": "string"
                            }
                        },
                        "required": [
                            "element_id",
                            "justification",
                            "reason"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "basis",
                "screened_out_elements"
            ],
            "type": "object"
        },
        "ScreeningStatus": {
            "description": "Standardized enum for screening status across technical elements.\n\nThis enum provides consistent categorization of screening statuses\nfor various elements that may be screened in or out of detailed analysis.",
            "enum": [
                "RETAINED",
                "SCREENED_OUT",
                "MERGED",
                "FULL_ANALYSIS",
                "QUALITATIVE_ANALYSIS"
            ],
            "type": "string"
        },
        "SensitivityStudy": {
            "description": "Standardized interface for sensitivity studies across technical elements.\n\nThis interface consolidates common patterns for sensitivity studies found in:\n- Data Analysis\n- Event Sequence Analysis\n- Initiating Event Analysis\n\nIt provides a consistent structure for documenting sensitivity studies\nwhile allowing for technical element-specific extensions.",
            "properties": {
                "description": {
                    "description": "Description of the sensitivity study",
                    "type": "string"
                },
                "elementSpecificProperties": {
                    "$ref": "#/definitions/Record<string,unknown>",
                    "description": "Technical element specific properties\nAllows for extension with properties specific to a technical element"
                },
                "impact": {
                    "description": "Impact on analysis outcomes",
                    "type": "string"
                },
                "insights": {
                    "description": "Insights gained from the study",
                    "type": "string"
                },
                "modelUncertaintyId": {
                    "description": "Reference to the model uncertainty being studied",
                    "type": "string"
                },
                "name": {
                    "description": "Name or title of the sensitivity study",
                    "type": "string"
                },
                "parameterRanges": {
                    "$ref": "#/definitions/Record<string,[number,number]>",
                    "description": "Range of variation for each parameter\nRecord where key is parameter name and value is [min, max] tuple"
                },
                "results": {
                    "description": "Results of the sensitivity study",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "variedParameters": {
                    "description": "Parameters being varied in the study",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "description",
                "parameterRanges",
                "uuid",
                "variedParameters"
            ],
            "type": "object"
        },
        "SequenceDesignator": {
            "description": "Interface representing a sequence designator.",
            "properties": {
                "description": {
                    "description": "Description of this sequence path",
                    "type": "string"
                },
                "eventSequenceId": {
                    "$ref": "#/definitions/EventSequenceReference",
                    "description": "Associated event sequence reference"
                },
                "frequency": {
                    "$ref": "#/definitions/Frequency",
                    "description": "Frequency value associated with this sequence path"
                },
                "id": {
                    "description": "Sequence designator ID",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "eventSequenceId",
                "id",
                "uuid"
            ],
            "type": "object"
        },
        "SequenceDesignatorId": {
            "description": "Type for sequence designator IDs.",
            "type": "string"
        },
        "SequenceTiming": {
            "description": "Interface representing timing information for key events in a sequence.",
            "properties": {
                "basis": {
                    "description": "Basis for the timing information",
                    "type": "string"
                },
                "deterministicAnalysisReferences": {
                    "description": "References to deterministic analyses supporting the timing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "duration": {
                    "allOf": [
                        {
                            "properties": {
                                "typia.tag": {
                                    "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                    "properties": {
                                        "exclusive": {
                                            "items": [
                                                {
                                                    "const": "minimum",
                                                    "type": "string"
                                                },
                                                {
                                                    "const": "exclusiveMinimum",
                                                    "type": "string"
                                                }
                                            ],
                                            "maxItems": 2,
                                            "minItems": 2,
                                            "type": "array"
                                        },
                                        "kind": {
                                            "const": "minimum",
                                            "type": "string"
                                        },
                                        "schema": {
                                            "properties": {
                                                "minimum": {
                                                    "const": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "minimum"
                                            ],
                                            "type": "object"
                                        },
                                        "target": {
                                            "const": "number",
                                            "type": "string"
                                        },
                                        "validate": {
                                            "const": "0 <= $input",
                                            "type": "string"
                                        },
                                        "value": {
                                            "const": 0,
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "exclusive",
                                        "kind",
                                        "schema",
                                        "target",
                                        "validate",
                                        "value"
                                    ],
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "description": "Duration or mission time if applicable (hours)"
                },
                "event": {
                    "description": "Event name or description",
                    "type": "string"
                },
                "timeAfterInitiator": {
                    "allOf": [
                        {
                            "properties": {
                                "typia.tag": {
                                    "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                    "properties": {
                                        "exclusive": {
                                            "items": [
                                                {
                                                    "const": "minimum",
                                                    "type": "string"
                                                },
                                                {
                                                    "const": "exclusiveMinimum",
                                                    "type": "string"
                                                }
                                            ],
                                            "maxItems": 2,
                                            "minItems": 2,
                                            "type": "array"
                                        },
                                        "kind": {
                                            "const": "minimum",
                                            "type": "string"
                                        },
                                        "schema": {
                                            "properties": {
                                                "minimum": {
                                                    "const": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "minimum"
                                            ],
                                            "type": "object"
                                        },
                                        "target": {
                                            "const": "number",
                                            "type": "string"
                                        },
                                        "validate": {
                                            "const": "0 <= $input",
                                            "type": "string"
                                        },
                                        "value": {
                                            "const": 0,
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "exclusive",
                                        "kind",
                                        "schema",
                                        "target",
                                        "validate",
                                        "value"
                                    ],
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "description": "Time after initiating event (hours)"
                },
                "timeWindow": {
                    "$ref": "#/definitions/TimeWindow",
                    "description": "Time window for operator actions if applicable"
                },
                "uncertaintyRange": {
                    "description": "Uncertainty in timing (hours)",
                    "items": [
                        {
                            "allOf": [
                                {
                                    "properties": {
                                        "typia.tag": {
                                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                            "properties": {
                                                "exclusive": {
                                                    "items": [
                                                        {
                                                            "const": "minimum",
                                                            "type": "string"
                                                        },
                                                        {
                                                            "const": "exclusiveMinimum",
                                                            "type": "string"
                                                        }
                                                    ],
                                                    "maxItems": 2,
                                                    "minItems": 2,
                                                    "type": "array"
                                                },
                                                "kind": {
                                                    "const": "minimum",
                                                    "type": "string"
                                                },
                                                "schema": {
                                                    "properties": {
                                                        "minimum": {
                                                            "const": 0,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "minimum"
                                                    ],
                                                    "type": "object"
                                                },
                                                "target": {
                                                    "const": "number",
                                                    "type": "string"
                                                },
                                                "validate": {
                                                    "const": "0 <= $input",
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "const": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "exclusive",
                                                "kind",
                                                "schema",
                                                "target",
                                                "validate",
                                                "value"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        },
                        {
                            "allOf": [
                                {
                                    "properties": {
                                        "typia.tag": {
                                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                            "properties": {
                                                "exclusive": {
                                                    "items": [
                                                        {
                                                            "const": "minimum",
                                                            "type": "string"
                                                        },
                                                        {
                                                            "const": "exclusiveMinimum",
                                                            "type": "string"
                                                        }
                                                    ],
                                                    "maxItems": 2,
                                                    "minItems": 2,
                                                    "type": "array"
                                                },
                                                "kind": {
                                                    "const": "minimum",
                                                    "type": "string"
                                                },
                                                "schema": {
                                                    "properties": {
                                                        "minimum": {
                                                            "const": 0,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "minimum"
                                                    ],
                                                    "type": "object"
                                                },
                                                "target": {
                                                    "const": "number",
                                                    "type": "string"
                                                },
                                                "validate": {
                                                    "const": "0 <= $input",
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "const": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "exclusive",
                                                "kind",
                                                "schema",
                                                "target",
                                                "validate",
                                                "value"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "event",
                "timeAfterInitiator",
                "uuid"
            ],
            "type": "object"
        },
        "Set<OperatingState>": {
            "properties": {
                "__@toStringTag@406": {
                    "type": "string"
                },
                "size": {
                    "type": "number"
                }
            },
            "required": [
                "__@toStringTag@406",
                "size"
            ],
            "type": "object"
        },
        "Set<string>": {
            "properties": {
                "__@toStringTag@406": {
                    "type": "string"
                },
                "size": {
                    "type": "number"
                }
            },
            "required": [
                "__@toStringTag@406",
                "size"
            ],
            "type": "object"
        },
        "SharedResourceDefinition": {
            "description": "Interface for mitigating systems' shared resources.",
            "properties": {
                "allocationStrategy": {
                    "description": "Resource capacity allocation strategy",
                    "type": "string"
                },
                "analysisReferences": {
                    "description": "References to supporting analyses",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the shared resource",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "sharedByReactors": {
                    "description": "Reactors or units that share this resource",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "sharedBySystems": {
                    "description": "Systems that share this resource",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "successCriteriaImpact": {
                    "description": "Impact on success criteria",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "allocationStrategy",
                "analysisReferences",
                "description",
                "name",
                "sharedByReactors",
                "sharedBySystems",
                "successCriteriaImpact",
                "uuid"
            ],
            "type": "object"
        },
        "SignificantContributorReference": {
            "allOf": [
                {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "pattern",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "pattern": {
                                            "const": "^SRC-[A-Za-z0-9_-]+$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "pattern"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "RegExp(\"^SRC-[A-Za-z0-9_-]+$\").test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "^SRC-[A-Za-z0-9_-]+$",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ],
            "description": "Reference to a significant risk contributor analysis by its unique identifier."
        },
        "SignificantRiskContributors": {
            "description": "Interface representing the significant risk contributors identified from the integrated risk results.",
            "properties": {
                "description": {
                    "description": "Description of the significant risk contributors [152, RI-B6].",
                    "type": "string"
                },
                "insights": {
                    "description": "Risk insights derived from the significant contributors [156, RI-D1(g)].",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "metricType": {
                    "description": "The risk metric these contributors apply to",
                    "type": "string"
                },
                "screeningCriteria": {
                    "description": "Any screening criteria used to identify significant contributors.",
                    "properties": {
                        "basis": {
                            "type": "string"
                        },
                        "criteriaType": {
                            "type": "string"
                        },
                        "threshold": {
                            "type": "number"
                        }
                    },
                    "required": [
                        "basis",
                        "criteriaType",
                        "threshold"
                    ],
                    "type": "object"
                },
                "significantBasicEvents": {
                    "description": "List of risk-significant basic events, including human failure events (HFEs) [152, 156, RI-B6].",
                    "items": {
                        "$ref": "#/definitions/RiskContributor"
                    },
                    "type": "array"
                },
                "significantComponents": {
                    "description": "List of risk-significant components.",
                    "items": {
                        "$ref": "#/definitions/RiskContributor"
                    },
                    "type": "array"
                },
                "significantEventSequences": {
                    "description": "List of risk-significant event sequences or event sequence families [152, RI-B6].",
                    "items": {
                        "$ref": "#/definitions/RiskContributor"
                    },
                    "type": "array"
                },
                "significantHazardGroups": {
                    "description": "List of risk-significant hazard groups.",
                    "items": {
                        "$ref": "#/definitions/RiskContributor"
                    },
                    "type": "array"
                },
                "significantPlantOperatingStates": {
                    "description": "List of risk-significant plant operating states.",
                    "items": {
                        "$ref": "#/definitions/RiskContributor"
                    },
                    "type": "array"
                },
                "significantRadioactiveSources": {
                    "description": "List of risk-significant radioactive sources.",
                    "items": {
                        "$ref": "#/definitions/RiskContributor"
                    },
                    "type": "array"
                },
                "significantSystems": {
                    "description": "List of risk-significant systems [152, RI-B6].",
                    "items": {
                        "$ref": "#/definitions/RiskContributor"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "metricType",
                "uuid"
            ],
            "type": "object"
        },
        "SiteReference": {
            "allOf": [
                {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "pattern",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "pattern": {
                                            "const": "^SITE-[1-9]+$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "pattern"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "RegExp(\"^SITE-[1-9]+$\").test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "^SITE-[1-9]+$",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ],
            "description": "Reference to a site."
        },
        "SourceLocationType": {
            "description": "Interface representing the types of source locations.",
            "enum": [
                "IN_CORE_SOURCE",
                "OUT_OF_CORE_SOURCE"
            ],
            "type": "string"
        },
        "SourceReference": {
            "description": "Used to reference radioactive material sources without creating circular dependencies",
            "type": "string"
        },
        "SourceTermDefinition": {
            "description": "Definition of the source term for a specific release category, detailing the release characteristics.",
            "properties": {
                "involvedReactors": {
                    "description": "Number of reactors or sources involved in this release scenario",
                    "type": "number"
                },
                "particleSizeDistribution": {
                    "description": "Aerosol and particle size distribution, if applicable",
                    "properties": {
                        "description": {
                            "type": "string"
                        },
                        "sizeRanges": {
                            "items": {
                                "properties": {
                                    "fraction": {
                                        "type": "number"
                                    },
                                    "max": {
                                        "type": "number"
                                    },
                                    "min": {
                                        "type": "number"
                                    },
                                    "unit": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "fraction",
                                    "max",
                                    "min",
                                    "unit"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "description",
                        "sizeRanges"
                    ],
                    "type": "object"
                },
                "radionuclideReleases": {
                    "description": "Quantity of radionuclides released by species in each time phase",
                    "items": {
                        "properties": {
                            "phase": {
                                "$ref": "#/definitions/ReleasePhase"
                            },
                            "quantities": {
                                "items": {
                                    "$ref": "#/definitions/RadionuclideReleaseQuantity"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "phase",
                            "quantities"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "releaseCategoryReference": {
                    "$ref": "#/definitions/ReleaseCategoryReference_1",
                    "description": "Reference to the release category"
                },
                "releaseElevation": {
                    "description": "Elevation of the release point",
                    "properties": {
                        "quantity": {
                            "type": "number"
                        },
                        "unit": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "quantity",
                        "unit"
                    ],
                    "type": "object"
                },
                "releaseEnergy": {
                    "description": "Energy content of the release",
                    "properties": {
                        "quantity": {
                            "type": "number"
                        },
                        "unit": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "quantity",
                        "unit"
                    ],
                    "type": "object"
                },
                "releaseForm": {
                    "$ref": "#/definitions/Record<string,string>",
                    "description": "Physical and chemical form of the release for each species"
                },
                "releaseTiming": {
                    "description": "Source term release timing including multiphase releases",
                    "items": {
                        "$ref": "#/definitions/ReleasePhase"
                    },
                    "type": "array"
                },
                "sourceTermModelReference": {
                    "description": "Reference to the source term model used for calculation",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "warningTimeForEvacuation": {
                    "description": "Warning time available for evacuation",
                    "type": "string"
                }
            },
            "required": [
                "radionuclideReleases",
                "releaseCategoryReference",
                "releaseForm",
                "releaseTiming",
                "uuid"
            ],
            "type": "object"
        },
        "SourceTermDefinitionReference": {
            "allOf": [
                {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "pattern",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "pattern": {
                                            "const": "^ST-[0-9]+$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "pattern"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "RegExp(\"^ST-[0-9]+$\").test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "^ST-[0-9]+$",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ],
            "description": "Type for source term IDs.\nFormat: ST-[NUMBER] (e.g., ST-001)"
        },
        "SourceTermModel": {
            "description": "Represents the models and computer programs used in the Mechanistic Source Term Analysis.",
            "properties": {
                "applicableAreas": {
                    "description": "Areas where the model is applicable",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "keyAssumptions": {
                    "description": "Key assumptions in the model",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "knownLimitations": {
                    "description": "Known limitations of the model",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "references": {
                    "description": "References to documentation or benchmarks",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "technicalBasis": {
                    "description": "Technical basis and documentation for the model",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "validationStatus": {
                    "description": "Status of verification and validation",
                    "type": "string"
                },
                "version": {
                    "description": "Version of the model or program",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "technicalBasis",
                "uuid",
                "validationStatus",
                "version"
            ],
            "type": "object"
        },
        "SourceTermReference": {
            "allOf": [
                {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "pattern",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "pattern": {
                                            "const": "^ST-[0-9]+$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "pattern"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "RegExp(\"^ST-[0-9]+$\").test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "^ST-[0-9]+$",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ],
            "description": "Type for source term references.\nFormat: ST-[NUMBER]\nExample: ST-001"
        },
        "StructuralAnalysis": {
            "description": "Interface for structural analysis specifics.",
            "properties": {
                "analysisMethods": {
                    "description": "Analysis methods used",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "engineeringAnalysisId": {
                    "description": "Reference to the engineering analysis",
                    "type": "string"
                },
                "failureModesEvaluated": {
                    "description": "Failure modes evaluated",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "loadingConditionsAnalyzed": {
                    "description": "Loading conditions analyzed",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "resultsSummary": {
                    "description": "Analysis results summary",
                    "type": "string"
                },
                "structuresAnalyzed": {
                    "description": "Structures analyzed",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "analysisMethods",
                "engineeringAnalysisId",
                "failureModesEvaluated",
                "loadingConditionsAnalyzed",
                "resultsSummary",
                "structuresAnalyzed",
                "uuid"
            ],
            "type": "object"
        },
        "SubsumedPOS": {
            "description": "Reusable interface for representing subsumed plant operating states.\nUsed to document when one POS is subsumed into another for analysis simplification.\n\nThis interface is critical for regulatory compliance as it provides structured\ndocumentation of POS grouping decisions. It directly supports HLR-POS-B requirements\nfor justifying all screening and grouping of plant operating states to facilitate\nefficient estimation of event sequence frequencies.\n\nKey regulatory requirements addressed:\n- POS-B3: Ensures grouped states don't mask risk-significant contributors\n- POS-B5: Documents grouping of demand-based and time-based initiating events\n- POS-B6: Ensures the most severe characteristics are chosen for combined groups\n- POS-D1: Provides traceability for the process and criteria used for grouping\n\nWithout this interface, it would be difficult to maintain a clear record of which\nplant operating states were combined, why they were combined, and what analysis\nwas performed to ensure the combination doesn't impact risk insights.",
            "properties": {
                "justification": {
                    "description": "Justification for why this subsumption is valid",
                    "type": "string"
                },
                "limitations": {
                    "description": "Limitations introduced by this subsumption",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "riskImpact": {
                    "description": "Risk impact assessment of this subsumption",
                    "enum": [
                        "HIGH",
                        "LOW",
                        "MEDIUM"
                    ],
                    "type": "string"
                },
                "sensitivityAnalysis": {
                    "$ref": "#/definitions/SensitivityStudy",
                    "description": "Sensitivity analysis for this subsumption\nReplaced simple string with standardized SensitivityStudy interface"
                },
                "subsumedPOS": {
                    "description": "ID or name of the POS being subsumed",
                    "type": "string"
                },
                "subsumingPOS": {
                    "description": "ID or name of the POS that is subsuming the other",
                    "type": "string"
                },
                "validationMethod": {
                    "description": "Validation method used to confirm the subsumption is appropriate",
                    "type": "string"
                }
            },
            "required": [
                "justification",
                "subsumedPOS",
                "subsumingPOS"
            ],
            "type": "object"
        },
        "SuccessCriteriaAssumption": {
            "description": "Interface for pre-operational assumptions in success criteria analysis.",
            "properties": {
                "addressingPlans": {
                    "description": "Plans to address or validate the assumption",
                    "type": "string"
                },
                "affectedSuccessCriteria": {
                    "description": "Success criteria affected by this assumption",
                    "items": {
                        "$ref": "#/definitions/SuccessCriteriaId"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the assumption",
                    "type": "string"
                },
                "impact": {
                    "description": "Impact of the assumption on the analysis",
                    "type": "string"
                },
                "impactOnSuccessCriteria": {
                    "description": "Specific impact on success criteria",
                    "type": "string"
                },
                "isPreOperational": {
                    "description": "Whether this is a pre-operational assumption (due to lack of as-built/as-operated details)",
                    "type": "boolean"
                },
                "limitations": {
                    "description": "Limitations imposed by this assumption",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rationale": {
                    "description": "Justification or rationale for the assumption",
                    "type": "string"
                },
                "references": {
                    "description": "References to supporting documentation",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "status": {
                    "description": "Current status of the assumption",
                    "enum": [
                        "CLOSED",
                        "IN_PROGRESS",
                        "OPEN"
                    ],
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "affectedSuccessCriteria",
                "description",
                "impactOnSuccessCriteria",
                "uuid"
            ],
            "type": "object"
        },
        "SuccessCriteriaDesignInformation": {
            "description": "Interface representing success criteria design information.",
            "properties": {
                "applicationInSuccessCriteria": {
                    "description": "How this design information was used in developing the success criteria.",
                    "type": "string"
                },
                "assumptions": {
                    "description": "Any assumptions or limitations in applying this design information.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "date": {
                    "description": "Date of the source document",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the design information",
                    "type": "string"
                },
                "requirementId": {
                    "description": "Requirement identifier for traceability",
                    "type": "string"
                },
                "revision": {
                    "description": "Document revision identifier",
                    "type": "string"
                },
                "sourceId": {
                    "description": "Identifier for the design source document",
                    "type": "string"
                },
                "sourceType": {
                    "description": "Type of source document (e.g., \"drawing\", \"calculation\", \"specification\")",
                    "type": "string"
                },
                "standardSection": {
                    "description": "Section number in relevant standard (e.g., NRC RG 1.247)",
                    "type": "string"
                },
                "supportedAspects": {
                    "description": "Specific aspects of the success criteria supported by this design information.",
                    "properties": {
                        "componentPerformance": {
                            "description": "Whether this supports component performance (e.g., pump curves, valve response times)",
                            "type": "boolean"
                        },
                        "endStateDefinitions": {
                            "description": "Whether this supports end state definitions (e.g., barriers, release paths)",
                            "type": "boolean"
                        },
                        "humanActions": {
                            "description": "Whether this supports human actions (e.g., action times, task complexity)",
                            "type": "boolean"
                        },
                        "systemCapacities": {
                            "description": "Whether this supports system capacities (e.g., flow rates, power levels)",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "applicationInSuccessCriteria",
                "sourceId",
                "sourceType",
                "supportedAspects"
            ],
            "type": "object"
        },
        "SuccessCriteriaDevelopment": {
            "description": "Interface representing the main Success Criteria Development container.\n\nThe objectives of Success Criteria Development ensure that:\n- (a) overall success criteria are defined (i.e., prevention of a release of radioactive material) \n      in each of the modeled event sequences and event sequence families;\n- (b) success criteria are defined for key safety functions, supporting systems, structures, \n      barriers to release of radioactive material, components, and operator actions;\n- (c) the success criteria is documented to provide traceability of the work.",
            "properties": {
                "additionalMetadata": {
                    "description": "Additional metadata specific to Success Criteria Development",
                    "properties": {
                        "assumptions": {
                            "description": "High-level assumptions",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "limitations": {
                            "description": "Known limitations",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "analystQualifications": {
                    "$ref": "#/definitions/Record<string,AnalystQualification>",
                    "description": "Analyst qualifications"
                },
                "commonAssumptions": {
                    "description": "Common assumptions that apply across this technical element\nUsing the standardized BaseAssumption interface",
                    "items": {
                        "$ref": "#/definitions/BaseAssumption"
                    },
                    "type": "array"
                },
                "componentMissionTimes": {
                    "$ref": "#/definitions/Record<string,ComponentMissionTimeDefinition>",
                    "description": "Component mission times"
                },
                "componentSuccessCriteria": {
                    "$ref": "#/definitions/Record<string,ComponentSuccessCriteriaDefinition>",
                    "description": "Component-level success criteria"
                },
                "computerCodeValidation": {
                    "$ref": "#/definitions/Record<string,ComputerCodeValidation>",
                    "description": "Computer code validation information"
                },
                "consistencyVerifications": {
                    "$ref": "#/definitions/Record<string,ConsistencyVerification>",
                    "description": "Consistency verifications"
                },
                "created": {
                    "description": "The date the technical element was created",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the technical element",
                    "type": "string"
                },
                "documentation": {
                    "description": "Documentation of the analysis",
                    "properties": {
                        "modelUncertaintyDocumentation": {
                            "$ref": "#/definitions/ModelUncertaintyDocumentation",
                            "description": "Model uncertainty documentation"
                        },
                        "peerReviewDocumentation": {
                            "$ref": "#/definitions/PeerReviewDocumentation",
                            "description": "Peer review documentation"
                        },
                        "preOperationalAssumptionsDocumentation": {
                            "$ref": "#/definitions/PreOperationalAssumptionsDocumentation",
                            "description": "Pre-operational assumptions documentation"
                        },
                        "processDocumentation": {
                            "$ref": "#/definitions/ProcessDocumentation",
                            "description": "Process documentation"
                        },
                        "traceabilityDocumentation": {
                            "$ref": "#/definitions/BaseTraceabilityDocumentation",
                            "description": "Traceability documentation"
                        }
                    },
                    "type": "object"
                },
                "engineeringAnalyses": {
                    "$ref": "#/definitions/Record<string,EngineeringAnalysis>",
                    "description": "Engineering analyses supporting success criteria"
                },
                "expertJudgments": {
                    "$ref": "#/definitions/Record<string,ExpertJudgment>",
                    "description": "Expert judgments used"
                },
                "humanActionSuccessCriteria": {
                    "$ref": "#/definitions/Record<string,HumanActionSuccessCriteriaDefinition>",
                    "description": "Human action success criteria"
                },
                "missionTimes": {
                    "$ref": "#/definitions/Record<string,MissionTimeDefinition>",
                    "description": "Mission times for event sequences"
                },
                "modelUncertainties": {
                    "$ref": "#/definitions/Record<string,ModelUncertainty>",
                    "description": "Sources of model uncertainty"
                },
                "modified": {
                    "description": "The date the technical element was last modified",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "overallSuccessCriteria": {
                    "$ref": "#/definitions/Record<SuccessCriteriaId,OverallSuccessCriteriaDefinition>",
                    "description": "Overall success criteria defined for preventing a release of radioactive material"
                },
                "owner": {
                    "description": "The owner of the technical element",
                    "type": "string"
                },
                "plantResponseAnalysisReferences": {
                    "description": "References to supporting plant response analyses",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "plantSpecificDesign": {
                    "$ref": "#/definitions/Record<string,PlantSpecificDesignInformation>",
                    "description": "Plant-specific design information"
                },
                "preOperationalAssumptions": {
                    "$ref": "#/definitions/Record<string,SuccessCriteriaAssumption>",
                    "description": "Assumptions made due to lack of as-built, as-operated details"
                },
                "references": {
                    "description": "References to other technical elements",
                    "items": {
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "technicalElementId": {
                                "type": "string"
                            },
                            "technicalElementType": {
                                "$ref": "#/definitions/TechnicalElementTypes"
                            }
                        },
                        "required": [
                            "description",
                            "technicalElementId",
                            "technicalElementType"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "sensitivityStudies": {
                    "$ref": "#/definitions/Record<string,SuccessCriteriaSensitivityStudy>",
                    "description": "Sensitivity studies performed"
                },
                "sharedResources": {
                    "$ref": "#/definitions/Record<string,SharedResourceDefinition>",
                    "description": "Shared resource definitions between reactors"
                },
                "status": {
                    "description": "The status of the technical element",
                    "enum": [
                        "APPROVED",
                        "DEPRECATED",
                        "DRAFT",
                        "REVIEW"
                    ],
                    "type": "string"
                },
                "structuralAnalyses": {
                    "$ref": "#/definitions/Record<string,StructuralAnalysis>",
                    "description": "Structural analyses"
                },
                "systemSuccessCriteria": {
                    "$ref": "#/definitions/Record<string,SystemSuccessCriteriaDefinition>",
                    "description": "System-specific success criteria"
                },
                "tags": {
                    "description": "Tags associated with the technical element",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "thermalFluidAnalyses": {
                    "$ref": "#/definitions/Record<string,ThermalFluidAnalysis>",
                    "description": "Thermal-fluid analyses"
                },
                "type": {
                    "const": "success-criteria-development",
                    "description": "The type of technical element",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "version": {
                    "description": "The version of the technical element",
                    "type": "string"
                }
            },
            "required": [
                "created",
                "engineeringAnalyses",
                "modified",
                "name",
                "overallSuccessCriteria",
                "type",
                "uuid",
                "version"
            ],
            "type": "object"
        },
        "SuccessCriteriaId": {
            "allOf": [
                {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "pattern",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "pattern": {
                                            "const": "^SC-[A-Z0-9-]+$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "pattern"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "RegExp(\"^SC-[A-Z0-9-]+$\").test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "^SC-[A-Z0-9-]+$",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ],
            "description": "Type for success criteria IDs.\nFormat: SC-[SYSTEM]-[NUMBER]\nExample: SC-RCIC-001"
        },
        "SuccessCriteriaSensitivityStudy": {
            "description": "Interface for sensitivity studies related to success criteria.",
            "properties": {
                "description": {
                    "description": "Description of the sensitivity study",
                    "type": "string"
                },
                "elementSpecificProperties": {
                    "$ref": "#/definitions/Record<string,unknown>",
                    "description": "Technical element specific properties\nAllows for extension with properties specific to a technical element"
                },
                "evaluatedSuccessCriteria": {
                    "description": "Success criteria evaluated in this study",
                    "items": {
                        "$ref": "#/definitions/SuccessCriteriaId"
                    },
                    "type": "array"
                },
                "impact": {
                    "description": "Impact on analysis outcomes",
                    "type": "string"
                },
                "impactOnDefinitions": {
                    "description": "Impact on success criteria definitions",
                    "type": "string"
                },
                "insights": {
                    "description": "Insights gained from the study",
                    "type": "string"
                },
                "modelUncertaintyId": {
                    "description": "Reference to the model uncertainty being studied",
                    "type": "string"
                },
                "name": {
                    "description": "Name or title of the sensitivity study",
                    "type": "string"
                },
                "parameterRanges": {
                    "$ref": "#/definitions/Record<string,[number,number]>",
                    "description": "Range of variation for each parameter\nRecord where key is parameter name and value is [min, max] tuple"
                },
                "reasonableAlternatives": {
                    "description": "Reasonable alternatives considered",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "results": {
                    "description": "Results of the sensitivity study",
                    "type": "string"
                },
                "significantAssumptions": {
                    "description": "Significant assumptions being evaluated",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "variedParameters": {
                    "description": "Parameters being varied in the study",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "description",
                "evaluatedSuccessCriteria",
                "impactOnDefinitions",
                "parameterRanges",
                "reasonableAlternatives",
                "significantAssumptions",
                "uuid",
                "variedParameters"
            ],
            "type": "object"
        },
        "SuccessCriterion": {
            "description": "Represents a criterion against which success is determined for any system, structure, component, or action.",
            "properties": {
                "criteriaText": {
                    "description": "The actual criteria statements",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Detailed description of the success criterion",
                    "type": "string"
                },
                "endState": {
                    "description": "The defined end state if applicable to this criterion",
                    "type": "string"
                },
                "engineeringBasisReferences": {
                    "description": "References to the engineering basis supporting this criterion",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "initiatingEventReferences": {
                    "description": "Links to related initiating events",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "plantOperatingStateReferences": {
                    "description": "Links to related plant operating states",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "criteriaText",
                "engineeringBasisReferences",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "SupportSystemSuccessCriteria": {
            "description": "Minimal interface for support system success criteria",
            "properties": {
                "criteriaType": {
                    "description": "Whether the success criteria are conservative or realistic",
                    "enum": [
                        "conservative",
                        "realistic"
                    ],
                    "type": "string"
                },
                "successCriteria": {
                    "description": "Success criteria for the support system",
                    "type": "string"
                },
                "supportedSystems": {
                    "description": "Systems supported by this support system",
                    "items": {
                        "$ref": "#/definitions/SystemReference"
                    },
                    "type": "array"
                },
                "systemReference": {
                    "$ref": "#/definitions/SystemReference",
                    "description": "Reference to the support system"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "criteriaType",
                "successCriteria",
                "supportedSystems",
                "systemReference",
                "uuid"
            ],
            "type": "object"
        },
        "SystemBasicEvent": {
            "description": "Extends the core BasicEvent type with system-specific properties.\nThe core BasicEvent is defined in the upstream core/events.ts module and is the\nauthoritative source for basic event definitions across the codebase.\n\nThis follows the dependency structure where:\n1. Core events.ts (most upstream): Defines the base BasicEvent interface\n2. Systems-analysis.ts (midstream): Extends BasicEvent with system-specific properties\n3. Data-analysis.ts (downstream): Uses both BasicEvent and references SystemBasicEvent",
            "properties": {
                "componentReference": {
                    "description": "Reference to the component associated with this basic event, if applicable.",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "eventType": {
                    "const": "BASIC",
                    "type": "string"
                },
                "failureMode": {
                    "description": "The failure mode represented by this basic event.",
                    "type": "string"
                },
                "meanTimeToRepair": {
                    "description": "Mean time to repair, if repair is modeled",
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "probability": {
                    "description": "The probability or frequency of this basic event.",
                    "type": "number"
                },
                "repairJustification": {
                    "description": "Justification for modeling repair, if applicable",
                    "type": "string"
                },
                "repairModeled": {
                    "description": "Whether repair is modeled for this basic event",
                    "type": "boolean"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "eventType",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "SystemDefinition": {
            "description": "Interface for a system definition, including boundaries, components, and success criteria.",
            "properties": {
                "boundaries": {
                    "description": "System boundaries, including components within the scope of the model.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "componentOperabilityLimits": {
                    "description": "Component operability and design limits.",
                    "items": {
                        "properties": {
                            "component": {
                                "type": "string"
                            },
                            "limit": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "component",
                            "limit"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "configurations": {
                    "description": "System configuration during normal and off-normal conditions, including alternative alignments.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the system's function and operation under normal and emergency conditions.",
                    "type": "string"
                },
                "humanActionsForOperation": {
                    "description": "Human actions necessary for the operation of the system.",
                    "items": {
                        "properties": {
                            "actionRef": {
                                "$ref": "#/definitions/HumanActionReference"
                            },
                            "description": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "actionRef",
                            "description"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "informationBasis": {
                    "description": "Indicates whether this system definition is based on as-built/as-operated\nor as-designed/as-intended-to-operate information",
                    "enum": [
                        "as-built-as-operated",
                        "as-designed-as-intended"
                    ],
                    "type": "string"
                },
                "justificationForExclusionOfComponents": {
                    "description": "Justification for exclusion of any components.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "justificationForExclusionOfFailureModes": {
                    "description": "Justification for exclusion of any failure modes.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "missionTime": {
                    "description": "Mission time for which the system is required to function.",
                    "type": "string"
                },
                "modelAssumptions": {
                    "description": "Assumptions or simplifications made in the development of the system model.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "modeledComponentsAndFailures": {
                    "$ref": "#/definitions/Record<string,{failureModes:string[];justificationForInclusion?:string|undefined;componentGroup?:string|undefined;}>",
                    "description": "Components and failure modes included in the model and justification for any exclusions."
                },
                "name": {
                    "type": "string"
                },
                "operabilityConsiderations": {
                    "description": "Information and calculations supporting equipment operability considerations and assumptions.",
                    "items": {
                        "properties": {
                            "calculationRef": {
                                "type": "string"
                            },
                            "component": {
                                "type": "string"
                            },
                            "notes": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "component"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "operatingLimitations": {
                    "description": "Operating limitations as per Technical Specifications or design basis.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "operatingProcedures": {
                    "description": "Procedures for the operation of the system during normal and off-normal conditions.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "operationalHistory": {
                    "description": "Actual operational history or history in similar systems indicating past problems.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "plantOperatingStates": {
                    "$ref": "#/definitions/PlantOperatingStatesTable",
                    "description": "Plant operating states where this system is required."
                },
                "preOperationalInformationJustification": {
                    "description": "For pre-operational PRAs, justification for information sources used",
                    "type": "string"
                },
                "schematic": {
                    "description": "System schematic illustrating all equipment and components necessary for operation.",
                    "properties": {
                        "description": {
                            "type": "string"
                        },
                        "reference": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "reference"
                    ],
                    "type": "object"
                },
                "spatialInformation": {
                    "description": "Component spatial information and environmental hazards that may impact multiple systems.",
                    "items": {
                        "properties": {
                            "components": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "hazards": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "location": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "location"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "successCriteria": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/SuccessCriteriaId",
                            "description": "Type for success criteria IDs.\nFormat: SC-[SYSTEM]-[NUMBER]\nExample: SC-RCIC-001"
                        },
                        {
                            "$ref": "#/definitions/SystemSuccessCriterion"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Success criteria for the system to perform its intended safety function(s)."
                },
                "temporalBehavior": {
                    "description": "Temporal behavior of the system with phase-dependent success criteria and failure modes.\nUsed for time-based modeling of system performance.",
                    "items": {
                        "$ref": "#/definitions/ComponentTimeline"
                    },
                    "type": "array"
                },
                "testAndMaintenance": {
                    "description": "Testing and maintenance requirements and practices relevant to system availability.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "testMaintenanceProcedures": {
                    "description": "Reference to system-related test and maintenance procedures.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "boundaries",
                "informationBasis",
                "modeledComponentsAndFailures",
                "name",
                "successCriteria",
                "uuid"
            ],
            "type": "object"
        },
        "SystemDependency": {
            "description": "Interface for a dependency between systems.",
            "properties": {
                "dependentSystem": {
                    "$ref": "#/definitions/SystemReference",
                    "description": "The dependent system."
                },
                "description": {
                    "description": "Description of the dependency.",
                    "type": "string"
                },
                "details": {
                    "description": "Additional details about the dependency.",
                    "type": "string"
                },
                "impact": {
                    "description": "The impact of this dependency on system performance.",
                    "type": "string"
                },
                "supportingSystem": {
                    "$ref": "#/definitions/SystemReference",
                    "description": "The supporting system."
                },
                "type": {
                    "description": "The type of dependency.",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "dependentSystem",
                "supportingSystem",
                "type",
                "uuid"
            ],
            "type": "object"
        },
        "SystemInterfaceDependency": {
            "description": "Interface representing an interface dependency between systems.",
            "properties": {
                "connectionPoints": {
                    "description": "Specific connection points or interfaces",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the interface dependency",
                    "type": "string"
                },
                "interfaceType": {
                    "description": "Type of interface (physical, functional, operational)",
                    "enum": [
                        "FUNCTIONAL",
                        "OPERATIONAL",
                        "PHYSICAL"
                    ],
                    "type": "string"
                },
                "involvedSystems": {
                    "description": "Systems involved in the interface",
                    "items": {
                        "$ref": "#/definitions/SystemReference_1"
                    },
                    "type": "array"
                },
                "modelingApproach": {
                    "description": "How the interface is modeled in event sequences",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "description",
                "interfaceType",
                "involvedSystems",
                "modelingApproach",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "SystemLogicModel": {
            "description": "Interface for a system logic model (e.g., fault tree).",
            "properties": {
                "basicEvents": {
                    "description": "Basic events included in the logic model and their descriptions.",
                    "items": {
                        "$ref": "#/definitions/SystemBasicEvent"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the logic model (e.g., top event).",
                    "type": "string"
                },
                "faultTree": {
                    "$ref": "#/definitions/FaultTree",
                    "description": "Fault tree representation of the system logic model, if applicable."
                },
                "logicLoopResolutions": {
                    "description": "Records of resolution of logic loops developed during fault tree linking (if used).",
                    "items": {
                        "properties": {
                            "loopId": {
                                "type": "string"
                            },
                            "resolution": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "loopId",
                            "resolution"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "modelRepresentation": {
                    "description": "Representation of the logic model (e.g., a textual representation or a link to an external file).",
                    "type": "string"
                },
                "nomenclature": {
                    "$ref": "#/definitions/Record<string,string>",
                    "description": "The nomenclature used in the system models."
                },
                "systemReference": {
                    "$ref": "#/definitions/SystemReference",
                    "description": "Reference to the system this logic model belongs to."
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "basicEvents",
                "description",
                "modelRepresentation",
                "systemReference",
                "uuid"
            ],
            "type": "object"
        },
        "SystemModelEvaluation": {
            "description": "Interface for system model evaluation results.",
            "properties": {
                "dominantContributors": {
                    "description": "Dominant failure modes or contributors.",
                    "items": {
                        "properties": {
                            "contribution": {
                                "type": "number"
                            },
                            "contributor": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "contribution",
                            "contributor"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "qualitativeInsights": {
                    "description": "Qualitative insights from the evaluation.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "quantitativeResults": {
                    "$ref": "#/definitions/Record<string,number>",
                    "description": "Other quantitative results from the evaluation."
                },
                "system": {
                    "$ref": "#/definitions/SystemReference",
                    "description": "The system being evaluated."
                },
                "topEventProbability": {
                    "description": "Top event probability or unavailability.",
                    "type": "number"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "system",
                "uuid"
            ],
            "type": "object"
        },
        "SystemReference": {
            "allOf": [
                {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "pattern",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "pattern": {
                                            "const": "^SYS-[A-Za-z0-9_-]+$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "pattern"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "RegExp(\"^SYS-[A-Za-z0-9_-]+$\").test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "^SYS-[A-Za-z0-9_-]+$",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ],
            "description": "Type for system IDs.\nFormat: SYS-[NAME] (e.g., SYS-RHR)"
        },
        "SystemReference_1": {
            "allOf": [
                {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "pattern",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "pattern": {
                                            "const": "^SYS-[A-Z0-9-]+$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "pattern"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "RegExp(\"^SYS-[A-Z0-9-]+$\").test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "^SYS-[A-Z0-9-]+$",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ],
            "description": "Type for system references.\nFormat: SYS-[NAME]\nExample: SYS-RCIC"
        },
        "SystemSensitivityStudy": {
            "description": "Interface for sensitivity studies on system models.",
            "properties": {
                "description": {
                    "description": "Description of the sensitivity study",
                    "type": "string"
                },
                "elementSpecificProperties": {
                    "$ref": "#/definitions/Record<string,unknown>",
                    "description": "Technical element specific properties\nAllows for extension with properties specific to a technical element"
                },
                "impact": {
                    "description": "Impact on analysis outcomes",
                    "type": "string"
                },
                "impactOnSystem": {
                    "description": "Impact on the system performance.",
                    "type": "string"
                },
                "insights": {
                    "description": "Insights gained from the sensitivity study.\nThis should be a comma-separated string of insights rather than an array\nto maintain compatibility with the parent SensitivityStudy interface.",
                    "type": "string"
                },
                "modelUncertaintyId": {
                    "description": "Reference to the model uncertainty being studied",
                    "type": "string"
                },
                "name": {
                    "description": "Name or title of the sensitivity study",
                    "type": "string"
                },
                "parameterChanged": {
                    "description": "Parameter changed in the sensitivity study.",
                    "type": "string"
                },
                "parameterRanges": {
                    "$ref": "#/definitions/Record<string,[number,number]>",
                    "description": "Range of variation for each parameter\nRecord where key is parameter name and value is [min, max] tuple"
                },
                "results": {
                    "description": "Results of the sensitivity study",
                    "type": "string"
                },
                "system": {
                    "$ref": "#/definitions/SystemReference",
                    "description": "The system being analyzed."
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "variedParameters": {
                    "description": "Parameters being varied in the study",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "description",
                "impactOnSystem",
                "parameterChanged",
                "parameterRanges",
                "system",
                "uuid",
                "variedParameters"
            ],
            "type": "object"
        },
        "SystemStatus": {
            "description": "Interface representing the system status.",
            "enum": [
                "NO",
                "YES"
            ],
            "type": "string"
        },
        "SystemSuccessCriteriaDefinition": {
            "description": "Represents system-specific success criteria including required capacities.",
            "properties": {
                "analysisReferences": {
                    "description": "References to supporting analyses",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the system's success criteria",
                    "type": "string"
                },
                "overallSuccessCriteriaId": {
                    "description": "Reference to overall success criteria this supports",
                    "type": "string"
                },
                "requiredCapacities": {
                    "description": "Required capacities for success",
                    "items": {
                        "properties": {
                            "basis": {
                                "description": "Basis for this requirement",
                                "type": "string"
                            },
                            "parameter": {
                                "description": "Parameter name",
                                "type": "string"
                            },
                            "value": {
                                "description": "Required value or range",
                                "type": "string"
                            }
                        },
                        "required": [
                            "basis",
                            "parameter",
                            "value"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "systemDependencies": {
                    "description": "Dependencies on other systems",
                    "items": {
                        "properties": {
                            "dependencyNature": {
                                "description": "Nature of the dependency",
                                "type": "string"
                            },
                            "dependentSystemId": {
                                "description": "Dependent system ID",
                                "type": "string"
                            }
                        },
                        "required": [
                            "dependencyNature",
                            "dependentSystemId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "systemId": {
                    "description": "System identifier",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "analysisReferences",
                "description",
                "overallSuccessCriteriaId",
                "requiredCapacities",
                "systemId",
                "uuid"
            ],
            "type": "object"
        },
        "SystemSuccessCriterion": {
            "description": "Represents a system-level success criterion.",
            "properties": {
                "criteriaText": {
                    "description": "The actual criteria statements",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Detailed description of the success criterion",
                    "type": "string"
                },
                "endState": {
                    "description": "The defined end state if applicable to this criterion",
                    "type": "string"
                },
                "engineeringBasisReferences": {
                    "description": "References to the engineering basis supporting this criterion",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "initiatingEventReferences": {
                    "description": "Links to related initiating events",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "plantOperatingStateReferences": {
                    "description": "Links to related plant operating states",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "requiredCapacity": {
                    "description": "Required system capacity",
                    "type": "string"
                },
                "systemReference": {
                    "description": "Reference to the system this criterion applies to",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "criteriaText",
                "engineeringBasisReferences",
                "name",
                "requiredCapacity",
                "systemReference",
                "uuid"
            ],
            "type": "object"
        },
        "SystemSuccessTreatment": {
            "description": "Treatment of system successes in event sequence quantification",
            "properties": {
                "impactOnResults": {
                    "description": "Impact of success modeling on results",
                    "type": "string"
                },
                "modelingExamples": {
                    "description": "Examples of how system success is modeled",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "systemsWithSuccessModeled": {
                    "description": "Systems for which success is explicitly modeled",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "treatmentMethod": {
                    "description": "Method for handling system successes",
                    "type": "string"
                }
            },
            "required": [
                "impactOnResults",
                "modelingExamples",
                "systemsWithSuccessModeled",
                "treatmentMethod"
            ],
            "type": "object"
        },
        "SystemToSafetyFunctionMapping": {
            "description": "Interface mapping systems to safety functions",
            "properties": {
                "eventSequences": {
                    "description": "Event sequences where this system is credited",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "safetyFunctions": {
                    "description": "Safety functions this system supports",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "systemReference": {
                    "$ref": "#/definitions/SystemReference",
                    "description": "Reference to the system"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "eventSequences",
                "safetyFunctions",
                "systemReference",
                "uuid"
            ],
            "type": "object"
        },
        "SystemUncertaintyAnalysis": {
            "description": "Interface for system uncertainty analysis.",
            "properties": {
                "ccfUncertainties": {
                    "description": "Common cause failure model uncertainties.",
                    "items": {
                        "properties": {
                            "ccfGroupId": {
                                "description": "CCF group ID",
                                "type": "string"
                            },
                            "description": {
                                "description": "Description of the uncertainty",
                                "type": "string"
                            },
                            "impact": {
                                "description": "Impact on system reliability",
                                "type": "string"
                            }
                        },
                        "required": [
                            "ccfGroupId",
                            "description",
                            "impact"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "modelUncertainties": {
                    "description": "Model uncertainties considered \nThe concept of identifying, describing, and defining the treatment approach\nfor model uncertainties is relevant across various technical elements of a PRA.",
                    "items": {
                        "properties": {
                            "description": {
                                "description": "Description of the uncertainty",
                                "type": "string"
                            },
                            "impact": {
                                "description": "Impact on the model",
                                "type": "string"
                            },
                            "isQuantified": {
                                "description": "Whether the uncertainty is quantified",
                                "type": "boolean"
                            },
                            "treatmentApproach": {
                                "description": "How the uncertainty is addressed",
                                "type": "string"
                            },
                            "uncertaintyId": {
                                "description": "Uncertainty ID",
                                "type": "string"
                            }
                        },
                        "required": [
                            "description",
                            "impact",
                            "isQuantified",
                            "treatmentApproach",
                            "uncertaintyId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "numberOfSamples": {
                    "description": "Number of samples if using simulation \nSpecific to simulation-based propagation methods (like Monte Carlo and Latin Hypercube)\nand is a general parameter for such methods.",
                    "type": "number"
                },
                "parameterUncertainties": {
                    "description": "Parameter uncertainties specific to this system.",
                    "items": {
                        "properties": {
                            "associatedComponent": {
                                "description": "Component or failure mode this parameter is associated with",
                                "type": "string"
                            },
                            "basis": {
                                "description": "Basis for the distribution",
                                "type": "string"
                            },
                            "distributionParameters": {
                                "$ref": "#/definitions/Record<string,number>",
                                "description": "Distribution parameters"
                            },
                            "distributionType": {
                                "$ref": "#/definitions/DistributionType",
                                "description": "Distribution type"
                            },
                            "parameterId": {
                                "description": "Parameter name or ID",
                                "type": "string"
                            }
                        },
                        "required": [
                            "basis",
                            "distributionParameters",
                            "distributionType",
                            "parameterId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "propagationMethod": {
                    "description": "Uncertainty propagation method \nDefines the method used to propagate uncertainty, which is a general concept\napplicable across different types of uncertainty analysis within a PRA.",
                    "enum": [
                        "ANALYTICAL",
                        "LATIN_HYPERCUBE",
                        "MONTE_CARLO",
                        "OTHER"
                    ],
                    "type": "string"
                },
                "randomSeed": {
                    "description": "Seed value for random number generator if using simulation \nUsed in simulation-based uncertainty propagation to ensure reproducibility\nor to control the random number generation process.",
                    "type": "number"
                },
                "sensitivityStudies": {
                    "description": "Sensitivity studies for unquantified uncertainties \nSensitivity analysis is a general technique used to assess the impact\nof parameter variations or uncertainties on the results of an analysis.",
                    "items": {
                        "$ref": "#/definitions/SensitivityStudy"
                    },
                    "type": "array"
                },
                "successCriteriaUncertainties": {
                    "description": "Uncertainty in system success criteria.",
                    "items": {
                        "properties": {
                            "criterionId": {
                                "description": "Success criterion ID",
                                "type": "string"
                            },
                            "description": {
                                "description": "Description of the uncertainty",
                                "type": "string"
                            },
                            "impact": {
                                "description": "Impact on system reliability",
                                "type": "string"
                            }
                        },
                        "required": [
                            "criterionId",
                            "description",
                            "impact"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "system": {
                    "$ref": "#/definitions/SystemReference",
                    "description": "The system being analyzed."
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "modelUncertainties",
                "parameterUncertainties",
                "propagationMethod",
                "system",
                "uuid"
            ],
            "type": "object"
        },
        "SystemsAnalysis": {
            "description": "Interface representing the Systems Analysis technical element.",
            "properties": {
                "commonAssumptions": {
                    "description": "Common assumptions that apply across this technical element\nUsing the standardized BaseAssumption interface",
                    "items": {
                        "$ref": "#/definitions/BaseAssumption"
                    },
                    "type": "array"
                },
                "commonCauseFailureGroups": {
                    "$ref": "#/definitions/Record<string,CommonCauseFailureGroup>",
                    "description": "Common cause failure groups."
                },
                "componentDependencies": {
                    "description": "Dependencies between components within systems.",
                    "items": {
                        "$ref": "#/definitions/ComponentDependency"
                    },
                    "type": "array"
                },
                "created": {
                    "description": "The date the technical element was created",
                    "type": "string"
                },
                "dependencySearchMethodology": {
                    "$ref": "#/definitions/DependencySearchMethodology",
                    "description": "Methodology used to search for dependencies."
                },
                "description": {
                    "description": "The description of the technical element",
                    "type": "string"
                },
                "digitalInstrumentationAndControl": {
                    "$ref": "#/definitions/Record<string,DigitalInstrumentationAndControl>",
                    "description": "Digital instrumentation and control systems modeling."
                },
                "humanFailureEventIntegrations": {
                    "description": "Human failure events integrated into system models.",
                    "items": {
                        "$ref": "#/definitions/HumanFailureEventIntegration"
                    },
                    "type": "array"
                },
                "modelUncertaintyDocumentation": {
                    "$ref": "#/definitions/ModelUncertaintyDocumentation_1",
                    "description": "Documentation of model uncertainty in the systems analysis."
                },
                "modelValidations": {
                    "description": "Model validation methods.",
                    "items": {
                        "$ref": "#/definitions/ModelValidation"
                    },
                    "type": "array"
                },
                "modified": {
                    "description": "The date the technical element was last modified",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "overCapacityConsiderations": {
                    "description": "Considerations of potential overload conditions.",
                    "items": {
                        "$ref": "#/definitions/OverCapacityConsideration"
                    },
                    "type": "array"
                },
                "owner": {
                    "description": "The owner of the technical element",
                    "type": "string"
                },
                "passiveSystemsTreatment": {
                    "$ref": "#/definitions/Record<string,PassiveSystemsTreatment>",
                    "description": "Passive safety systems modeling."
                },
                "processDocumentation": {
                    "$ref": "#/definitions/ProcessDocumentation_1",
                    "description": "Documentation of the process used in the systems analysis."
                },
                "references": {
                    "description": "References to other technical elements",
                    "items": {
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "technicalElementId": {
                                "type": "string"
                            },
                            "technicalElementType": {
                                "$ref": "#/definitions/TechnicalElementTypes"
                            }
                        },
                        "required": [
                            "description",
                            "technicalElementId",
                            "technicalElementType"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "sensitivityStudies": {
                    "description": "Sensitivity studies on system models.",
                    "items": {
                        "$ref": "#/definitions/SystemSensitivityStudy"
                    },
                    "type": "array"
                },
                "status": {
                    "description": "The status of the technical element",
                    "enum": [
                        "APPROVED",
                        "DEPRECATED",
                        "DRAFT",
                        "REVIEW"
                    ],
                    "type": "string"
                },
                "systemDefinitions": {
                    "$ref": "#/definitions/Record<SystemReference,SystemDefinition>",
                    "description": "System definitions, including boundaries, components, and success criteria."
                },
                "systemDependencies": {
                    "description": "Dependencies between systems.",
                    "items": {
                        "$ref": "#/definitions/SystemDependency"
                    },
                    "type": "array"
                },
                "systemLogicModels": {
                    "$ref": "#/definitions/Record<string,SystemLogicModel>",
                    "description": "System logic models (e.g., fault trees)."
                },
                "systemModelEvaluations": {
                    "$ref": "#/definitions/Record<SystemReference,SystemModelEvaluation>",
                    "description": "System model evaluation results."
                },
                "tags": {
                    "description": "Tags associated with the technical element",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "const": "systems-analysis",
                    "description": "The type of technical element",
                    "type": "string"
                },
                "uncertaintyAnalysis": {
                    "$ref": "#/definitions/Record<SystemReference,SystemUncertaintyAnalysis>",
                    "description": "Uncertainty analysis for systems."
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "version": {
                    "description": "The version of the technical element",
                    "type": "string"
                }
            },
            "required": [
                "commonCauseFailureGroups",
                "componentDependencies",
                "created",
                "dependencySearchMethodology",
                "digitalInstrumentationAndControl",
                "humanFailureEventIntegrations",
                "modelUncertaintyDocumentation",
                "modelValidations",
                "modified",
                "name",
                "overCapacityConsiderations",
                "passiveSystemsTreatment",
                "processDocumentation",
                "sensitivityStudies",
                "systemDefinitions",
                "systemDependencies",
                "systemLogicModels",
                "systemModelEvaluations",
                "type",
                "uuid",
                "version"
            ],
            "type": "object"
        },
        "TechnicalElement": {
            "description": "Base interface for all technical elements in the PRA model.\n\nTechnical elements are the major analytical tasks that, when completed in an integrated manner,\nmake up a PRA model. Each technical element represents a specific aspect of the PRA model.",
            "properties": {
                "commonAssumptions": {
                    "description": "Common assumptions that apply across this technical element\nUsing the standardized BaseAssumption interface",
                    "items": {
                        "$ref": "#/definitions/BaseAssumption"
                    },
                    "type": "array"
                },
                "created": {
                    "description": "The date the technical element was created",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the technical element",
                    "type": "string"
                },
                "modified": {
                    "description": "The date the technical element was last modified",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "description": "The owner of the technical element",
                    "type": "string"
                },
                "references": {
                    "description": "References to other technical elements",
                    "items": {
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "technicalElementId": {
                                "type": "string"
                            },
                            "technicalElementType": {
                                "$ref": "#/definitions/TechnicalElementTypes"
                            }
                        },
                        "required": [
                            "description",
                            "technicalElementId",
                            "technicalElementType"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "status": {
                    "description": "The status of the technical element",
                    "enum": [
                        "APPROVED",
                        "DEPRECATED",
                        "DRAFT",
                        "REVIEW"
                    ],
                    "type": "string"
                },
                "tags": {
                    "description": "Tags associated with the technical element",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "The type of technical element",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "version": {
                    "description": "The version of the technical element",
                    "type": "string"
                }
            },
            "required": [
                "created",
                "modified",
                "name",
                "type",
                "uuid",
                "version"
            ],
            "type": "object"
        },
        "TechnicalElementCode": {
            "enum": [
                "DA",
                "ES",
                "ESQ",
                "F",
                "FL",
                "HRA",
                "HS",
                "IE",
                "MS",
                "O",
                "POS",
                "RC",
                "RI",
                "S",
                "SC",
                "SY",
                "UNK",
                "W",
                "XF"
            ],
            "type": "string"
        },
        "TechnicalElementMetadata": {
            "description": "Interface representing common metadata for all technical elements.",
            "properties": {
                "analysisDate": {
                    "description": "Date when the analysis was performed",
                    "type": "string"
                },
                "analysts": {
                    "description": "Person or team who performed the analysis",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "approvalStatus": {
                    "description": "Current approval status of the analysis",
                    "enum": [
                        "APPROVED",
                        "DRAFT",
                        "REJECTED",
                        "REVIEWED"
                    ],
                    "type": "string"
                },
                "lastModifiedBy": {
                    "description": "Last modified by",
                    "type": "string"
                },
                "lastModifiedDate": {
                    "description": "Last modified date",
                    "type": "string"
                },
                "limitations": {
                    "description": "Limitations of the analysis",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "reviewers": {
                    "description": "Person or team who reviewed the analysis",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "scope": {
                    "description": "Scope of the analysis",
                    "type": "string"
                },
                "version": {
                    "description": "Version information for the technical element",
                    "type": "string"
                }
            },
            "required": [
                "analysisDate",
                "analysts",
                "approvalStatus",
                "lastModifiedBy",
                "lastModifiedDate",
                "scope",
                "version"
            ],
            "type": "object"
        },
        "TechnicalElementTypes": {
            "description": "Enum representing the types of PRA (Probabilistic Risk Assessment) technical elements.",
            "enum": [
                "unknown",
                "plant-operating-states-analysis",
                "initiating-event-analysis",
                "event-sequence-analysis",
                "success-criteria-development",
                "systems-analysis",
                "human-reliability-analysis",
                "data-analysis",
                "event-sequence-quantification",
                "mechanistic-source-term-analysis",
                "consequence-analysis",
                "risk-integration",
                "internal-flood-pra",
                "internal-fire-pra",
                "seismic-pra",
                "hazards-screening-analysis",
                "high-winds-pra",
                "external-flooding-pra",
                "other-hazards-pra"
            ],
            "type": "string"
        },
        "TemporalPhase": {
            "description": "Interface representing a time phase for system or component operation.\nDefines characteristics and requirements during a specific period.",
            "properties": {
                "activeFailureModes": {
                    "description": "Failure modes that are active during this phase",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the phase",
                    "type": "string"
                },
                "endTime": {
                    "allOf": [
                        {
                            "properties": {
                                "typia.tag": {
                                    "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                    "properties": {
                                        "exclusive": {
                                            "items": [
                                                {
                                                    "const": "minimum",
                                                    "type": "string"
                                                },
                                                {
                                                    "const": "exclusiveMinimum",
                                                    "type": "string"
                                                }
                                            ],
                                            "maxItems": 2,
                                            "minItems": 2,
                                            "type": "array"
                                        },
                                        "kind": {
                                            "const": "minimum",
                                            "type": "string"
                                        },
                                        "schema": {
                                            "properties": {
                                                "minimum": {
                                                    "const": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "minimum"
                                            ],
                                            "type": "object"
                                        },
                                        "target": {
                                            "const": "number",
                                            "type": "string"
                                        },
                                        "validate": {
                                            "const": "0 <= $input",
                                            "type": "string"
                                        },
                                        "value": {
                                            "const": 0,
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "exclusive",
                                        "kind",
                                        "schema",
                                        "target",
                                        "validate",
                                        "value"
                                    ],
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "description": "End time of the phase in hours",
                    "minimum": 0
                },
                "requiredHumanActions": {
                    "description": "Human actions required during this phase",
                    "items": {
                        "$ref": "#/definitions/HumanActionReference"
                    },
                    "type": "array"
                },
                "startTime": {
                    "allOf": [
                        {
                            "properties": {
                                "typia.tag": {
                                    "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                    "properties": {
                                        "exclusive": {
                                            "items": [
                                                {
                                                    "const": "minimum",
                                                    "type": "string"
                                                },
                                                {
                                                    "const": "exclusiveMinimum",
                                                    "type": "string"
                                                }
                                            ],
                                            "maxItems": 2,
                                            "minItems": 2,
                                            "type": "array"
                                        },
                                        "kind": {
                                            "const": "minimum",
                                            "type": "string"
                                        },
                                        "schema": {
                                            "properties": {
                                                "minimum": {
                                                    "const": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "minimum"
                                            ],
                                            "type": "object"
                                        },
                                        "target": {
                                            "const": "number",
                                            "type": "string"
                                        },
                                        "validate": {
                                            "const": "0 <= $input",
                                            "type": "string"
                                        },
                                        "value": {
                                            "const": 0,
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "exclusive",
                                        "kind",
                                        "schema",
                                        "target",
                                        "validate",
                                        "value"
                                    ],
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "description": "Start time of the phase in hours from sequence initiation",
                    "minimum": 0
                },
                "state": {
                    "$ref": "#/definitions/ComponentState",
                    "description": "Current state of the component or system during this phase"
                },
                "successCriteria": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "items": {
                                "$ref": "#/definitions/SuccessCriteriaId"
                            },
                            "type": "array"
                        },
                        {
                            "items": {
                                "$ref": "#/definitions/SuccessCriterion"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Success criteria that must be met during this phase\nCan be simple string descriptions or references to formal success criteria"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "endTime",
                "startTime",
                "state",
                "uuid"
            ],
            "type": "object"
        },
        "ThermalFluidAnalysis": {
            "description": "Interface for thermal-fluid analysis specifics.",
            "properties": {
                "analysisTimeSpan": {
                    "description": "Time span of the analysis",
                    "type": "string"
                },
                "engineeringAnalysisId": {
                    "description": "Reference to the engineering analysis",
                    "type": "string"
                },
                "eventSequencesAnalyzed": {
                    "description": "Event sequences analyzed",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "resultsSummary": {
                    "description": "Analysis results summary",
                    "type": "string"
                },
                "systemResponsesModeled": {
                    "description": "System responses modeled",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "thermalParametersAnalyzed": {
                    "description": "Key thermal parameters analyzed",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "analysisTimeSpan",
                "engineeringAnalysisId",
                "eventSequencesAnalyzed",
                "resultsSummary",
                "systemResponsesModeled",
                "thermalParametersAnalyzed",
                "uuid"
            ],
            "type": "object"
        },
        "TimeBoundary": {
            "description": "Reusable interface for representing time boundaries of plant operating states.\nUsed to define when a POS begins and ends to ensure mutual exclusivity.",
            "properties": {
                "endingCondition": {
                    "description": "Ending condition or event that marks the end of this POS\n(e.g., \"Criticality achieved\", \"Cold shutdown reached\")",
                    "type": "string"
                },
                "startingCondition": {
                    "description": "Starting condition or event that marks the beginning of this POS \n(e.g., \"Reactor trip\", \"Begin control rod withdrawal\")",
                    "type": "string"
                },
                "transitionParameters": {
                    "description": "Specific plant parameters that define this transition\nUses the reusable TransitionParameter interface",
                    "items": {
                        "$ref": "#/definitions/TransitionParameter"
                    },
                    "type": "array"
                }
            },
            "required": [
                "endingCondition",
                "startingCondition"
            ],
            "type": "object"
        },
        "TimeVaryingCondition": {
            "description": "Interface representing a time-varying condition within a plant operating state.\nConditions within a POS are not always constant, and certain parameters can change\nover time, affecting the risk profile.",
            "properties": {
                "impact": {
                    "description": "Description of the impact on safety functions",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parameter": {
                    "description": "Parameter that is changing (e.g., Decay Heat)",
                    "type": "string"
                },
                "requiresMonitoring": {
                    "description": "Whether this condition requires special monitoring",
                    "type": "boolean"
                },
                "time": {
                    "description": "Time in hours from the start of the POS",
                    "type": "number"
                },
                "uncertainty": {
                    "description": "Associated uncertainty",
                    "type": "number"
                },
                "units": {
                    "description": "Units of measurement",
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "value": {
                    "description": "Value of the parameter at this time",
                    "type": "number"
                }
            },
            "required": [
                "impact",
                "name",
                "parameter",
                "requiresMonitoring",
                "time",
                "uuid",
                "value"
            ],
            "type": "object"
        },
        "TimeWindow": {
            "description": "Interface representing a time window for operator actions.\nUsed to define the available time for human actions in event sequences.",
            "properties": {
                "basis": {
                    "description": "Basis for the time window calculation",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the time window",
                    "type": "string"
                },
                "deterministicAnalysisReferences": {
                    "description": "References to deterministic analyses supporting the time window",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "endTime": {
                    "allOf": [
                        {
                            "properties": {
                                "typia.tag": {
                                    "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                    "properties": {
                                        "exclusive": {
                                            "items": [
                                                {
                                                    "const": "minimum",
                                                    "type": "string"
                                                },
                                                {
                                                    "const": "exclusiveMinimum",
                                                    "type": "string"
                                                }
                                            ],
                                            "maxItems": 2,
                                            "minItems": 2,
                                            "type": "array"
                                        },
                                        "kind": {
                                            "const": "minimum",
                                            "type": "string"
                                        },
                                        "schema": {
                                            "properties": {
                                                "minimum": {
                                                    "const": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "minimum"
                                            ],
                                            "type": "object"
                                        },
                                        "target": {
                                            "const": "number",
                                            "type": "string"
                                        },
                                        "validate": {
                                            "const": "0 <= $input",
                                            "type": "string"
                                        },
                                        "value": {
                                            "const": 0,
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "exclusive",
                                        "kind",
                                        "schema",
                                        "target",
                                        "validate",
                                        "value"
                                    ],
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "description": "End time for the action (hours after initiating event)"
                },
                "startTime": {
                    "allOf": [
                        {
                            "properties": {
                                "typia.tag": {
                                    "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                                    "properties": {
                                        "exclusive": {
                                            "items": [
                                                {
                                                    "const": "minimum",
                                                    "type": "string"
                                                },
                                                {
                                                    "const": "exclusiveMinimum",
                                                    "type": "string"
                                                }
                                            ],
                                            "maxItems": 2,
                                            "minItems": 2,
                                            "type": "array"
                                        },
                                        "kind": {
                                            "const": "minimum",
                                            "type": "string"
                                        },
                                        "schema": {
                                            "properties": {
                                                "minimum": {
                                                    "const": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "minimum"
                                            ],
                                            "type": "object"
                                        },
                                        "target": {
                                            "const": "number",
                                            "type": "string"
                                        },
                                        "validate": {
                                            "const": "0 <= $input",
                                            "type": "string"
                                        },
                                        "value": {
                                            "const": 0,
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "exclusive",
                                        "kind",
                                        "schema",
                                        "target",
                                        "validate",
                                        "value"
                                    ],
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "description": "Start time for the action (hours after initiating event)"
                }
            },
            "required": [
                "endTime",
                "startTime"
            ],
            "type": "object"
        },
        "TopEvent": {
            "description": "Top Event",
            "properties": {
                "description": {
                    "type": "string"
                },
                "eventSubType": {
                    "const": "TOP",
                    "type": "string"
                },
                "eventType": {
                    "const": "FUNCTIONAL",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "eventSubType",
                "eventType",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "TransitionEvent": {
            "description": "Interface representing a transition event between plant operating states.\nTransitions between states can introduce unique risks that need to be captured\nand analyzed.",
            "properties": {
                "criticalParameters": {
                    "description": "Critical parameters to monitor during the transition",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the transition",
                    "type": "string"
                },
                "duration": {
                    "description": "Duration of the transition",
                    "type": "number"
                },
                "frequency": {
                    "$ref": "#/definitions/Frequency",
                    "description": "Frequency of the transition (occurrences per year)"
                },
                "fromStateId": {
                    "description": "ID of the source state",
                    "type": "string"
                },
                "mitigatingActions": {
                    "description": "Mitigating actions to reduce transition risks",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "Name of the transition event",
                    "type": "string"
                },
                "potentialFailureModes": {
                    "description": "Potential failure modes during this transition",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "procedureIds": {
                    "description": "Operating procedures governing this transition",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "requiredEquipment": {
                    "description": "Equipment that must be available during this transition",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "requiredHumanActions": {
                    "description": "Human actions required during this transition",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "riskSignificance": {
                    "description": "Risk significance of this transition",
                    "enum": [
                        "HIGH",
                        "LOW",
                        "MEDIUM"
                    ],
                    "type": "string"
                },
                "risks": {
                    "description": "Risks associated with this transition",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "specialConsiderations": {
                    "description": "Special considerations during the transition",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "toStateId": {
                    "description": "ID of the destination state",
                    "type": "string"
                },
                "transitionParameters": {
                    "description": "Specific plant parameters that define this transition\nUses the reusable TransitionParameter interface",
                    "items": {
                        "$ref": "#/definitions/TransitionParameter"
                    },
                    "type": "array"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "fromStateId",
                "name",
                "risks",
                "toStateId",
                "uuid"
            ],
            "type": "object"
        },
        "TransitionParameter": {
            "description": "Reusable interface for representing transition parameters.\nUsed to define specific plant parameters that mark transitions between states.",
            "properties": {
                "monitored": {
                    "description": "Whether this parameter is being monitored",
                    "type": "boolean"
                },
                "monitoringInstruments": {
                    "description": "Instruments used to monitor this parameter",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "parameter": {
                    "description": "The plant parameter name",
                    "type": "string"
                },
                "units": {
                    "description": "Units of measurement, if applicable",
                    "type": "string"
                },
                "value": {
                    "description": "The threshold value that marks the transition",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "required": [
                "parameter",
                "value"
            ],
            "type": "object"
        },
        "TransitionRisk": {
            "description": "Reusable interface for representing transition risks.\nUsed to document risks associated with transitions between operating states.",
            "properties": {
                "description": {
                    "description": "Description of the transition",
                    "type": "string"
                },
                "mitigatingActions": {
                    "description": "Mitigating actions",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "requiredEquipment": {
                    "description": "Equipment that must be available during this transition",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "requiredHumanActions": {
                    "description": "Human actions required during this transition",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "risks": {
                    "description": "Risks associated with the transition",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "significance": {
                    "$ref": "#/definitions/ImportanceLevel",
                    "description": "Significance of the risks"
                },
                "transitionId": {
                    "description": "ID of the transition",
                    "type": "string"
                }
            },
            "required": [
                "description",
                "risks",
                "significance",
                "transitionId"
            ],
            "type": "object"
        },
        "TransportMechanism": {
            "description": "Represents a mechanism for radionuclide transport.",
            "properties": {
                "activatingConditions": {
                    "description": "Conditions that activate or enhance this transport mechanism",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "affectedRadionuclides": {
                    "description": "Radionuclides primarily transported by this mechanism",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description of the transport mechanism",
                    "type": "string"
                },
                "mechanismType": {
                    "description": "Type of transport mechanism",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "description",
                "mechanismType",
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "TransportPhenomena": {
            "description": "Details of the radionuclide transport phenomena for a specific release category.",
            "properties": {
                "consequenceQuantificationSupport": {
                    "description": "Justification that the treatment of phenomena is sufficient to support Consequence Quantification",
                    "properties": {
                        "adequacyJustification": {
                            "description": "Justification for the adequacy of the treatment",
                            "type": "string"
                        },
                        "description": {
                            "description": "Description of how the phenomena treatment supports consequence quantification",
                            "type": "string"
                        }
                    },
                    "required": [
                        "adequacyJustification",
                        "description"
                    ],
                    "type": "object"
                },
                "modelsUsed": {
                    "description": "Models and computer programs used to analyze these phenomena",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "msB5Assessment": {
                    "description": "Assessment of specific MS-B5 phenomena for inclusion",
                    "properties": {
                        "assessedPhenomena": {
                            "description": "Phenomena assessed and their inclusion status",
                            "items": {
                                "properties": {
                                    "included": {
                                        "type": "boolean"
                                    },
                                    "justification": {
                                        "type": "string"
                                    },
                                    "phenomenonType": {
                                        "$ref": "#/definitions/TransportPhenomenonType"
                                    }
                                },
                                "required": [
                                    "included",
                                    "phenomenonType"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "assessmentJustification": {
                            "description": "Justification for the overall assessment approach",
                            "type": "string"
                        }
                    },
                    "required": [
                        "assessedPhenomena"
                    ],
                    "type": "object"
                },
                "phenomena": {
                    "description": "Description of the relevant transport phenomena",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "phenomenaTypes": {
                    "description": "Type classification of each phenomenon",
                    "items": {
                        "$ref": "#/definitions/TransportPhenomenonType"
                    },
                    "type": "array"
                },
                "relatedBarriers": {
                    "description": "Barriers that affect these transport phenomena",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "relatedMechanisms": {
                    "description": "Transport mechanisms involved in these phenomena",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "releaseCategoryReference": {
                    "$ref": "#/definitions/ReleaseCategoryReference_1",
                    "description": "Reference to the release category"
                },
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "modelsUsed",
                "phenomena",
                "releaseCategoryReference",
                "uuid"
            ],
            "type": "object"
        },
        "TransportPhenomenonType": {
            "description": "The types of transport phenomena that can affect radionuclide release.",
            "enum": [
                "BARRIER_FAILURE",
                "BARRIER_LEAKAGE",
                "DEPOSITION",
                "RESUSPENSION",
                "CHEMICAL_INTERACTION",
                "THERMAL_PROCESS",
                "MECHANICAL_PROCESS",
                "HEAT_GENERATION",
                "HEAT_REMOVAL",
                "GASEOUS_TRANSPORT",
                "SOLID_TRANSPORT",
                "INVENTORY_RELOCATION",
                "EXPLOSION_EFFECTS",
                "RADIONUCLIDE_TRANSFORMATION",
                "OTHER"
            ],
            "type": "string"
        },
        "TruncationMethod": {
            "description": "Enum representing the different methods for truncating event sequences",
            "enum": [
                "ABSOLUTE_FREQUENCY",
                "PERCENTAGE_OF_TOTAL",
                "SIGNIFICANT_DIGITS",
                "RELATIVE_CONTRIBUTION"
            ],
            "type": "string"
        },
        "Uncertainty": {
            "description": "Interface representing the uncertainty associated with a parameter.\nThe structure of the uncertainty changes based on the distribution type.\n\nThis interface implements several PRA standard requirements:\n- **HLR-DA-D**: The parameter estimates shall be based on relevant generic industry and technology- and plant-specific evidence.\n- **DA-A3**: USE an appropriate probability model for each basic event.\n- **DA-A5**: IDENTIFY the sources of model uncertainty, the related assumptions, and reasonable alternatives\n- **ESQ-E1**: ASSESS the effects on event sequence family frequencies of the model uncertainties and related assumptions\n- **RI-C1**: COMPILE a list of key sources of model uncertainty and related assumptions",
            "properties": {
                "correlations": {
                    "description": "Correlations with other parameters. Captures dependencies between parameters.",
                    "items": {
                        "properties": {
                            "correlationFactor": {
                                "description": "Correlation coefficient or factor.",
                                "type": "number"
                            },
                            "correlationType": {
                                "description": "Type of correlation (\"common_cause\" | \"environmental\" | \"operational\" | \"other\").",
                                "enum": [
                                    "common_cause",
                                    "environmental",
                                    "operational",
                                    "other"
                                ],
                                "type": "string"
                            },
                            "description": {
                                "description": "Description of correlation basis.",
                                "type": "string"
                            },
                            "parameterId": {
                                "description": "Reference to correlated parameter.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "correlationFactor",
                            "correlationType",
                            "parameterId"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "distribution": {
                    "$ref": "#/definitions/DistributionType",
                    "description": "The probability distribution type for the uncertainty."
                },
                "model_uncertainty_sources": {
                    "description": "Sources of uncertainty in the model (e.g., \"Limited data\", \"Model assumptions\").",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "parameters": {
                    "$ref": "#/definitions/Record<string,number>",
                    "description": "Parameters associated with the distribution (e.g., mean, standard deviation)."
                },
                "riskImplications": {
                    "description": "Risk assessment implications of this uncertainty.",
                    "properties": {
                        "affectedMetrics": {
                            "description": "References to risk metrics affected by this uncertainty (e.g., \"CDF\", \"LERF\").",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "propagationNotes": {
                            "description": "Notes on how this uncertainty propagates through the risk model.",
                            "type": "string"
                        },
                        "significanceLevel": {
                            "description": "Qualitative assessment of uncertainty significance (\"high\" | \"medium\" | \"low\").",
                            "enum": [
                                "high",
                                "low",
                                "medium"
                            ],
                            "type": "string"
                        }
                    },
                    "required": [
                        "affectedMetrics",
                        "significanceLevel"
                    ],
                    "type": "object"
                },
                "sensitivityStudies": {
                    "description": "Results of sensitivity studies",
                    "items": {
                        "$ref": "#/definitions/SensitivityStudy"
                    },
                    "type": "array"
                }
            },
            "required": [
                "distribution",
                "parameters"
            ],
            "type": "object"
        },
        "Unique": {
            "properties": {
                "uuid": {
                    "properties": {
                        "typia.tag": {
                            "description": "This is a dummy property for compilation.\n\nIt does not mean anything in runtime.",
                            "properties": {
                                "exclusive": {
                                    "items": [
                                        {
                                            "const": "format",
                                            "type": "string"
                                        },
                                        {
                                            "const": "pattern",
                                            "type": "string"
                                        }
                                    ],
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array"
                                },
                                "kind": {
                                    "const": "format",
                                    "type": "string"
                                },
                                "schema": {
                                    "properties": {
                                        "format": {
                                            "const": "uuid",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "format"
                                    ],
                                    "type": "object"
                                },
                                "target": {
                                    "const": "string",
                                    "type": "string"
                                },
                                "validate": {
                                    "const": "/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test($input)",
                                    "type": "string"
                                },
                                "value": {
                                    "const": "uuid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "exclusive",
                                "kind",
                                "schema",
                                "target",
                                "validate",
                                "value"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "uuid"
            ],
            "type": "object"
        }
    }
}

